// Generated by purs bundle 0.13.8
var PS = {};
(function(exports) {
  exports.toExprFFI = constructors => val => {
    if(constructors[typeof(val)])
      return constructors[typeof(val)](val);
    else if(constructors[val.constructor.name.toLowerCase()])
      return constructors[val.constructor.name.toLowerCase()](val);
    else
      return constructors['undefined'](val);
  }
})(PS["BotScript"] = PS["BotScript"] || {});
(function(exports) {
  "use strict";

  exports.foldrArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = len - 1; i >= 0; i--) {
          acc = f(xs[i])(acc);
        }
        return acc;
      };
    };
  };

  exports.foldlArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = 0; i < len; i++) {
          acc = f(acc)(xs[i]);
        }
        return acc;
      };
    };
  };
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
  "use strict";

  var refEq = function (r1) {
    return function (r2) {
      return r1 === r2;
    };
  };                            
  exports.eqIntImpl = refEq;   
  exports.eqCharImpl = refEq;
  exports.eqStringImpl = refEq;
})(PS["Data.Eq"] = PS["Data.Eq"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Eq"] = $PS["Data.Eq"] || {};
  var exports = $PS["Data.Eq"];
  var $foreign = $PS["Data.Eq"];
  var Eq = function (eq) {
      this.eq = eq;
  }; 
  var eqString = new Eq($foreign.eqStringImpl);
  var eqInt = new Eq($foreign.eqIntImpl);
  var eqChar = new Eq($foreign.eqCharImpl);
  var eq = function (dict) {
      return dict.eq;
  };
  exports["eq"] = eq;
  exports["eqInt"] = eqInt;
  exports["eqChar"] = eqChar;
  exports["eqString"] = eqString;
})(PS);
(function(exports) {
  "use strict";

  exports.arrayMap = function (f) {
    return function (arr) {
      var l = arr.length;
      var result = new Array(l);
      for (var i = 0; i < l; i++) {
        result[i] = f(arr[i]);
      }
      return result;
    };
  };
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Control.Semigroupoid"] = $PS["Control.Semigroupoid"] || {};
  var exports = $PS["Control.Semigroupoid"];
  var Semigroupoid = function (compose) {
      this.compose = compose;
  };
  var semigroupoidFn = new Semigroupoid(function (f) {
      return function (g) {
          return function (x) {
              return f(g(x));
          };
      };
  });
  var compose = function (dict) {
      return dict.compose;
  };
  exports["compose"] = compose;
  exports["semigroupoidFn"] = semigroupoidFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Function"] = $PS["Data.Function"] || {};
  var exports = $PS["Data.Function"];
  var flip = function (f) {
      return function (b) {
          return function (a) {
              return f(a)(b);
          };
      };
  };
  var $$const = function (a) {
      return function (v) {
          return a;
      };
  };
  exports["flip"] = flip;
  exports["const"] = $$const;
})(PS);
(function(exports) {
  "use strict";

  exports.unit = {};
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Unit"] = $PS["Data.Unit"] || {};
  var exports = $PS["Data.Unit"];
  var $foreign = $PS["Data.Unit"];
  exports["unit"] = $foreign.unit;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Functor"] = $PS["Data.Functor"] || {};
  var exports = $PS["Data.Functor"];
  var $foreign = $PS["Data.Functor"];
  var Control_Semigroupoid = $PS["Control.Semigroupoid"];
  var Data_Function = $PS["Data.Function"];
  var Data_Unit = $PS["Data.Unit"];                
  var Functor = function (map) {
      this.map = map;
  };
  var map = function (dict) {
      return dict.map;
  };
  var $$void = function (dictFunctor) {
      return map(dictFunctor)(Data_Function["const"](Data_Unit.unit));
  };
  var voidLeft = function (dictFunctor) {
      return function (f) {
          return function (x) {
              return map(dictFunctor)(Data_Function["const"](x))(f);
          };
      };
  };
  var functorFn = new Functor(Control_Semigroupoid.compose(Control_Semigroupoid.semigroupoidFn));
  var functorArray = new Functor($foreign.arrayMap);
  exports["Functor"] = Functor;
  exports["map"] = map;
  exports["void"] = $$void;
  exports["voidLeft"] = voidLeft;
  exports["functorFn"] = functorFn;
  exports["functorArray"] = functorArray;
})(PS);
(function(exports) {
  "use strict";

  exports.boolConj = function (b1) {
    return function (b2) {
      return b1 && b2;
    };
  };

  exports.boolDisj = function (b1) {
    return function (b2) {
      return b1 || b2;
    };
  };

  exports.boolNot = function (b) {
    return !b;
  };
})(PS["Data.HeytingAlgebra"] = PS["Data.HeytingAlgebra"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.HeytingAlgebra"] = $PS["Data.HeytingAlgebra"] || {};
  var exports = $PS["Data.HeytingAlgebra"];
  var $foreign = $PS["Data.HeytingAlgebra"];
  var HeytingAlgebra = function (conj, disj, ff, implies, not, tt) {
      this.conj = conj;
      this.disj = disj;
      this.ff = ff;
      this.implies = implies;
      this.not = not;
      this.tt = tt;
  };
  var not = function (dict) {
      return dict.not;
  };
  var ff = function (dict) {
      return dict.ff;
  };
  var disj = function (dict) {
      return dict.disj;
  };
  var heytingAlgebraBoolean = new HeytingAlgebra($foreign.boolConj, $foreign.boolDisj, false, function (a) {
      return function (b) {
          return disj(heytingAlgebraBoolean)(not(heytingAlgebraBoolean)(a))(b);
      };
  }, $foreign.boolNot, true);
  exports["ff"] = ff;
  exports["disj"] = disj;
  exports["not"] = not;
  exports["heytingAlgebraBoolean"] = heytingAlgebraBoolean;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Control.Category"] = $PS["Control.Category"] || {};
  var exports = $PS["Control.Category"];
  var Control_Semigroupoid = $PS["Control.Semigroupoid"];                
  var Category = function (Semigroupoid0, identity) {
      this.Semigroupoid0 = Semigroupoid0;
      this.identity = identity;
  };
  var identity = function (dict) {
      return dict.identity;
  };
  var categoryFn = new Category(function () {
      return Control_Semigroupoid.semigroupoidFn;
  }, function (x) {
      return x;
  });
  exports["identity"] = identity;
  exports["categoryFn"] = categoryFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Control.Apply"] = $PS["Control.Apply"] || {};
  var exports = $PS["Control.Apply"];
  var Control_Category = $PS["Control.Category"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];                
  var Apply = function (Functor0, apply) {
      this.Functor0 = Functor0;
      this.apply = apply;
  };                      
  var apply = function (dict) {
      return dict.apply;
  };
  var applyFirst = function (dictApply) {
      return function (a) {
          return function (b) {
              return apply(dictApply)(Data_Functor.map(dictApply.Functor0())(Data_Function["const"])(a))(b);
          };
      };
  };
  var applySecond = function (dictApply) {
      return function (a) {
          return function (b) {
              return apply(dictApply)(Data_Functor.map(dictApply.Functor0())(Data_Function["const"](Control_Category.identity(Control_Category.categoryFn)))(a))(b);
          };
      };
  };
  exports["Apply"] = Apply;
  exports["apply"] = apply;
  exports["applyFirst"] = applyFirst;
  exports["applySecond"] = applySecond;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Control.Applicative"] = $PS["Control.Applicative"] || {};
  var exports = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Data_Unit = $PS["Data.Unit"];                
  var Applicative = function (Apply0, pure) {
      this.Apply0 = Apply0;
      this.pure = pure;
  };
  var pure = function (dict) {
      return dict.pure;
  };
  var unless = function (dictApplicative) {
      return function (v) {
          return function (v1) {
              if (!v) {
                  return v1;
              };
              if (v) {
                  return pure(dictApplicative)(Data_Unit.unit);
              };
              throw new Error("Failed pattern match at Control.Applicative (line 62, column 1 - line 62, column 65): " + [ v.constructor.name, v1.constructor.name ]);
          };
      };
  };
  var liftA1 = function (dictApplicative) {
      return function (f) {
          return function (a) {
              return Control_Apply.apply(dictApplicative.Apply0())(pure(dictApplicative)(f))(a);
          };
      };
  };
  exports["Applicative"] = Applicative;
  exports["pure"] = pure;
  exports["liftA1"] = liftA1;
  exports["unless"] = unless;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Control.Bind"] = $PS["Control.Bind"] || {};
  var exports = $PS["Control.Bind"];
  var Data_Function = $PS["Data.Function"];                
  var Discard = function (discard) {
      this.discard = discard;
  };
  var Bind = function (Apply0, bind) {
      this.Apply0 = Apply0;
      this.bind = bind;
  };
  var discard = function (dict) {
      return dict.discard;
  };                     
  var bind = function (dict) {
      return dict.bind;
  };
  var bindFlipped = function (dictBind) {
      return Data_Function.flip(bind(dictBind));
  };
  var discardUnit = new Discard(function (dictBind) {
      return bind(dictBind);
  });
  exports["Bind"] = Bind;
  exports["bind"] = bind;
  exports["bindFlipped"] = bindFlipped;
  exports["discard"] = discard;
  exports["discardUnit"] = discardUnit;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Maybe"] = $PS["Data.Maybe"] || {};
  var exports = $PS["Data.Maybe"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];          
  var Nothing = (function () {
      function Nothing() {

      };
      Nothing.value = new Nothing();
      return Nothing;
  })();
  var Just = (function () {
      function Just(value0) {
          this.value0 = value0;
      };
      Just.create = function (value0) {
          return new Just(value0);
      };
      return Just;
  })();
  var maybe = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Nothing) {
                  return v;
              };
              if (v2 instanceof Just) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Maybe (line 217, column 1 - line 217, column 51): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  var isNothing = maybe(true)(Data_Function["const"](false));
  var isJust = maybe(false)(Data_Function["const"](true));
  var functorMaybe = new Data_Functor.Functor(function (v) {
      return function (v1) {
          if (v1 instanceof Just) {
              return new Just(v(v1.value0));
          };
          return Nothing.value;
      };
  });
  var fromMaybe = function (a) {
      return maybe(a)(Control_Category.identity(Control_Category.categoryFn));
  };
  var fromJust = function (dictPartial) {
      return function (v) {
          if (v instanceof Just) {
              return v.value0;
          };
          throw new Error("Failed pattern match at Data.Maybe (line 268, column 1 - line 268, column 46): " + [ v.constructor.name ]);
      };
  };
  var applyMaybe = new Control_Apply.Apply(function () {
      return functorMaybe;
  }, function (v) {
      return function (v1) {
          if (v instanceof Just) {
              return Data_Functor.map(functorMaybe)(v.value0)(v1);
          };
          if (v instanceof Nothing) {
              return Nothing.value;
          };
          throw new Error("Failed pattern match at Data.Maybe (line 67, column 1 - line 69, column 30): " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var bindMaybe = new Control_Bind.Bind(function () {
      return applyMaybe;
  }, function (v) {
      return function (v1) {
          if (v instanceof Just) {
              return v1(v.value0);
          };
          if (v instanceof Nothing) {
              return Nothing.value;
          };
          throw new Error("Failed pattern match at Data.Maybe (line 125, column 1 - line 127, column 28): " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var applicativeMaybe = new Control_Applicative.Applicative(function () {
      return applyMaybe;
  }, Just.create);
  exports["Nothing"] = Nothing;
  exports["Just"] = Just;
  exports["maybe"] = maybe;
  exports["fromMaybe"] = fromMaybe;
  exports["isJust"] = isJust;
  exports["isNothing"] = isNothing;
  exports["fromJust"] = fromJust;
  exports["functorMaybe"] = functorMaybe;
  exports["applicativeMaybe"] = applicativeMaybe;
  exports["bindMaybe"] = bindMaybe;
})(PS);
(function(exports) {
  "use strict";

  exports.concatString = function (s1) {
    return function (s2) {
      return s1 + s2;
    };
  };

  exports.concatArray = function (xs) {
    return function (ys) {
      if (xs.length === 0) return ys;
      if (ys.length === 0) return xs;
      return xs.concat(ys);
    };
  };
})(PS["Data.Semigroup"] = PS["Data.Semigroup"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Semigroup"] = $PS["Data.Semigroup"] || {};
  var exports = $PS["Data.Semigroup"];
  var $foreign = $PS["Data.Semigroup"];
  var Semigroup = function (append) {
      this.append = append;
  }; 
  var semigroupString = new Semigroup($foreign.concatString);
  var semigroupArray = new Semigroup($foreign.concatArray);
  var append = function (dict) {
      return dict.append;
  };
  exports["Semigroup"] = Semigroup;
  exports["append"] = append;
  exports["semigroupString"] = semigroupString;
  exports["semigroupArray"] = semigroupArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Monoid"] = $PS["Data.Monoid"] || {};
  var exports = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Monoid = function (Semigroup0, mempty) {
      this.Semigroup0 = Semigroup0;
      this.mempty = mempty;
  };                 
  var monoidString = new Monoid(function () {
      return Data_Semigroup.semigroupString;
  }, "");
  var mempty = function (dict) {
      return dict.mempty;
  };
  exports["Monoid"] = Monoid;
  exports["mempty"] = mempty;
  exports["monoidString"] = monoidString;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Monoid.Disj"] = $PS["Data.Monoid.Disj"] || {};
  var exports = $PS["Data.Monoid.Disj"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];      
  var Disj = function (x) {
      return x;
  };
  var semigroupDisj = function (dictHeytingAlgebra) {
      return new Data_Semigroup.Semigroup(function (v) {
          return function (v1) {
              return Data_HeytingAlgebra.disj(dictHeytingAlgebra)(v)(v1);
          };
      });
  };
  var monoidDisj = function (dictHeytingAlgebra) {
      return new Data_Monoid.Monoid(function () {
          return semigroupDisj(dictHeytingAlgebra);
      }, Data_HeytingAlgebra.ff(dictHeytingAlgebra));
  };
  exports["Disj"] = Disj;
  exports["monoidDisj"] = monoidDisj;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Newtype"] = $PS["Data.Newtype"] || {};
  var exports = $PS["Data.Newtype"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Monoid_Disj = $PS["Data.Monoid.Disj"];                      
  var Newtype = function (unwrap, wrap) {
      this.unwrap = unwrap;
      this.wrap = wrap;
  };
  var wrap = function (dict) {
      return dict.wrap;
  };
  var unwrap = function (dict) {
      return dict.unwrap;
  };                        
  var newtypeDisj = new Newtype(function (v) {
      return v;
  }, Data_Monoid_Disj.Disj);
  var alaF = function (dictFunctor) {
      return function (dictFunctor1) {
          return function (dictNewtype) {
              return function (dictNewtype1) {
                  return function (v) {
                      return function (f) {
                          var $96 = Data_Functor.map(dictFunctor1)(unwrap(dictNewtype1));
                          var $97 = Data_Functor.map(dictFunctor)(wrap(dictNewtype));
                          return function ($98) {
                              return $96(f($97($98)));
                          };
                      };
                  };
              };
          };
      };
  };
  exports["unwrap"] = unwrap;
  exports["wrap"] = wrap;
  exports["Newtype"] = Newtype;
  exports["alaF"] = alaF;
  exports["newtypeDisj"] = newtypeDisj;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Foldable"] = $PS["Data.Foldable"] || {};
  var exports = $PS["Data.Foldable"];
  var $foreign = $PS["Data.Foldable"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Monoid_Disj = $PS["Data.Monoid.Disj"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Semigroup = $PS["Data.Semigroup"];      
  var Foldable = function (foldMap, foldl, foldr) {
      this.foldMap = foldMap;
      this.foldl = foldl;
      this.foldr = foldr;
  };
  var foldr = function (dict) {
      return dict.foldr;
  };
  var foldl = function (dict) {
      return dict.foldl;
  };
  var intercalate = function (dictFoldable) {
      return function (dictMonoid) {
          return function (sep) {
              return function (xs) {
                  var go = function (v) {
                      return function (x) {
                          if (v.init) {
                              return {
                                  init: false,
                                  acc: x
                              };
                          };
                          return {
                              init: false,
                              acc: Data_Semigroup.append(dictMonoid.Semigroup0())(v.acc)(Data_Semigroup.append(dictMonoid.Semigroup0())(sep)(x))
                          };
                      };
                  };
                  return (foldl(dictFoldable)(go)({
                      init: true,
                      acc: Data_Monoid.mempty(dictMonoid)
                  })(xs)).acc;
              };
          };
      };
  }; 
  var foldMapDefaultR = function (dictFoldable) {
      return function (dictMonoid) {
          return function (f) {
              return foldr(dictFoldable)(function (x) {
                  return function (acc) {
                      return Data_Semigroup.append(dictMonoid.Semigroup0())(f(x))(acc);
                  };
              })(Data_Monoid.mempty(dictMonoid));
          };
      };
  };
  var foldableArray = new Foldable(function (dictMonoid) {
      return foldMapDefaultR(foldableArray)(dictMonoid);
  }, $foreign.foldlArray, $foreign.foldrArray);
  var foldMap = function (dict) {
      return dict.foldMap;
  };
  var find = function (dictFoldable) {
      return function (p) {
          var go = function (v) {
              return function (v1) {
                  if (v instanceof Data_Maybe.Nothing && p(v1)) {
                      return new Data_Maybe.Just(v1);
                  };
                  return v;
              };
          };
          return foldl(dictFoldable)(go)(Data_Maybe.Nothing.value);
      };
  };
  var any = function (dictFoldable) {
      return function (dictHeytingAlgebra) {
          return Data_Newtype.alaF(Data_Functor.functorFn)(Data_Functor.functorFn)(Data_Newtype.newtypeDisj)(Data_Newtype.newtypeDisj)(Data_Monoid_Disj.Disj)(foldMap(dictFoldable)(Data_Monoid_Disj.monoidDisj(dictHeytingAlgebra)));
      };
  };
  var elem = function (dictFoldable) {
      return function (dictEq) {
          var $204 = any(dictFoldable)(Data_HeytingAlgebra.heytingAlgebraBoolean);
          var $205 = Data_Eq.eq(dictEq);
          return function ($206) {
              return $204($205($206));
          };
      };
  };
  var notElem = function (dictFoldable) {
      return function (dictEq) {
          return function (x) {
              var $207 = Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraBoolean);
              var $208 = elem(dictFoldable)(dictEq)(x);
              return function ($209) {
                  return $207($208($209));
              };
          };
      };
  };
  exports["Foldable"] = Foldable;
  exports["foldr"] = foldr;
  exports["foldl"] = foldl;
  exports["intercalate"] = intercalate;
  exports["elem"] = elem;
  exports["notElem"] = notElem;
  exports["find"] = find;
  exports["foldableArray"] = foldableArray;
})(PS);
(function(exports) {
  "use strict";

  exports.showIntImpl = function (n) {
    return n.toString();
  };

  exports.showNumberImpl = function (n) {
    var str = n.toString();
    return isNaN(str + ".0") ? str : str + ".0";
  };

  exports.showCharImpl = function (c) {
    var code = c.charCodeAt(0);
    if (code < 0x20 || code === 0x7F) {
      switch (c) {
        case "\x07": return "'\\a'";
        case "\b": return "'\\b'";
        case "\f": return "'\\f'";
        case "\n": return "'\\n'";
        case "\r": return "'\\r'";
        case "\t": return "'\\t'";
        case "\v": return "'\\v'";
      }
      return "'\\" + code.toString(10) + "'";
    }
    return c === "'" || c === "\\" ? "'\\" + c + "'" : "'" + c + "'";
  };

  exports.showStringImpl = function (s) {
    var l = s.length;
    return "\"" + s.replace(
      /[\0-\x1F\x7F"\\]/g, // eslint-disable-line no-control-regex
      function (c, i) {
        switch (c) {
          case "\"":
          case "\\":
            return "\\" + c;
          case "\x07": return "\\a";
          case "\b": return "\\b";
          case "\f": return "\\f";
          case "\n": return "\\n";
          case "\r": return "\\r";
          case "\t": return "\\t";
          case "\v": return "\\v";
        }
        var k = i + 1;
        var empty = k < l && s[k] >= "0" && s[k] <= "9" ? "\\&" : "";
        return "\\" + c.charCodeAt(0).toString(10) + empty;
      }
    ) + "\"";
  };

  exports.showArrayImpl = function (f) {
    return function (xs) {
      var ss = [];
      for (var i = 0, l = xs.length; i < l; i++) {
        ss[i] = f(xs[i]);
      }
      return "[" + ss.join(",") + "]";
    };
  };
})(PS["Data.Show"] = PS["Data.Show"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Show"] = $PS["Data.Show"] || {};
  var exports = $PS["Data.Show"];
  var $foreign = $PS["Data.Show"];
  var Show = function (show) {
      this.show = show;
  };
  var showString = new Show($foreign.showStringImpl);
  var showNumber = new Show($foreign.showNumberImpl);
  var showInt = new Show($foreign.showIntImpl);
  var showChar = new Show($foreign.showCharImpl);
  var showBoolean = new Show(function (v) {
      if (v) {
          return "true";
      };
      if (!v) {
          return "false";
      };
      throw new Error("Failed pattern match at Data.Show (line 20, column 1 - line 22, column 23): " + [ v.constructor.name ]);
  });
  var show = function (dict) {
      return dict.show;
  };
  var showArray = function (dictShow) {
      return new Show($foreign.showArrayImpl(show(dictShow)));
  };
  exports["Show"] = Show;
  exports["show"] = show;
  exports["showBoolean"] = showBoolean;
  exports["showInt"] = showInt;
  exports["showNumber"] = showNumber;
  exports["showChar"] = showChar;
  exports["showString"] = showString;
  exports["showArray"] = showArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.List.Types"] = $PS["Data.List.Types"] || {};
  var exports = $PS["Data.List.Types"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Show = $PS["Data.Show"];                              
  var Nil = (function () {
      function Nil() {

      };
      Nil.value = new Nil();
      return Nil;
  })();
  var Cons = (function () {
      function Cons(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Cons.create = function (value0) {
          return function (value1) {
              return new Cons(value0, value1);
          };
      };
      return Cons;
  })();
  var listMap = function (f) {
      var chunkedRevMap = function ($copy_chunksAcc) {
          return function ($copy_v) {
              var $tco_var_chunksAcc = $copy_chunksAcc;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(chunksAcc, v) {
                  if (v instanceof Cons && (v.value1 instanceof Cons && v.value1.value1 instanceof Cons)) {
                      $tco_var_chunksAcc = new Cons(v, chunksAcc);
                      $copy_v = v.value1.value1.value1;
                      return;
                  };
                  var unrolledMap = function (v1) {
                      if (v1 instanceof Cons && (v1.value1 instanceof Cons && v1.value1.value1 instanceof Nil)) {
                          return new Cons(f(v1.value0), new Cons(f(v1.value1.value0), Nil.value));
                      };
                      if (v1 instanceof Cons && v1.value1 instanceof Nil) {
                          return new Cons(f(v1.value0), Nil.value);
                      };
                      return Nil.value;
                  };
                  var reverseUnrolledMap = function ($copy_v1) {
                      return function ($copy_acc) {
                          var $tco_var_v1 = $copy_v1;
                          var $tco_done = false;
                          var $tco_result;
                          function $tco_loop(v1, acc) {
                              if (v1 instanceof Cons && (v1.value0 instanceof Cons && (v1.value0.value1 instanceof Cons && v1.value0.value1.value1 instanceof Cons))) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_acc = new Cons(f(v1.value0.value0), new Cons(f(v1.value0.value1.value0), new Cons(f(v1.value0.value1.value1.value0), acc)));
                                  return;
                              };
                              $tco_done = true;
                              return acc;
                          };
                          while (!$tco_done) {
                              $tco_result = $tco_loop($tco_var_v1, $copy_acc);
                          };
                          return $tco_result;
                      };
                  };
                  $tco_done = true;
                  return reverseUnrolledMap(chunksAcc)(unrolledMap(v));
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_chunksAcc, $copy_v);
              };
              return $tco_result;
          };
      };
      return chunkedRevMap(Nil.value);
  };
  var functorList = new Data_Functor.Functor(listMap);                 
  var foldableList = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
          return Data_Foldable.foldl(foldableList)(function (acc) {
              var $202 = Data_Semigroup.append(dictMonoid.Semigroup0())(acc);
              return function ($203) {
                  return $202(f($203));
              };
          })(Data_Monoid.mempty(dictMonoid));
      };
  }, function (f) {
      var go = function ($copy_b) {
          return function ($copy_v) {
              var $tco_var_b = $copy_b;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(b, v) {
                  if (v instanceof Nil) {
                      $tco_done = true;
                      return b;
                  };
                  if (v instanceof Cons) {
                      $tco_var_b = f(b)(v.value0);
                      $copy_v = v.value1;
                      return;
                  };
                  throw new Error("Failed pattern match at Data.List.Types (line 109, column 12 - line 111, column 30): " + [ v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_b, $copy_v);
              };
              return $tco_result;
          };
      };
      return go;
  }, function (f) {
      return function (b) {
          var rev = Data_Foldable.foldl(foldableList)(Data_Function.flip(Cons.create))(Nil.value);
          var $204 = Data_Foldable.foldl(foldableList)(Data_Function.flip(f))(b);
          return function ($205) {
              return $204(rev($205));
          };
      };
  });
  var showList = function (dictShow) {
      return new Data_Show.Show(function (v) {
          if (v instanceof Nil) {
              return "Nil";
          };
          return "(" + (Data_Foldable.intercalate(foldableList)(Data_Monoid.monoidString)(" : ")(Data_Functor.map(functorList)(Data_Show.show(dictShow))(v)) + " : Nil)");
      });
  };
  exports["Nil"] = Nil;
  exports["Cons"] = Cons;
  exports["showList"] = showList;
  exports["foldableList"] = foldableList;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Tuple"] = $PS["Data.Tuple"] || {};
  var exports = $PS["Data.Tuple"];
  var Data_Show = $PS["Data.Show"];                        
  var Tuple = (function () {
      function Tuple(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Tuple.create = function (value0) {
          return function (value1) {
              return new Tuple(value0, value1);
          };
      };
      return Tuple;
  })();
  var snd = function (v) {
      return v.value1;
  };
  var showTuple = function (dictShow) {
      return function (dictShow1) {
          return new Data_Show.Show(function (v) {
              return "(Tuple " + (Data_Show.show(dictShow)(v.value0) + (" " + (Data_Show.show(dictShow1)(v.value1) + ")")));
          });
      };
  };                                                                                                    
  var fst = function (v) {
      return v.value0;
  };
  exports["Tuple"] = Tuple;
  exports["fst"] = fst;
  exports["snd"] = snd;
  exports["showTuple"] = showTuple;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["BotScript"] = $PS["BotScript"] || {};
  var exports = $PS["BotScript"];
  var $foreign = $PS["BotScript"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Show = $PS["Data.Show"];
  var Data_Tuple = $PS["Data.Tuple"];                
  var Arr = (function () {
      function Arr(value0) {
          this.value0 = value0;
      };
      Arr.create = function (value0) {
          return new Arr(value0);
      };
      return Arr;
  })();
  var Bin = (function () {
      function Bin(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      Bin.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new Bin(value0, value1, value2);
              };
          };
      };
      return Bin;
  })();
  var Una = (function () {
      function Una(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Una.create = function (value0) {
          return function (value1) {
              return new Una(value0, value1);
          };
      };
      return Una;
  })();
  var Str = (function () {
      function Str(value0) {
          this.value0 = value0;
      };
      Str.create = function (value0) {
          return new Str(value0);
      };
      return Str;
  })();
  var Num = (function () {
      function Num(value0) {
          this.value0 = value0;
      };
      Num.create = function (value0) {
          return new Num(value0);
      };
      return Num;
  })();
  var Tfv = (function () {
      function Tfv(value0) {
          this.value0 = value0;
      };
      Tfv.create = function (value0) {
          return new Tfv(value0);
      };
      return Tfv;
  })();
  var Ref = (function () {
      function Ref(value0) {
          this.value0 = value0;
      };
      Ref.create = function (value0) {
          return new Ref(value0);
      };
      return Ref;
  })();
  var Obj = (function () {
      function Obj(value0) {
          this.value0 = value0;
      };
      Obj.create = function (value0) {
          return new Obj(value0);
      };
      return Obj;
  })();
  var Null = (function () {
      function Null() {

      };
      Null.value = new Null();
      return Null;
  })();
  var Var = (function () {
      function Var(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Var.create = function (value0) {
          return function (value1) {
              return new Var(value0, value1);
          };
      };
      return Var;
  })();
  var Invok = (function () {
      function Invok(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Invok.create = function (value0) {
          return function (value1) {
              return new Invok(value0, value1);
          };
      };
      return Invok;
  })();
  var Delay = (function () {
      function Delay(value0) {
          this.value0 = value0;
      };
      Delay.create = function (value0) {
          return new Delay(value0);
      };
      return Delay;
  })();
  var Going = (function () {
      function Going(value0) {
          this.value0 = value0;
      };
      Going.create = function (value0) {
          return new Going(value0);
      };
      return Going;
  })();
  var Renew = (function () {
      function Renew(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Renew.create = function (value0) {
          return function (value1) {
              return new Renew(value0, value1);
          };
      };
      return Renew;
  })();
  var Timer = (function () {
      function Timer(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Timer.create = function (value0) {
          return function (value1) {
              return new Timer(value0, value1);
          };
      };
      return Timer;
  })();
  var Group = (function () {
      function Group(value0) {
          this.value0 = value0;
      };
      Group.create = function (value0) {
          return new Group(value0);
      };
      return Group;
  })();
  var While = (function () {
      function While(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      While.create = function (value0) {
          return function (value1) {
              return new While(value0, value1);
          };
      };
      return While;
  })();
  var Visit = (function () {
      function Visit(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      Visit.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new Visit(value0, value1, value2);
              };
          };
      };
      return Visit;
  })();
  var Match = (function () {
      function Match(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      Match.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new Match(value0, value1, value2);
              };
          };
      };
      return Match;
  })();
  var Event = (function () {
      function Event(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      Event.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new Event(value0, value1, value2);
              };
          };
      };
      return Event;
  })();
  var BotState = (function () {
      function BotState(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      BotState.create = function (value0) {
          return function (value1) {
              return new BotState(value0, value1);
          };
      };
      return BotState;
  })();
  var BotScript = (function () {
      function BotScript(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      BotScript.create = function (value0) {
          return function (value1) {
              return new BotScript(value0, value1);
          };
      };
      return BotScript;
  })();
  var showVar = new Data_Show.Show(function (v) {
      return "(Var " + (Data_Show.show(Data_Show.showString)(v.value0) + (" " + (Data_Show.show(Data_Show.showArray(showExpr))(v.value1) + ")")));
  });
  var showExpr = new Data_Show.Show(function (v) {
      if (v instanceof Bin) {
          return "(Bin " + (Data_Show.show(Data_Show.showString)(v.value0) + (" " + (Data_Show.show(showExpr)(v.value1) + (" " + (Data_Show.show(showExpr)(v.value2) + ")")))));
      };
      if (v instanceof Una) {
          return "(Una " + (Data_Show.show(Data_Show.showString)(v.value0) + (" " + (Data_Show.show(showExpr)(v.value1) + ")")));
      };
      if (v instanceof Tfv) {
          return Data_Show.show(Data_Show.showBoolean)(v.value0);
      };
      if (v instanceof Num) {
          return Data_Show.show(Data_Show.showNumber)(v.value0);
      };
      if (v instanceof Str) {
          return Data_Show.show(Data_Show.showString)(v.value0);
      };
      if (v instanceof Ref) {
          return "(Ref " + (Data_Show.show(showVar)(v.value0) + ")");
      };
      if (v instanceof Arr) {
          return Data_Show.show(Data_Show.showArray(showExpr))(v.value0);
      };
      if (v instanceof Obj) {
          return v.value0.toString;
      };
      if (v instanceof Null) {
          return "Null";
      };
      throw new Error("Failed pattern match at BotScript (line 29, column 1 - line 45, column 21): " + [ v.constructor.name ]);
  });
  var showAction = new Data_Show.Show(function (v) {
      if (v instanceof Invok) {
          return "(Invok " + (Data_Show.show(Data_Show.showString)(v.value0) + (" " + (Data_Show.show(Data_Show.showArray(showExpr))(v.value1) + ")")));
      };
      if (v instanceof Delay) {
          return "(Delay " + (Data_Show.show(showExpr)(v.value0) + ")");
      };
      if (v instanceof Going) {
          return "(Going " + (Data_Show.show(Data_Show.showString)(v.value0) + ")");
      };
      if (v instanceof Renew) {
          return "(Renew " + (Data_Show.show(showVar)(v.value0) + (" " + (Data_Show.show(showExpr)(v.value1) + ")")));
      };
      if (v instanceof Timer) {
          return "(Timer " + (Data_Show.show(Data_Show.showString)(v.value0) + (" " + (Data_Show.show(showAction)(v.value1) + ")")));
      };
      if (v instanceof Group) {
          return "(Group " + (Data_Show.show(Data_List_Types.showList(showAction))(v.value0) + ")");
      };
      if (v instanceof While) {
          return "(While " + (Data_Show.show(showExpr)(v.value0) + (" " + (Data_Show.show(showAction)(v.value1) + ")")));
      };
      if (v instanceof Visit) {
          return "(Visit " + (Data_Show.show(showVar)(v.value0) + (" " + (Data_Show.show(showExpr)(v.value1) + (" " + (Data_Show.show(showAction)(v.value2) + ")")))));
      };
      if (v instanceof Match) {
          return "(Match " + (Data_Show.show(showExpr)(v.value0) + (" " + (Data_Show.show(showAction)(v.value1) + (" " + (Data_Show.show(showAction)(v.value2) + ")")))));
      };
      if (v instanceof Event) {
          return "(Event " + (Data_Show.show(Data_Show.showString)(v.value0) + (" " + (Data_Show.show(Data_Show.showArray(Data_Tuple.showTuple(Data_Show.showString)(Data_Show.showString)))(v.value1) + (" " + (Data_Show.show(showAction)(v.value2) + ")")))));
      };
      throw new Error("Failed pattern match at BotScript (line 92, column 1 - line 123, column 29): " + [ v.constructor.name ]);
  });
  var showBotState = new Data_Show.Show(function (v) {
      return "(BotState " + (v.value0 + (" " + (Data_Show.show(showAction)(v.value1) + ")")));
  });
  var showBotScript = new Data_Show.Show(function (v) {
      return "(BotScript " + (Data_Show.show(Data_List_Types.showList(showAction))(v.value0) + (" " + (Data_Show.show(Data_Show.showArray(showBotState))(v.value1) + ")")));
  });
  var consTab = {
      array: Arr.create,
      string: Str.create,
      number: Num.create,
      "boolean": Tfv.create,
      object: Obj.create,
      "undefined": Null.value
  };
  var toExpr = $foreign.toExprFFI(consTab);
  exports["Var"] = Var;
  exports["Arr"] = Arr;
  exports["Bin"] = Bin;
  exports["Una"] = Una;
  exports["Str"] = Str;
  exports["Num"] = Num;
  exports["Tfv"] = Tfv;
  exports["Ref"] = Ref;
  exports["Null"] = Null;
  exports["toExpr"] = toExpr;
  exports["Invok"] = Invok;
  exports["Delay"] = Delay;
  exports["Going"] = Going;
  exports["Renew"] = Renew;
  exports["Group"] = Group;
  exports["While"] = While;
  exports["Visit"] = Visit;
  exports["Match"] = Match;
  exports["Event"] = Event;
  exports["BotState"] = BotState;
  exports["BotScript"] = BotScript;
  exports["showAction"] = showAction;
  exports["showBotScript"] = showBotScript;
})(PS);
(function(exports) {
  exports.updateTab = tab => sym => val => {
    tab[sym] = val;
    return true;
  }

  exports.updateTabRef = tab => sym => idxs => val => () => {
    idxs = idxs.map((x)=>x['value0']);
    if(idxs.length == 1)
      tab[sym][idxs[0]] = val;
    else{
      var ref = tab[sym];
      for(var i = 0; i < idxs.length - 1; i++)
        ref = ref[idxs[i]];
      ref[idxs[idxs.length - 1]] = val;
    }
    return true;
  }
})(PS["BotScriptEnv"] = PS["BotScriptEnv"] || {});
(function(exports) {
  "use strict";      

  exports.runST = function (f) {
    return f();
  };

  exports._lookup = function (no, yes, k, m) {
    return k in m ? yes(m[k]) : no;
  };

  function toArrayWithKey(f) {
    return function (m) {
      var r = [];
      for (var k in m) {
        if (hasOwnProperty.call(m, k)) {
          r.push(f(k)(m[k]));
        }
      }
      return r;
    };
  }
})(PS["Foreign.Object"] = PS["Foreign.Object"] || {});
(function(exports) {
  "use strict";

  exports.map_ = function (f) {
    return function (a) {
      return function () {
        return f(a());
      };
    };
  };

  exports.foreach = function (as) {
    return function (f) {
      return function () {
        for (var i = 0, l = as.length; i < l; i++) {
          f(as[i])();
        }
      };
    };
  };

  exports.new = function (val) {
    return function () {
      return { value: val };
    };
  };

  exports.read = function (ref) {
    return function () {
      return ref.value;
    };
  };

  exports["modify'"] = function (f) {
    return function (ref) {
      return function () {
        var t = f(ref.value);
        ref.value = t.state;
        return t.value;
      };
    };
  };

  exports.write = function (a) {
    return function (ref) {
      return function () {
        return ref.value = a; // eslint-disable-line no-return-assign
      };
    };
  };
})(PS["Control.Monad.ST.Internal"] = PS["Control.Monad.ST.Internal"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Control.Monad.ST.Internal"] = $PS["Control.Monad.ST.Internal"] || {};
  var exports = $PS["Control.Monad.ST.Internal"];
  var $foreign = $PS["Control.Monad.ST.Internal"];
  var Data_Functor = $PS["Data.Functor"];          
  var modify = function (f) {
      return $foreign["modify'"](function (s) {
          var s$prime = f(s);
          return {
              state: s$prime,
              value: s$prime
          };
      });
  };
  var functorST = new Data_Functor.Functor($foreign.map_);
  exports["modify"] = modify;
  exports["functorST"] = functorST;
  exports["foreach"] = $foreign.foreach;
  exports["new"] = $foreign["new"];
  exports["read"] = $foreign.read;
  exports["write"] = $foreign.write;
})(PS);
(function(exports) {
  "use strict";                                                                                      

  exports.fromFoldableImpl = (function () {
    function Cons(head, tail) {
      this.head = head;
      this.tail = tail;
    }
    var emptyList = {};

    function curryCons(head) {
      return function (tail) {
        return new Cons(head, tail);
      };
    }

    function listToArray(list) {
      var result = [];
      var count = 0;
      var xs = list;
      while (xs !== emptyList) {
        result[count++] = xs.head;
        xs = xs.tail;
      }
      return result;
    }

    return function (foldr) {
      return function (xs) {
        return listToArray(foldr(curryCons)(emptyList)(xs));
      };
    };
  })();

  //------------------------------------------------------------------------------
  // Array size ------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.length = function (xs) {
    return xs.length;
  };

  //------------------------------------------------------------------------------
  // Extending arrays ------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.cons = function (e) {
    return function (l) {
      return [e].concat(l);
    };
  };

  //------------------------------------------------------------------------------
  // Non-indexed reads -----------------------------------------------------------
  //------------------------------------------------------------------------------

  exports["uncons'"] = function (empty) {
    return function (next) {
      return function (xs) {
        return xs.length === 0 ? empty({}) : next(xs[0])(xs.slice(1));
      };
    };
  };

  //------------------------------------------------------------------------------
  // Indexed operations ----------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.indexImpl = function (just) {
    return function (nothing) {
      return function (xs) {
        return function (i) {
          return i < 0 || i >= xs.length ? nothing :  just(xs[i]);
        };
      };
    };
  };

  exports.findIndexImpl = function (just) {
    return function (nothing) {
      return function (f) {
        return function (xs) {
          for (var i = 0, l = xs.length; i < l; i++) {
            if (f(xs[i])) return just(i);
          }
          return nothing;
        };
      };
    };
  };

  exports.concat = function (xss) {
    if (xss.length <= 10000) {
      // This method is faster, but it crashes on big arrays.
      // So we use it when can and fallback to simple variant otherwise.
      return Array.prototype.concat.apply([], xss);
    }

    var result = [];
    for (var i = 0, l = xss.length; i < l; i++) {
      var xs = xss[i];
      for (var j = 0, m = xs.length; j < m; j++) {
        result.push(xs[j]);
      }
    }
    return result;
  };

  //------------------------------------------------------------------------------
  // Sorting ---------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.sortImpl = function (f) {
    return function (l) {
      return l.slice().sort(function (x, y) {
        return f(x)(y);
      });
    };
  };

  //------------------------------------------------------------------------------
  // Zipping ---------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.zipWith = function (f) {
    return function (xs) {
      return function (ys) {
        var l = xs.length < ys.length ? xs.length : ys.length;
        var result = new Array(l);
        for (var i = 0; i < l; i++) {
          result[i] = f(xs[i])(ys[i]);
        }
        return result;
      };
    };
  };
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Control.Alt"] = $PS["Control.Alt"] || {};
  var exports = $PS["Control.Alt"];                          
  var Alt = function (Functor0, alt) {
      this.Functor0 = Functor0;
      this.alt = alt;
  };                                                       
  var alt = function (dict) {
      return dict.alt;
  };
  exports["Alt"] = Alt;
  exports["alt"] = alt;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Control.Lazy"] = $PS["Control.Lazy"] || {};
  var exports = $PS["Control.Lazy"];               
  var Lazy = function (defer) {
      this.defer = defer;
  }; 
  var defer = function (dict) {
      return dict.defer;
  };
  var fix = function (dictLazy) {
      return function (f) {
          var go = defer(dictLazy)(function (v) {
              return f(go);
          });
          return go;
      };
  };
  exports["defer"] = defer;
  exports["Lazy"] = Lazy;
  exports["fix"] = fix;
})(PS);
(function(exports) {
  "use strict";

  exports.empty = function () {
    return [];
  };

  exports.pushAll = function (as) {
    return function (xs) {
      return function () {
        return xs.push.apply(xs, as);
      };
    };
  };

  exports.unsafeFreeze = function (xs) {
    return function () {
      return xs;
    };
  };

  function copyImpl(xs) {
    return function () {
      return xs.slice();
    };
  }
})(PS["Data.Array.ST"] = PS["Data.Array.ST"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Array.ST"] = $PS["Data.Array.ST"] || {};
  var exports = $PS["Data.Array.ST"];
  var $foreign = $PS["Data.Array.ST"];
  var push = function (a) {
      return $foreign.pushAll([ a ]);
  };
  exports["push"] = push;
  exports["empty"] = $foreign.empty;
  exports["unsafeFreeze"] = $foreign.unsafeFreeze;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Array.ST.Iterator"] = $PS["Data.Array.ST.Iterator"] || {};
  var exports = $PS["Data.Array.ST.Iterator"];
  var Control_Monad_ST_Internal = $PS["Control.Monad.ST.Internal"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_Maybe = $PS["Data.Maybe"];                
  var Iterator = (function () {
      function Iterator(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Iterator.create = function (value0) {
          return function (value1) {
              return new Iterator(value0, value1);
          };
      };
      return Iterator;
  })();
  var next = function (v) {
      return function __do() {
          var i = Control_Monad_ST_Internal.read(v.value1)();
          Control_Monad_ST_Internal.modify(function (v1) {
              return v1 + 1 | 0;
          })(v.value1)();
          return v.value0(i);
      };
  };                                                    
  var iterator = function (f) {
      return Data_Functor.map(Control_Monad_ST_Internal.functorST)(Iterator.create(f))(Control_Monad_ST_Internal["new"](0));
  };
  var iterate = function (iter) {
      return function (f) {
          return function __do() {
              var $$break = Control_Monad_ST_Internal["new"](false)();
              while (Data_Functor.map(Control_Monad_ST_Internal.functorST)(Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraBoolean))(Control_Monad_ST_Internal.read($$break))()) {
                  (function __do() {
                      var mx = next(iter)();
                      if (mx instanceof Data_Maybe.Just) {
                          return f(mx.value0)();
                      };
                      if (mx instanceof Data_Maybe.Nothing) {
                          return Data_Functor["void"](Control_Monad_ST_Internal.functorST)(Control_Monad_ST_Internal.write(true)($$break))();
                      };
                      throw new Error("Failed pattern match at Data.Array.ST.Iterator (line 42, column 5 - line 44, column 47): " + [ mx.constructor.name ]);
                  })();
              };
              return {};
          };
      };
  };
  exports["iterator"] = iterator;
  exports["iterate"] = iterate;
})(PS);
(function(exports) {
  "use strict";

  var unsafeCompareImpl = function (lt) {
    return function (eq) {
      return function (gt) {
        return function (x) {
          return function (y) {
            return x < y ? lt : x === y ? eq : gt;
          };
        };
      };
    };
  };                                         
  exports.ordIntImpl = unsafeCompareImpl;   
  exports.ordStringImpl = unsafeCompareImpl;
  exports.ordCharImpl = unsafeCompareImpl;
})(PS["Data.Ord"] = PS["Data.Ord"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Ordering"] = $PS["Data.Ordering"] || {};
  var exports = $PS["Data.Ordering"];              
  var LT = (function () {
      function LT() {

      };
      LT.value = new LT();
      return LT;
  })();
  var GT = (function () {
      function GT() {

      };
      GT.value = new GT();
      return GT;
  })();
  var EQ = (function () {
      function EQ() {

      };
      EQ.value = new EQ();
      return EQ;
  })();
  exports["LT"] = LT;
  exports["GT"] = GT;
  exports["EQ"] = EQ;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Ord"] = $PS["Data.Ord"] || {};
  var exports = $PS["Data.Ord"];
  var $foreign = $PS["Data.Ord"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Ord = function (Eq0, compare) {
      this.Eq0 = Eq0;
      this.compare = compare;
  }; 
  var ordString = new Ord(function () {
      return Data_Eq.eqString;
  }, $foreign.ordStringImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value));
  var ordInt = new Ord(function () {
      return Data_Eq.eqInt;
  }, $foreign.ordIntImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value));
  var ordChar = new Ord(function () {
      return Data_Eq.eqChar;
  }, $foreign.ordCharImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value));
  var compare = function (dict) {
      return dict.compare;
  };
  exports["compare"] = compare;
  exports["ordInt"] = ordInt;
  exports["ordString"] = ordString;
  exports["ordChar"] = ordChar;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Array"] = $PS["Data.Array"] || {};
  var exports = $PS["Data.Array"];
  var $foreign = $PS["Data.Array"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Lazy = $PS["Control.Lazy"];
  var Control_Monad_ST_Internal = $PS["Control.Monad.ST.Internal"];
  var Data_Array_ST = $PS["Data.Array.ST"];
  var Data_Array_ST_Iterator = $PS["Data.Array.ST.Iterator"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Data_Tuple = $PS["Data.Tuple"];
  var zip = $foreign.zipWith(Data_Tuple.Tuple.create);
  var uncons = $foreign["uncons'"](Data_Function["const"](Data_Maybe.Nothing.value))(function (x) {
      return function (xs) {
          return new Data_Maybe.Just({
              head: x,
              tail: xs
          });
      };
  });
  var sortBy = function (comp) {
      return function (xs) {
          var comp$prime = function (x) {
              return function (y) {
                  var v = comp(x)(y);
                  if (v instanceof Data_Ordering.GT) {
                      return 1;
                  };
                  if (v instanceof Data_Ordering.EQ) {
                      return 0;
                  };
                  if (v instanceof Data_Ordering.LT) {
                      return -1 | 0;
                  };
                  throw new Error("Failed pattern match at Data.Array (line 702, column 15 - line 705, column 13): " + [ v.constructor.name ]);
              };
          };
          return $foreign.sortImpl(comp$prime)(xs);
      };
  };
  var sort = function (dictOrd) {
      return function (xs) {
          return sortBy(Data_Ord.compare(dictOrd))(xs);
      };
  };
  var some = function (dictAlternative) {
      return function (dictLazy) {
          return function (v) {
              return Control_Apply.apply((dictAlternative.Applicative0()).Apply0())(Data_Functor.map(((dictAlternative.Plus1()).Alt0()).Functor0())($foreign.cons)(v))(Control_Lazy.defer(dictLazy)(function (v1) {
                  return many(dictAlternative)(dictLazy)(v);
              }));
          };
      };
  };
  var many = function (dictAlternative) {
      return function (dictLazy) {
          return function (v) {
              return Control_Alt.alt((dictAlternative.Plus1()).Alt0())(some(dictAlternative)(dictLazy)(v))(Control_Applicative.pure(dictAlternative.Applicative0())([  ]));
          };
      };
  };
  var index = $foreign.indexImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var unzip = function (xs) {
      return (function __do() {
          var fsts = Data_Array_ST.empty();
          var snds = Data_Array_ST.empty();
          var iter = Data_Array_ST_Iterator.iterator(function (v) {
              return index(xs)(v);
          })();
          Data_Array_ST_Iterator.iterate(iter)(function (v) {
              return function __do() {
                  Data_Functor["void"](Control_Monad_ST_Internal.functorST)(Data_Array_ST.push(v.value0)(fsts))();
                  return Data_Functor["void"](Control_Monad_ST_Internal.functorST)(Data_Array_ST.push(v.value1)(snds))();
              };
          })();
          var fsts$prime = Data_Array_ST.unsafeFreeze(fsts)();
          var snds$prime = Data_Array_ST.unsafeFreeze(snds)();
          return new Data_Tuple.Tuple(fsts$prime, snds$prime);
      })();
  };
  var fromFoldable = function (dictFoldable) {
      return $foreign.fromFoldableImpl(Data_Foldable.foldr(dictFoldable));
  };
  var findIndex = $foreign.findIndexImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var elemIndex = function (dictEq) {
      return function (x) {
          return findIndex(function (v) {
              return Data_Eq.eq(dictEq)(v)(x);
          });
      };
  };
  exports["fromFoldable"] = fromFoldable;
  exports["some"] = some;
  exports["many"] = many;
  exports["uncons"] = uncons;
  exports["elemIndex"] = elemIndex;
  exports["sort"] = sort;
  exports["zip"] = zip;
  exports["unzip"] = unzip;
  exports["length"] = $foreign.length;
  exports["cons"] = $foreign.cons;
  exports["concat"] = $foreign.concat;
})(PS);
(function(exports) {
  "use strict";

  exports.runFn4 = function (fn) {
    return function (a) {
      return function (b) {
        return function (c) {
          return function (d) {
            return fn(a, b, c, d);
          };
        };
      };
    };
  };
})(PS["Data.Function.Uncurried"] = PS["Data.Function.Uncurried"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Function.Uncurried"] = $PS["Data.Function.Uncurried"] || {};
  var exports = $PS["Data.Function.Uncurried"];
  var $foreign = $PS["Data.Function.Uncurried"];
  exports["runFn4"] = $foreign.runFn4;
})(PS);
(function(exports) {
  "use strict";

  exports["new"] = function () {
    return {};
  };

  exports.poke = function (k) {
    return function (v) {
      return function (m) {
        return function () {
          m[k] = v;
          return m;
        };
      };
    };
  };
})(PS["Foreign.Object.ST"] = PS["Foreign.Object.ST"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Foreign.Object.ST"] = $PS["Foreign.Object.ST"] || {};
  var exports = $PS["Foreign.Object.ST"];
  var $foreign = $PS["Foreign.Object.ST"];
  exports["new"] = $foreign["new"];
  exports["poke"] = $foreign.poke;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Foreign.Object"] = $PS["Foreign.Object"] || {};
  var exports = $PS["Foreign.Object"];
  var $foreign = $PS["Foreign.Object"];
  var Control_Monad_ST_Internal = $PS["Control.Monad.ST.Internal"];
  var Data_Array = $PS["Data.Array"];
  var Data_Function_Uncurried = $PS["Data.Function.Uncurried"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Foreign_Object_ST = $PS["Foreign.Object.ST"];
  var lookup = Data_Function_Uncurried.runFn4($foreign["_lookup"])(Data_Maybe.Nothing.value)(Data_Maybe.Just.create);
  var fromFoldable = function (dictFoldable) {
      return function (l) {
          return $foreign.runST(function __do() {
              var s = Foreign_Object_ST["new"]();
              Control_Monad_ST_Internal.foreach(Data_Array.fromFoldable(dictFoldable)(l))(function (v) {
                  return Data_Functor["void"](Control_Monad_ST_Internal.functorST)(Foreign_Object_ST.poke(v.value0)(v.value1)(s));
              })();
              return s;
          });
      };
  };
  exports["lookup"] = lookup;
  exports["fromFoldable"] = fromFoldable;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["BotScriptEnv"] = $PS["BotScriptEnv"] || {};
  var exports = $PS["BotScriptEnv"];
  var $foreign = $PS["BotScriptEnv"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Foreign_Object = $PS["Foreign.Object"];                
  var Env = (function () {
      function Env(value0) {
          this.value0 = value0;
      };
      Env.create = function (value0) {
          return new Env(value0);
      };
      return Env;
  })();
  var Top = (function () {
      function Top() {

      };
      Top.value = new Top();
      return Top;
  })();
  var topEnv = function ($copy_v) {
      var $tco_done = false;
      var $tco_result;
      function $tco_loop(v) {
          if (v instanceof Top) {
              $tco_done = true;
              return Top.value;
          };
          if (v instanceof Env) {
              if (v.value0.root instanceof Top) {
                  $tco_done = true;
                  return v;
              };
              $copy_v = v.value0.root;
              return;
          };
          throw new Error("Failed pattern match at BotScriptEnv (line 26, column 1 - line 26, column 17): " + [ v.constructor.name ]);
      };
      while (!$tco_done) {
          $tco_result = $tco_loop($copy_v);
      };
      return $tco_result;
  }; 
  var pushEnv = function (v) {
      if (v instanceof Top) {
          return new Env({
              lv: 0,
              tab: Foreign_Object.fromFoldable(Data_Foldable.foldableArray)([  ]),
              root: Top.value
          });
      };
      if (v instanceof Env) {
          return new Env({
              lv: v.value0.lv + 1 | 0,
              tab: Foreign_Object.fromFoldable(Data_Foldable.foldableArray)([  ]),
              root: v
          });
      };
      throw new Error("Failed pattern match at BotScriptEnv (line 22, column 1 - line 22, column 62): " + [ v.constructor.name ]);
  };
  var popEnv = function (v) {
      if (v instanceof Top) {
          return Top.value;
      };
      if (v instanceof Env) {
          return v.value0.root;
      };
      throw new Error("Failed pattern match at BotScriptEnv (line 32, column 1 - line 32, column 17): " + [ v.constructor.name ]);
  };
  var insert = function (v) {
      return function (key) {
          return function (val) {
              if (v instanceof Top) {
                  return Top.value;
              };
              if (v instanceof Env) {
                  var a = $foreign.updateTab(v.value0.tab)(key)(val);
                  return v;
              };
              throw new Error("Failed pattern match at BotScriptEnv (line 58, column 1 - line 58, column 39): " + [ v.constructor.name, key.constructor.name, val.constructor.name ]);
          };
      };
  };
  var assocVar = function ($copy_name) {
      return function ($copy_v) {
          var $tco_var_name = $copy_name;
          var $tco_done = false;
          var $tco_result;
          function $tco_loop(name, v) {
              if (v instanceof Top) {
                  $tco_done = true;
                  return Data_Maybe.Nothing.value;
              };
              if (v instanceof Env) {
                  var v1 = Foreign_Object.lookup(name)(v.value0.tab);
                  if (v1 instanceof Data_Maybe.Just) {
                      $tco_done = true;
                      return new Data_Maybe.Just(v1.value0);
                  };
                  if (v1 instanceof Data_Maybe.Nothing) {
                      $tco_var_name = name;
                      $copy_v = v.value0.root;
                      return;
                  };
                  throw new Error("Failed pattern match at BotScriptEnv (line 43, column 5 - line 45, column 38): " + [ v1.constructor.name ]);
              };
              throw new Error("Failed pattern match at BotScriptEnv (line 41, column 1 - line 41, column 28): " + [ name.constructor.name, v.constructor.name ]);
          };
          while (!$tco_done) {
              $tco_result = $tco_loop($tco_var_name, $copy_v);
          };
          return $tco_result;
      };
  };
  var assocEnv = function ($copy_key) {
      return function ($copy_v) {
          var $tco_var_key = $copy_key;
          var $tco_done = false;
          var $tco_result;
          function $tco_loop(key, v) {
              if (v instanceof Top) {
                  $tco_done = true;
                  return Data_Maybe.Nothing.value;
              };
              if (v instanceof Env) {
                  var v1 = Foreign_Object.lookup(key)(v.value0.tab);
                  if (v1 instanceof Data_Maybe.Just) {
                      $tco_done = true;
                      return new Data_Maybe.Just(v.value0.tab);
                  };
                  if (v1 instanceof Data_Maybe.Nothing) {
                      $tco_var_key = key;
                      $copy_v = v.value0.root;
                      return;
                  };
                  throw new Error("Failed pattern match at BotScriptEnv (line 37, column 5 - line 39, column 37): " + [ v1.constructor.name ]);
              };
              throw new Error("Failed pattern match at BotScriptEnv (line 35, column 1 - line 35, column 27): " + [ key.constructor.name, v.constructor.name ]);
          };
          while (!$tco_done) {
              $tco_result = $tco_loop($tco_var_key, $copy_v);
          };
          return $tco_result;
      };
  };
  exports["Top"] = Top;
  exports["pushEnv"] = pushEnv;
  exports["topEnv"] = topEnv;
  exports["popEnv"] = popEnv;
  exports["assocEnv"] = assocEnv;
  exports["assocVar"] = assocVar;
  exports["insert"] = insert;
  exports["updateTabRef"] = $foreign.updateTabRef;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Control.Monad"] = $PS["Control.Monad"] || {};
  var exports = $PS["Control.Monad"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];                
  var Monad = function (Applicative0, Bind1) {
      this.Applicative0 = Applicative0;
      this.Bind1 = Bind1;
  };
  var ap = function (dictMonad) {
      return function (f) {
          return function (a) {
              return Control_Bind.bind(dictMonad.Bind1())(f)(function (f$prime) {
                  return Control_Bind.bind(dictMonad.Bind1())(a)(function (a$prime) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(f$prime(a$prime));
                  });
              });
          };
      };
  };
  exports["Monad"] = Monad;
  exports["ap"] = ap;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Identity"] = $PS["Data.Identity"] || {};
  var exports = $PS["Data.Identity"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Newtype = $PS["Data.Newtype"];          
  var Identity = function (x) {
      return x;
  };
  var newtypeIdentity = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Identity);
  var functorIdentity = new Data_Functor.Functor(function (f) {
      return function (m) {
          return f(m);
      };
  });
  var applyIdentity = new Control_Apply.Apply(function () {
      return functorIdentity;
  }, function (v) {
      return function (v1) {
          return v(v1);
      };
  });
  var bindIdentity = new Control_Bind.Bind(function () {
      return applyIdentity;
  }, function (v) {
      return function (f) {
          return f(v);
      };
  });
  var applicativeIdentity = new Control_Applicative.Applicative(function () {
      return applyIdentity;
  }, Identity);
  var monadIdentity = new Control_Monad.Monad(function () {
      return applicativeIdentity;
  }, function () {
      return bindIdentity;
  });
  exports["newtypeIdentity"] = newtypeIdentity;
  exports["functorIdentity"] = functorIdentity;
  exports["monadIdentity"] = monadIdentity;
})(PS);
(function(exports) {
  "use strict";

  exports.fromNumberImpl = function (just) {
    return function (nothing) {
      return function (n) {
        /* jshint bitwise: false */
        return (n | 0) === n ? just(n) : nothing;
      };
    };
  };

  exports.toNumber = function (n) {
    return n;
  };
})(PS["Data.Int"] = PS["Data.Int"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Boolean"] = $PS["Data.Boolean"] || {};
  var exports = $PS["Data.Boolean"];
  var otherwise = true;
  exports["otherwise"] = otherwise;
})(PS);
(function(exports) {
  "use strict";

  exports.topInt = 2147483647;
  exports.bottomInt = -2147483648;

  exports.topChar = String.fromCharCode(65535);
  exports.bottomChar = String.fromCharCode(0);
})(PS["Data.Bounded"] = PS["Data.Bounded"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Bounded"] = $PS["Data.Bounded"] || {};
  var exports = $PS["Data.Bounded"];
  var $foreign = $PS["Data.Bounded"];
  var Data_Ord = $PS["Data.Ord"];                  
  var Bounded = function (Ord0, bottom, top) {
      this.Ord0 = Ord0;
      this.bottom = bottom;
      this.top = top;
  };
  var top = function (dict) {
      return dict.top;
  };                                            
  var boundedInt = new Bounded(function () {
      return Data_Ord.ordInt;
  }, $foreign.bottomInt, $foreign.topInt);
  var boundedChar = new Bounded(function () {
      return Data_Ord.ordChar;
  }, $foreign.bottomChar, $foreign.topChar);
  var bottom = function (dict) {
      return dict.bottom;
  };
  exports["bottom"] = bottom;
  exports["top"] = top;
  exports["boundedInt"] = boundedInt;
  exports["boundedChar"] = boundedChar;
})(PS);
(function(exports) {
  /* globals exports */
  "use strict";         

  exports.infinity = Infinity;
})(PS["Global"] = PS["Global"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Global"] = $PS["Global"] || {};
  var exports = $PS["Global"];
  var $foreign = $PS["Global"];
  exports["infinity"] = $foreign.infinity;
})(PS);
(function(exports) {
  "use strict";          

  exports.floor = Math.floor;

  exports.pow = function (n) {
    return function (p) {
      return Math.pow(n, p);
    };
  };
})(PS["Math"] = PS["Math"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Math"] = $PS["Math"] || {};
  var exports = $PS["Math"];
  var $foreign = $PS["Math"];
  exports["floor"] = $foreign.floor;
  exports["pow"] = $foreign.pow;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Int"] = $PS["Data.Int"] || {};
  var exports = $PS["Data.Int"];
  var $foreign = $PS["Data.Int"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Bounded = $PS["Data.Bounded"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Global = $PS["Global"];
  var $$Math = $PS["Math"];         
  var fromNumber = $foreign.fromNumberImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var unsafeClamp = function (x) {
      if (x === Global.infinity) {
          return 0;
      };
      if (x === -Global.infinity) {
          return 0;
      };
      if (x >= $foreign.toNumber(Data_Bounded.top(Data_Bounded.boundedInt))) {
          return Data_Bounded.top(Data_Bounded.boundedInt);
      };
      if (x <= $foreign.toNumber(Data_Bounded.bottom(Data_Bounded.boundedInt))) {
          return Data_Bounded.bottom(Data_Bounded.boundedInt);
      };
      if (Data_Boolean.otherwise) {
          return Data_Maybe.fromMaybe(0)(fromNumber(x));
      };
      throw new Error("Failed pattern match at Data.Int (line 66, column 1 - line 66, column 29): " + [ x.constructor.name ]);
  };
  var floor = function ($24) {
      return unsafeClamp($$Math.floor($24));
  };
  exports["floor"] = floor;
  exports["toNumber"] = $foreign.toNumber;
})(PS);
(function(exports) {
  "use strict";

  exports.unfoldrArrayImpl = function (isNothing) {
    return function (fromJust) {
      return function (fst) {
        return function (snd) {
          return function (f) {
            return function (b) {
              var result = [];
              var value = b;
              while (true) { // eslint-disable-line no-constant-condition
                var maybe = f(value);
                if (isNothing(maybe)) return result;
                var tuple = fromJust(maybe);
                result.push(fst(tuple));
                value = snd(tuple);
              }
            };
          };
        };
      };
    };
  };
})(PS["Data.Unfoldable"] = PS["Data.Unfoldable"] || {});
(function(exports) {
  "use strict";

  exports.unfoldr1ArrayImpl = function (isNothing) {
    return function (fromJust) {
      return function (fst) {
        return function (snd) {
          return function (f) {
            return function (b) {
              var result = [];
              var value = b;
              while (true) { // eslint-disable-line no-constant-condition
                var tuple = f(value);
                result.push(fst(tuple));
                var maybe = snd(tuple);
                if (isNothing(maybe)) return result;
                value = fromJust(maybe);
              }
            };
          };
        };
      };
    };
  };
})(PS["Data.Unfoldable1"] = PS["Data.Unfoldable1"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Unfoldable1"] = $PS["Data.Unfoldable1"] || {};
  var exports = $PS["Data.Unfoldable1"];
  var $foreign = $PS["Data.Unfoldable1"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Tuple = $PS["Data.Tuple"];                
  var Unfoldable1 = function (unfoldr1) {
      this.unfoldr1 = unfoldr1;
  }; 
  var unfoldable1Array = new Unfoldable1($foreign.unfoldr1ArrayImpl(Data_Maybe.isNothing)(Data_Maybe.fromJust())(Data_Tuple.fst)(Data_Tuple.snd));
  exports["unfoldable1Array"] = unfoldable1Array;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Unfoldable"] = $PS["Data.Unfoldable"] || {};
  var exports = $PS["Data.Unfoldable"];
  var $foreign = $PS["Data.Unfoldable"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unfoldable1 = $PS["Data.Unfoldable1"];  
  var Unfoldable = function (Unfoldable10, unfoldr) {
      this.Unfoldable10 = Unfoldable10;
      this.unfoldr = unfoldr;
  };
  var unfoldr = function (dict) {
      return dict.unfoldr;
  }; 
  var unfoldableArray = new Unfoldable(function () {
      return Data_Unfoldable1.unfoldable1Array;
  }, $foreign.unfoldrArrayImpl(Data_Maybe.isNothing)(Data_Maybe.fromJust())(Data_Tuple.fst)(Data_Tuple.snd));
  exports["unfoldr"] = unfoldr;
  exports["unfoldableArray"] = unfoldableArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.List"] = $PS["Data.List"] || {};
  var exports = $PS["Data.List"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Lazy = $PS["Control.Lazy"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unfoldable = $PS["Data.Unfoldable"];                                  
  var uncons = function (v) {
      if (v instanceof Data_List_Types.Nil) {
          return Data_Maybe.Nothing.value;
      };
      if (v instanceof Data_List_Types.Cons) {
          return new Data_Maybe.Just({
              head: v.value0,
              tail: v.value1
          });
      };
      throw new Error("Failed pattern match at Data.List (line 259, column 1 - line 259, column 66): " + [ v.constructor.name ]);
  };
  var toUnfoldable = function (dictUnfoldable) {
      return Data_Unfoldable.unfoldr(dictUnfoldable)(function (xs) {
          return Data_Functor.map(Data_Maybe.functorMaybe)(function (rec) {
              return new Data_Tuple.Tuple(rec.head, rec.tail);
          })(uncons(xs));
      });
  };
  var tail = function (v) {
      if (v instanceof Data_List_Types.Nil) {
          return Data_Maybe.Nothing.value;
      };
      if (v instanceof Data_List_Types.Cons) {
          return new Data_Maybe.Just(v.value1);
      };
      throw new Error("Failed pattern match at Data.List (line 245, column 1 - line 245, column 43): " + [ v.constructor.name ]);
  };
  var some = function (dictAlternative) {
      return function (dictLazy) {
          return function (v) {
              return Control_Apply.apply((dictAlternative.Applicative0()).Apply0())(Data_Functor.map(((dictAlternative.Plus1()).Alt0()).Functor0())(Data_List_Types.Cons.create)(v))(Control_Lazy.defer(dictLazy)(function (v1) {
                  return many(dictAlternative)(dictLazy)(v);
              }));
          };
      };
  };
  var many = function (dictAlternative) {
      return function (dictLazy) {
          return function (v) {
              return Control_Alt.alt((dictAlternative.Plus1()).Alt0())(some(dictAlternative)(dictLazy)(v))(Control_Applicative.pure(dictAlternative.Applicative0())(Data_List_Types.Nil.value));
          };
      };
  };
  var head = function (v) {
      if (v instanceof Data_List_Types.Nil) {
          return Data_Maybe.Nothing.value;
      };
      if (v instanceof Data_List_Types.Cons) {
          return new Data_Maybe.Just(v.value0);
      };
      throw new Error("Failed pattern match at Data.List (line 230, column 1 - line 230, column 22): " + [ v.constructor.name ]);
  };
  var fromFoldable = function (dictFoldable) {
      return Data_Foldable.foldr(dictFoldable)(Data_List_Types.Cons.create)(Data_List_Types.Nil.value);
  };
  exports["toUnfoldable"] = toUnfoldable;
  exports["fromFoldable"] = fromFoldable;
  exports["many"] = many;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Control.Alternative"] = $PS["Control.Alternative"] || {};
  var exports = $PS["Control.Alternative"];              
  var Alternative = function (Applicative0, Plus1) {
      this.Applicative0 = Applicative0;
      this.Plus1 = Plus1;
  };
  exports["Alternative"] = Alternative;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Control.Monad.Error.Class"] = $PS["Control.Monad.Error.Class"] || {};
  var exports = $PS["Control.Monad.Error.Class"];                
  var MonadThrow = function (Monad0, throwError) {
      this.Monad0 = Monad0;
      this.throwError = throwError;
  };
  var throwError = function (dict) {
      return dict.throwError;
  };
  exports["throwError"] = throwError;
  exports["MonadThrow"] = MonadThrow;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Control.Monad.State.Class"] = $PS["Control.Monad.State.Class"] || {};
  var exports = $PS["Control.Monad.State.Class"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unit = $PS["Data.Unit"];                
  var MonadState = function (Monad0, state) {
      this.Monad0 = Monad0;
      this.state = state;
  };
  var state = function (dict) {
      return dict.state;
  };
  var modify_ = function (dictMonadState) {
      return function (f) {
          return state(dictMonadState)(function (s) {
              return new Data_Tuple.Tuple(Data_Unit.unit, f(s));
          });
      };
  };
  var gets = function (dictMonadState) {
      return function (f) {
          return state(dictMonadState)(function (s) {
              return new Data_Tuple.Tuple(f(s), s);
          });
      };
  };
  exports["state"] = state;
  exports["MonadState"] = MonadState;
  exports["gets"] = gets;
  exports["modify_"] = modify_;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Control.Monad.Trans.Class"] = $PS["Control.Monad.Trans.Class"] || {};
  var exports = $PS["Control.Monad.Trans.Class"];
  var MonadTrans = function (lift) {
      this.lift = lift;
  };
  var lift = function (dict) {
      return dict.lift;
  };
  exports["lift"] = lift;
  exports["MonadTrans"] = MonadTrans;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Either"] = $PS["Data.Either"] || {};
  var exports = $PS["Data.Either"];
  var Data_Functor = $PS["Data.Functor"];          
  var Left = (function () {
      function Left(value0) {
          this.value0 = value0;
      };
      Left.create = function (value0) {
          return new Left(value0);
      };
      return Left;
  })();
  var Right = (function () {
      function Right(value0) {
          this.value0 = value0;
      };
      Right.create = function (value0) {
          return new Right(value0);
      };
      return Right;
  })();
  var functorEither = new Data_Functor.Functor(function (f) {
      return function (m) {
          if (m instanceof Left) {
              return new Left(m.value0);
          };
          if (m instanceof Right) {
              return new Right(f(m.value0));
          };
          throw new Error("Failed pattern match at Data.Either (line 38, column 1 - line 38, column 52): " + [ m.constructor.name ]);
      };
  });
  var either = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Left) {
                  return v(v2.value0);
              };
              if (v2 instanceof Right) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Either (line 238, column 1 - line 238, column 64): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  exports["Left"] = Left;
  exports["Right"] = Right;
  exports["either"] = either;
  exports["functorEither"] = functorEither;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Control.Monad.Except.Trans"] = $PS["Control.Monad.Except.Trans"] || {};
  var exports = $PS["Control.Monad.Except.Trans"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Control_Monad_Error_Class = $PS["Control.Monad.Error.Class"];
  var Control_Monad_State_Class = $PS["Control.Monad.State.Class"];
  var Control_Monad_Trans_Class = $PS["Control.Monad.Trans.Class"];
  var Data_Either = $PS["Data.Either"];
  var Data_Functor = $PS["Data.Functor"];                
  var ExceptT = function (x) {
      return x;
  };
  var runExceptT = function (v) {
      return v;
  };          
  var monadTransExceptT = new Control_Monad_Trans_Class.MonadTrans(function (dictMonad) {
      return function (m) {
          return Control_Bind.bind(dictMonad.Bind1())(m)(function (a) {
              return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Either.Right(a));
          });
      };
  });
  var mapExceptT = function (f) {
      return function (v) {
          return f(v);
      };
  };
  var functorExceptT = function (dictFunctor) {
      return new Data_Functor.Functor(function (f) {
          return mapExceptT(Data_Functor.map(dictFunctor)(Data_Functor.map(Data_Either.functorEither)(f)));
      });
  };
  var monadExceptT = function (dictMonad) {
      return new Control_Monad.Monad(function () {
          return applicativeExceptT(dictMonad);
      }, function () {
          return bindExceptT(dictMonad);
      });
  };
  var bindExceptT = function (dictMonad) {
      return new Control_Bind.Bind(function () {
          return applyExceptT(dictMonad);
      }, function (v) {
          return function (k) {
              return Control_Bind.bind(dictMonad.Bind1())(v)(Data_Either.either((function () {
                  var $90 = Control_Applicative.pure(dictMonad.Applicative0());
                  return function ($91) {
                      return $90(Data_Either.Left.create($91));
                  };
              })())(function (a) {
                  var v1 = k(a);
                  return v1;
              }));
          };
      });
  };
  var applyExceptT = function (dictMonad) {
      return new Control_Apply.Apply(function () {
          return functorExceptT(((dictMonad.Bind1()).Apply0()).Functor0());
      }, Control_Monad.ap(monadExceptT(dictMonad)));
  };
  var applicativeExceptT = function (dictMonad) {
      return new Control_Applicative.Applicative(function () {
          return applyExceptT(dictMonad);
      }, (function () {
          var $92 = Control_Applicative.pure(dictMonad.Applicative0());
          return function ($93) {
              return ExceptT($92(Data_Either.Right.create($93)));
          };
      })());
  };
  var monadStateExceptT = function (dictMonadState) {
      return new Control_Monad_State_Class.MonadState(function () {
          return monadExceptT(dictMonadState.Monad0());
      }, function (f) {
          return Control_Monad_Trans_Class.lift(monadTransExceptT)(dictMonadState.Monad0())(Control_Monad_State_Class.state(dictMonadState)(f));
      });
  };
  var monadThrowExceptT = function (dictMonad) {
      return new Control_Monad_Error_Class.MonadThrow(function () {
          return monadExceptT(dictMonad);
      }, (function () {
          var $102 = Control_Applicative.pure(dictMonad.Applicative0());
          return function ($103) {
              return ExceptT($102(Data_Either.Left.create($103)));
          };
      })());
  };
  exports["ExceptT"] = ExceptT;
  exports["runExceptT"] = runExceptT;
  exports["functorExceptT"] = functorExceptT;
  exports["applyExceptT"] = applyExceptT;
  exports["applicativeExceptT"] = applicativeExceptT;
  exports["bindExceptT"] = bindExceptT;
  exports["monadThrowExceptT"] = monadThrowExceptT;
  exports["monadStateExceptT"] = monadStateExceptT;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Control.Monad.State.Trans"] = $PS["Control.Monad.State.Trans"] || {};
  var exports = $PS["Control.Monad.State.Trans"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Lazy = $PS["Control.Lazy"];
  var Control_Monad = $PS["Control.Monad"];
  var Control_Monad_State_Class = $PS["Control.Monad.State.Class"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unit = $PS["Data.Unit"];                      
  var StateT = function (x) {
      return x;
  };
  var runStateT = function (v) {
      return v;
  };
  var lazyStateT = new Control_Lazy.Lazy(function (f) {
      return function (s) {
          var v = f(Data_Unit.unit);
          return v(s);
      };
  });
  var functorStateT = function (dictFunctor) {
      return new Data_Functor.Functor(function (f) {
          return function (v) {
              return function (s) {
                  return Data_Functor.map(dictFunctor)(function (v1) {
                      return new Data_Tuple.Tuple(f(v1.value0), v1.value1);
                  })(v(s));
              };
          };
      });
  };
  var evalStateT = function (dictFunctor) {
      return function (v) {
          return function (s) {
              return Data_Functor.map(dictFunctor)(Data_Tuple.fst)(v(s));
          };
      };
  };
  var monadStateT = function (dictMonad) {
      return new Control_Monad.Monad(function () {
          return applicativeStateT(dictMonad);
      }, function () {
          return bindStateT(dictMonad);
      });
  };
  var bindStateT = function (dictMonad) {
      return new Control_Bind.Bind(function () {
          return applyStateT(dictMonad);
      }, function (v) {
          return function (f) {
              return function (s) {
                  return Control_Bind.bind(dictMonad.Bind1())(v(s))(function (v1) {
                      var v3 = f(v1.value0);
                      return v3(v1.value1);
                  });
              };
          };
      });
  };
  var applyStateT = function (dictMonad) {
      return new Control_Apply.Apply(function () {
          return functorStateT(((dictMonad.Bind1()).Apply0()).Functor0());
      }, Control_Monad.ap(monadStateT(dictMonad)));
  };
  var applicativeStateT = function (dictMonad) {
      return new Control_Applicative.Applicative(function () {
          return applyStateT(dictMonad);
      }, function (a) {
          return function (s) {
              return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(a, s));
          };
      });
  };
  var monadStateStateT = function (dictMonad) {
      return new Control_Monad_State_Class.MonadState(function () {
          return monadStateT(dictMonad);
      }, function (f) {
          return StateT((function () {
              var $112 = Control_Applicative.pure(dictMonad.Applicative0());
              return function ($113) {
                  return $112(f($113));
              };
          })());
      });
  };
  exports["StateT"] = StateT;
  exports["runStateT"] = runStateT;
  exports["evalStateT"] = evalStateT;
  exports["functorStateT"] = functorStateT;
  exports["monadStateT"] = monadStateT;
  exports["lazyStateT"] = lazyStateT;
  exports["monadStateStateT"] = monadStateStateT;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Control.Plus"] = $PS["Control.Plus"] || {};
  var exports = $PS["Control.Plus"];                   
  var Plus = function (Alt0, empty) {
      this.Alt0 = Alt0;
      this.empty = empty;
  };       
  var empty = function (dict) {
      return dict.empty;
  };
  exports["Plus"] = Plus;
  exports["empty"] = empty;
})(PS);
(function(exports) {
  "use strict";

  exports.intDegree = function (x) {
    return Math.min(Math.abs(x), 2147483647);
  };

  // See the Euclidean definition in
  // https://en.m.wikipedia.org/wiki/Modulo_operation.
  exports.intDiv = function (x) {
    return function (y) {
      if (y === 0) return 0;
      return y > 0 ? Math.floor(x / y) : -Math.floor(x / -y);
    };
  };

  exports.intMod = function (x) {
    return function (y) {
      if (y === 0) return 0;
      var yy = Math.abs(y);
      return ((x % yy) + yy) % yy;
    };
  };
})(PS["Data.EuclideanRing"] = PS["Data.EuclideanRing"] || {});
(function(exports) {
  "use strict";

  exports.intSub = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x - y | 0;
    };
  };
})(PS["Data.Ring"] = PS["Data.Ring"] || {});
(function(exports) {
  "use strict";

  exports.intAdd = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x + y | 0;
    };
  };

  exports.intMul = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x * y | 0;
    };
  };
})(PS["Data.Semiring"] = PS["Data.Semiring"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Semiring"] = $PS["Data.Semiring"] || {};
  var exports = $PS["Data.Semiring"];
  var $foreign = $PS["Data.Semiring"];
  var Semiring = function (add, mul, one, zero) {
      this.add = add;
      this.mul = mul;
      this.one = one;
      this.zero = zero;
  };
  var zero = function (dict) {
      return dict.zero;
  };                                                                            
  var semiringInt = new Semiring($foreign.intAdd, $foreign.intMul, 1, 0);
  exports["zero"] = zero;
  exports["semiringInt"] = semiringInt;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Ring"] = $PS["Data.Ring"] || {};
  var exports = $PS["Data.Ring"];
  var $foreign = $PS["Data.Ring"];
  var Data_Semiring = $PS["Data.Semiring"];
  var Ring = function (Semiring0, sub) {
      this.Semiring0 = Semiring0;
      this.sub = sub;
  };
  var sub = function (dict) {
      return dict.sub;
  };                  
  var ringInt = new Ring(function () {
      return Data_Semiring.semiringInt;
  }, $foreign.intSub);
  var negate = function (dictRing) {
      return function (a) {
          return sub(dictRing)(Data_Semiring.zero(dictRing.Semiring0()))(a);
      };
  };
  exports["negate"] = negate;
  exports["ringInt"] = ringInt;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.CommutativeRing"] = $PS["Data.CommutativeRing"] || {};
  var exports = $PS["Data.CommutativeRing"];
  var Data_Ring = $PS["Data.Ring"];
  var CommutativeRing = function (Ring0) {
      this.Ring0 = Ring0;
  }; 
  var commutativeRingInt = new CommutativeRing(function () {
      return Data_Ring.ringInt;
  });
  exports["commutativeRingInt"] = commutativeRingInt;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.EuclideanRing"] = $PS["Data.EuclideanRing"] || {};
  var exports = $PS["Data.EuclideanRing"];
  var $foreign = $PS["Data.EuclideanRing"];
  var Data_CommutativeRing = $PS["Data.CommutativeRing"];  
  var EuclideanRing = function (CommutativeRing0, degree, div, mod) {
      this.CommutativeRing0 = CommutativeRing0;
      this.degree = degree;
      this.div = div;
      this.mod = mod;
  };
  var mod = function (dict) {
      return dict.mod;
  }; 
  var euclideanRingInt = new EuclideanRing(function () {
      return Data_CommutativeRing.commutativeRingInt;
  }, $foreign.intDegree, $foreign.intDiv, $foreign.intMod);
  var div = function (dict) {
      return dict.div;
  };
  exports["div"] = div;
  exports["mod"] = mod;
  exports["euclideanRingInt"] = euclideanRingInt;
})(PS);
(function(exports) {
  "use strict";

  exports.split = function (sep) {
    return function (s) {
      return s.split(sep);
    };
  };

  exports.toLower = function (s) {
    return s.toLowerCase();
  };
})(PS["Data.String.Common"] = PS["Data.String.Common"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.String.Common"] = $PS["Data.String.Common"] || {};
  var exports = $PS["Data.String.Common"];
  var $foreign = $PS["Data.String.Common"];                
  var $$null = function (s) {
      return s === "";
  };
  exports["null"] = $$null;
  exports["split"] = $foreign.split;
  exports["toLower"] = $foreign.toLower;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.String.Pattern"] = $PS["Data.String.Pattern"] || {};
  var exports = $PS["Data.String.Pattern"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Pattern = function (x) {
      return x;
  };              
  var newtypePattern = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Pattern);
  exports["newtypePattern"] = newtypePattern;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Text.Parsing.Parser.Pos"] = $PS["Text.Parsing.Parser.Pos"] || {};
  var exports = $PS["Text.Parsing.Parser.Pos"];
  var Data_EuclideanRing = $PS["Data.EuclideanRing"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Show = $PS["Data.Show"];
  var Data_String_Common = $PS["Data.String.Common"];
  var Data_String_Pattern = $PS["Data.String.Pattern"];
  var updatePosString = function (pos$prime) {
      return function (str) {
          var updatePosChar = function (v) {
              return function (c) {
                  if (c === "\x0a") {
                      return {
                          line: v.line + 1 | 0,
                          column: 1
                      };
                  };
                  if (c === "\x0d") {
                      return {
                          line: v.line + 1 | 0,
                          column: 1
                      };
                  };
                  if (c === "\x09") {
                      return {
                          line: v.line,
                          column: (v.column + 8 | 0) - Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(v.column - 1 | 0)(8) | 0
                      };
                  };
                  return {
                      line: v.line,
                      column: v.column + 1 | 0
                  };
              };
          };
          return Data_Foldable.foldl(Data_Foldable.foldableArray)(updatePosChar)(pos$prime)(Data_String_Common.split(Data_Newtype.wrap(Data_String_Pattern.newtypePattern)(""))(str));
      };
  };
  var showPosition = new Data_Show.Show(function (v) {
      return "(Position { line: " + (Data_Show.show(Data_Show.showInt)(v.line) + (", column: " + (Data_Show.show(Data_Show.showInt)(v.column) + " })")));
  });
  var initialPos = {
      line: 1,
      column: 1
  };
  exports["initialPos"] = initialPos;
  exports["updatePosString"] = updatePosString;
  exports["showPosition"] = showPosition;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Text.Parsing.Parser"] = $PS["Text.Parsing.Parser"] || {};
  var exports = $PS["Text.Parsing.Parser"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Alternative = $PS["Control.Alternative"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Lazy = $PS["Control.Lazy"];
  var Control_Monad_Error_Class = $PS["Control.Monad.Error.Class"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Control_Monad_State_Class = $PS["Control.Monad.State.Class"];
  var Control_Monad_State_Trans = $PS["Control.Monad.State.Trans"];
  var Control_Plus = $PS["Control.Plus"];
  var Data_Either = $PS["Data.Either"];
  var Data_Identity = $PS["Data.Identity"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Show = $PS["Data.Show"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Text_Parsing_Parser_Pos = $PS["Text.Parsing.Parser.Pos"];                
  var ParseState = (function () {
      function ParseState(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      ParseState.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new ParseState(value0, value1, value2);
              };
          };
      };
      return ParseState;
  })();
  var ParseError = (function () {
      function ParseError(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ParseError.create = function (value0) {
          return function (value1) {
              return new ParseError(value0, value1);
          };
      };
      return ParseError;
  })();
  var ParserT = function (x) {
      return x;
  };
  var showParseError = new Data_Show.Show(function (v) {
      return "(ParseError " + (Data_Show.show(Data_Show.showString)(v.value0) + (" " + (Data_Show.show(Text_Parsing_Parser_Pos.showPosition)(v.value1) + ")")));
  });
  var newtypeParserT = new Data_Newtype.Newtype(function (n) {
      return n;
  }, ParserT);
  var runParserT = function (dictMonad) {
      return function (s) {
          return function (p) {
              var initialState = new ParseState(s, Text_Parsing_Parser_Pos.initialPos, false);
              return Control_Monad_State_Trans.evalStateT(((dictMonad.Bind1()).Apply0()).Functor0())(Control_Monad_Except_Trans.runExceptT(Data_Newtype.unwrap(newtypeParserT)(p)))(initialState);
          };
      };
  };
  var runParser = function (s) {
      var $95 = Data_Newtype.unwrap(Data_Identity.newtypeIdentity);
      var $96 = runParserT(Data_Identity.monadIdentity)(s);
      return function ($97) {
          return $95($96($97));
      };
  }; 
  var monadThrowParserT = function (dictMonad) {
      return Control_Monad_Except_Trans.monadThrowExceptT(Control_Monad_State_Trans.monadStateT(dictMonad));
  };
  var monadStateParserT = function (dictMonad) {
      return Control_Monad_Except_Trans.monadStateExceptT(Control_Monad_State_Trans.monadStateStateT(dictMonad));
  };
  var position = function (dictMonad) {
      return Control_Monad_State_Class.gets(monadStateParserT(dictMonad))(function (v) {
          return v.value1;
      });
  };   
  var lazyParserT = new Control_Lazy.Lazy(function (f) {
      return Control_Lazy.defer(Control_Monad_State_Trans.lazyStateT)((function () {
          var $103 = Data_Newtype.unwrap(newtypeParserT);
          return function ($104) {
              return Control_Monad_Except_Trans.runExceptT($103(f($104)));
          };
      })());
  });                           
  var functorParserT = function (dictFunctor) {
      return Control_Monad_Except_Trans.functorExceptT(Control_Monad_State_Trans.functorStateT(dictFunctor));
  };
  var failWithPosition = function (dictMonad) {
      return function (message) {
          return function (pos) {
              return Control_Monad_Error_Class.throwError(monadThrowParserT(dictMonad))(new ParseError(message, pos));
          };
      };
  };
  var bindParserT = function (dictMonad) {
      return Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(dictMonad));
  };
  var fail = function (dictMonad) {
      return function (message) {
          return Control_Bind.bindFlipped(bindParserT(dictMonad))(failWithPosition(dictMonad)(message))(position(dictMonad));
      };
  };
  var applyParserT = function (dictMonad) {
      return Control_Monad_Except_Trans.applyExceptT(Control_Monad_State_Trans.monadStateT(dictMonad));
  };
  var applicativeParserT = function (dictMonad) {
      return Control_Monad_Except_Trans.applicativeExceptT(Control_Monad_State_Trans.monadStateT(dictMonad));
  };
  var altParserT = function (dictMonad) {
      return new Control_Alt.Alt(function () {
          return functorParserT(((dictMonad.Bind1()).Apply0()).Functor0());
      }, function (p1) {
          return function (p2) {
              return ParserT(Control_Monad_Except_Trans.ExceptT(Control_Monad_State_Trans.StateT(function (v) {
                  return Control_Bind.bind(dictMonad.Bind1())(Control_Monad_State_Trans.runStateT(Control_Monad_Except_Trans.runExceptT(Data_Newtype.unwrap(newtypeParserT)(p1)))(new ParseState(v.value0, v.value1, false)))(function (v1) {
                      if (v1.value0 instanceof Data_Either.Left && !v1.value1.value2) {
                          return Control_Monad_State_Trans.runStateT(Control_Monad_Except_Trans.runExceptT(Data_Newtype.unwrap(newtypeParserT)(p2)))(v);
                      };
                      return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(v1.value0, v1.value1));
                  });
              })));
          };
      });
  };
  var plusParserT = function (dictMonad) {
      return new Control_Plus.Plus(function () {
          return altParserT(dictMonad);
      }, fail(dictMonad)("No alternative"));
  };
  var alternativeParserT = function (dictMonad) {
      return new Control_Alternative.Alternative(function () {
          return applicativeParserT(dictMonad);
      }, function () {
          return plusParserT(dictMonad);
      });
  };
  exports["ParseError"] = ParseError;
  exports["ParseState"] = ParseState;
  exports["ParserT"] = ParserT;
  exports["runParser"] = runParser;
  exports["fail"] = fail;
  exports["showParseError"] = showParseError;
  exports["newtypeParserT"] = newtypeParserT;
  exports["lazyParserT"] = lazyParserT;
  exports["functorParserT"] = functorParserT;
  exports["applyParserT"] = applyParserT;
  exports["applicativeParserT"] = applicativeParserT;
  exports["bindParserT"] = bindParserT;
  exports["monadStateParserT"] = monadStateParserT;
  exports["altParserT"] = altParserT;
  exports["plusParserT"] = plusParserT;
  exports["alternativeParserT"] = alternativeParserT;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Text.Parsing.Parser.Combinators"] = $PS["Text.Parsing.Parser.Combinators"] || {};
  var exports = $PS["Text.Parsing.Parser.Combinators"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Control_Monad_State_Trans = $PS["Control.Monad.State.Trans"];
  var Control_Plus = $PS["Control.Plus"];
  var Data_Either = $PS["Data.Either"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_List = $PS["Data.List"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unit = $PS["Data.Unit"];
  var Text_Parsing_Parser = $PS["Text.Parsing.Parser"];                
  var withErrorMessage = function (dictMonad) {
      return function (p) {
          return function (msg) {
              return Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(p)(Text_Parsing_Parser.fail(dictMonad)("Expected " + msg));
          };
      };
  };
  var tryRethrow = function (dictMonad) {
      return function (p) {
          return Text_Parsing_Parser.ParserT(Control_Monad_Except_Trans.ExceptT(Control_Monad_State_Trans.StateT(function (v) {
              return Control_Bind.bind(dictMonad.Bind1())(Control_Monad_State_Trans.runStateT(Control_Monad_Except_Trans.runExceptT(Data_Newtype.unwrap(Text_Parsing_Parser.newtypeParserT)(p)))(v))(function (v1) {
                  if (v1.value0 instanceof Data_Either.Left) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(new Data_Either.Left(new Text_Parsing_Parser.ParseError(v1.value0.value0.value0, v.value1)), new Text_Parsing_Parser.ParseState(v1.value1.value0, v1.value1.value1, v.value2)));
                  };
                  return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(v1.value0, v1.value1));
              });
          })));
      };
  };
  var $$try = function (dictMonad) {
      return function (p) {
          return Text_Parsing_Parser.ParserT(Control_Monad_Except_Trans.ExceptT(Control_Monad_State_Trans.StateT(function (v) {
              return Control_Bind.bind(dictMonad.Bind1())(Control_Monad_State_Trans.runStateT(Control_Monad_Except_Trans.runExceptT(Data_Newtype.unwrap(Text_Parsing_Parser.newtypeParserT)(p)))(v))(function (v1) {
                  if (v1.value0 instanceof Data_Either.Left) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(v1.value0, new Text_Parsing_Parser.ParseState(v1.value1.value0, v1.value1.value1, v.value2)));
                  };
                  return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(v1.value0, v1.value1));
              });
          })));
      };
  };
  var skipMany1 = function (dictMonad) {
      return function (p) {
          return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(p)(function (x) {
              return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(skipMany(dictMonad)(p))(function (xs) {
                  return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(Data_Unit.unit);
              });
          });
      };
  };
  var skipMany = function (dictMonad) {
      return function (p) {
          return Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(skipMany1(dictMonad)(p))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(Data_Unit.unit));
      };
  };
  var sepBy1 = function (dictMonad) {
      return function (p) {
          return function (sep) {
              return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(p)(function (a) {
                  return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Data_List.many(Text_Parsing_Parser.alternativeParserT(dictMonad))(Text_Parsing_Parser.lazyParserT)(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(dictMonad))(sep)(p)))(function (as) {
                      return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(new Data_List_Types.Cons(a, as));
                  });
              });
          };
      };
  };
  var sepBy = function (dictMonad) {
      return function (p) {
          return function (sep) {
              return Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(sepBy1(dictMonad)(p)(sep))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(Data_List_Types.Nil.value));
          };
      };
  };
  var option = function (dictMonad) {
      return function (a) {
          return function (p) {
              return Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(p)(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(a));
          };
      };
  };
  var optionMaybe = function (dictMonad) {
      return function (p) {
          return option(dictMonad)(Data_Maybe.Nothing.value)(Data_Functor.map(Text_Parsing_Parser.functorParserT(((dictMonad.Bind1()).Apply0()).Functor0()))(Data_Maybe.Just.create)(p));
      };
  };
  var notFollowedBy = function (dictMonad) {
      return function (p) {
          return $$try(dictMonad)(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(dictMonad))($$try(dictMonad)(p))(Text_Parsing_Parser.fail(dictMonad)("Negated parser succeeded")))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(Data_Unit.unit)));
      };
  };
  var choice = function (dictFoldable) {
      return function (dictMonad) {
          return Data_Foldable.foldl(dictFoldable)(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad)))(Control_Plus.empty(Text_Parsing_Parser.plusParserT(dictMonad)));
      };
  };
  var between = function (dictMonad) {
      return function (open) {
          return function (close) {
              return function (p) {
                  return Control_Apply.applyFirst(Text_Parsing_Parser.applyParserT(dictMonad))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(dictMonad))(open)(p))(close);
              };
          };
      };
  };
  var asErrorMessage = function (dictMonad) {
      return Data_Function.flip(withErrorMessage(dictMonad));
  };
  exports["withErrorMessage"] = withErrorMessage;
  exports["asErrorMessage"] = asErrorMessage;
  exports["between"] = between;
  exports["option"] = option;
  exports["optionMaybe"] = optionMaybe;
  exports["try"] = $$try;
  exports["tryRethrow"] = tryRethrow;
  exports["sepBy"] = sepBy;
  exports["sepBy1"] = sepBy1;
  exports["choice"] = choice;
  exports["skipMany"] = skipMany;
  exports["skipMany1"] = skipMany1;
  exports["notFollowedBy"] = notFollowedBy;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Text.Parsing.Parser.Expr"] = $PS["Text.Parsing.Parser.Expr"] || {};
  var exports = $PS["Text.Parsing.Parser.Expr"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Text_Parsing_Parser = $PS["Text.Parsing.Parser"];
  var Text_Parsing_Parser_Combinators = $PS["Text.Parsing.Parser.Combinators"];                
  var AssocNone = (function () {
      function AssocNone() {

      };
      AssocNone.value = new AssocNone();
      return AssocNone;
  })();
  var AssocLeft = (function () {
      function AssocLeft() {

      };
      AssocLeft.value = new AssocLeft();
      return AssocLeft;
  })();
  var AssocRight = (function () {
      function AssocRight() {

      };
      AssocRight.value = new AssocRight();
      return AssocRight;
  })();
  var Infix = (function () {
      function Infix(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Infix.create = function (value0) {
          return function (value1) {
              return new Infix(value0, value1);
          };
      };
      return Infix;
  })();
  var Prefix = (function () {
      function Prefix(value0) {
          this.value0 = value0;
      };
      Prefix.create = function (value0) {
          return new Prefix(value0);
      };
      return Prefix;
  })();
  var Postfix = (function () {
      function Postfix(value0) {
          this.value0 = value0;
      };
      Postfix.create = function (value0) {
          return new Postfix(value0);
      };
      return Postfix;
  })();
  var termP = function (dictMonad) {
      return function (prefixP) {
          return function (term) {
              return function (postfixP) {
                  return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(prefixP)(function (pre) {
                      return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(term)(function (x) {
                          return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(postfixP)(function (post) {
                              return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(post(pre(x)));
                          });
                      });
                  });
              };
          };
      };
  };
  var splitOp = function (v) {
      return function (accum) {
          if (v instanceof Infix && v.value1 instanceof AssocNone) {
              return {
                  rassoc: accum.rassoc,
                  lassoc: accum.lassoc,
                  nassoc: new Data_List_Types.Cons(v.value0, accum.nassoc),
                  prefix: accum.prefix,
                  postfix: accum.postfix
              };
          };
          if (v instanceof Infix && v.value1 instanceof AssocLeft) {
              return {
                  rassoc: accum.rassoc,
                  lassoc: new Data_List_Types.Cons(v.value0, accum.lassoc),
                  nassoc: accum.nassoc,
                  prefix: accum.prefix,
                  postfix: accum.postfix
              };
          };
          if (v instanceof Infix && v.value1 instanceof AssocRight) {
              return {
                  rassoc: new Data_List_Types.Cons(v.value0, accum.rassoc),
                  lassoc: accum.lassoc,
                  nassoc: accum.nassoc,
                  prefix: accum.prefix,
                  postfix: accum.postfix
              };
          };
          if (v instanceof Prefix) {
              return {
                  rassoc: accum.rassoc,
                  lassoc: accum.lassoc,
                  nassoc: accum.nassoc,
                  prefix: new Data_List_Types.Cons(v.value0, accum.prefix),
                  postfix: accum.postfix
              };
          };
          if (v instanceof Postfix) {
              return {
                  rassoc: accum.rassoc,
                  lassoc: accum.lassoc,
                  nassoc: accum.nassoc,
                  prefix: accum.prefix,
                  postfix: new Data_List_Types.Cons(v.value0, accum.postfix)
              };
          };
          throw new Error("Failed pattern match at Text.Parsing.Parser.Expr (line 69, column 1 - line 69, column 80): " + [ v.constructor.name, accum.constructor.name ]);
      };
  };
  var rassocP1 = function (dictMonad) {
      return function (x) {
          return function (rassocOp) {
              return function (prefixP) {
                  return function (term) {
                      return function (postfixP) {
                          return Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(rassocP(dictMonad)(x)(rassocOp)(prefixP)(term)(postfixP))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(x));
                      };
                  };
              };
          };
      };
  };
  var rassocP = function (dictMonad) {
      return function (x) {
          return function (rassocOp) {
              return function (prefixP) {
                  return function (term) {
                      return function (postfixP) {
                          return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(rassocOp)(function (f) {
                              return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(termP(dictMonad)(prefixP)(term)(postfixP))(function (z) {
                                  return rassocP1(dictMonad)(z)(rassocOp)(prefixP)(term)(postfixP);
                              }))(function (y) {
                                  return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(f(x)(y));
                              });
                          });
                      };
                  };
              };
          };
      };
  };
  var nassocP = function (dictMonad) {
      return function (x) {
          return function (nassocOp) {
              return function (prefixP) {
                  return function (term) {
                      return function (postfixP) {
                          return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(nassocOp)(function (f) {
                              return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(termP(dictMonad)(prefixP)(term)(postfixP))(function (y) {
                                  return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(f(x)(y));
                              });
                          });
                      };
                  };
              };
          };
      };
  };
  var lassocP1 = function (dictMonad) {
      return function (x) {
          return function (lassocOp) {
              return function (prefixP) {
                  return function (term) {
                      return function (postfixP) {
                          return Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(lassocP(dictMonad)(x)(lassocOp)(prefixP)(term)(postfixP))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(x));
                      };
                  };
              };
          };
      };
  };
  var lassocP = function (dictMonad) {
      return function (x) {
          return function (lassocOp) {
              return function (prefixP) {
                  return function (term) {
                      return function (postfixP) {
                          return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(lassocOp)(function (f) {
                              return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(termP(dictMonad)(prefixP)(term)(postfixP))(function (y) {
                                  return lassocP1(dictMonad)(f(x)(y))(lassocOp)(prefixP)(term)(postfixP);
                              });
                          });
                      };
                  };
              };
          };
      };
  };
  var makeParser = function (dictMonad) {
      return function (term) {
          return function (ops) {
              var accum = Data_Foldable.foldr(Data_Foldable.foldableArray)(splitOp)({
                  rassoc: Data_List_Types.Nil.value,
                  lassoc: Data_List_Types.Nil.value,
                  nassoc: Data_List_Types.Nil.value,
                  prefix: Data_List_Types.Nil.value,
                  postfix: Data_List_Types.Nil.value
              })(ops);
              var lassocOp = Text_Parsing_Parser_Combinators.choice(Data_List_Types.foldableList)(dictMonad)(accum.lassoc);
              var nassocOp = Text_Parsing_Parser_Combinators.choice(Data_List_Types.foldableList)(dictMonad)(accum.nassoc);
              var postfixOp = Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(Text_Parsing_Parser_Combinators.choice(Data_List_Types.foldableList)(dictMonad)(accum.postfix))("");
              var postfixP = Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(postfixOp)(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(Control_Category.identity(Control_Category.categoryFn)));
              var prefixOp = Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(Text_Parsing_Parser_Combinators.choice(Data_List_Types.foldableList)(dictMonad)(accum.prefix))("");
              var prefixP = Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(prefixOp)(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(Control_Category.identity(Control_Category.categoryFn)));
              var rassocOp = Text_Parsing_Parser_Combinators.choice(Data_List_Types.foldableList)(dictMonad)(accum.rassoc);
              return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(termP(dictMonad)(prefixP)(term)(postfixP))(function (x) {
                  return Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(rassocP(dictMonad)(x)(rassocOp)(prefixP)(term)(postfixP))(lassocP(dictMonad)(x)(lassocOp)(prefixP)(term)(postfixP)))(nassocP(dictMonad)(x)(nassocOp)(prefixP)(term)(postfixP)))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(x)))("operator");
              });
          };
      };
  };
  var buildExprParser = function (dictMonad) {
      return function (operators) {
          return function (simpleExpr) {
              return Data_Foldable.foldl(Data_Foldable.foldableArray)(makeParser(dictMonad))(simpleExpr)(operators);
          };
      };
  };
  exports["AssocLeft"] = AssocLeft;
  exports["AssocRight"] = AssocRight;
  exports["Infix"] = Infix;
  exports["Prefix"] = Prefix;
  exports["buildExprParser"] = buildExprParser;
})(PS);
(function(exports) {
  "use strict";
  /* global Symbol */

  var hasArrayFrom = typeof Array.from === "function";
  var hasStringIterator =
    typeof Symbol !== "undefined" &&
    Symbol != null &&
    typeof Symbol.iterator !== "undefined" &&
    typeof String.prototype[Symbol.iterator] === "function";
  var hasFromCodePoint = typeof String.prototype.fromCodePoint === "function";
  var hasCodePointAt = typeof String.prototype.codePointAt === "function";

  exports._unsafeCodePointAt0 = function (fallback) {
    return hasCodePointAt
      ? function (str) { return str.codePointAt(0); }
      : fallback;
  };

  exports._singleton = function (fallback) {
    return hasFromCodePoint ? String.fromCodePoint : fallback;
  };

  exports._take = function (fallback) {
    return function (n) {
      if (hasStringIterator) {
        return function (str) {
          var accum = "";
          var iter = str[Symbol.iterator]();
          for (var i = 0; i < n; ++i) {
            var o = iter.next();
            if (o.done) return accum;
            accum += o.value;
          }
          return accum;
        };
      }
      return fallback(n);
    };
  };

  exports._toCodePointArray = function (fallback) {
    return function (unsafeCodePointAt0) {
      if (hasArrayFrom) {
        return function (str) {
          return Array.from(str, unsafeCodePointAt0);
        };
      }
      return fallback;
    };
  };
})(PS["Data.String.CodePoints"] = PS["Data.String.CodePoints"] || {});
(function(exports) {
  "use strict";

  exports.toCharCode = function (c) {
    return c.charCodeAt(0);
  };

  exports.fromCharCode = function (c) {
    return String.fromCharCode(c);
  };
})(PS["Data.Enum"] = PS["Data.Enum"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Enum"] = $PS["Data.Enum"] || {};
  var exports = $PS["Data.Enum"];
  var $foreign = $PS["Data.Enum"];
  var Data_Bounded = $PS["Data.Bounded"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Enum = function (Ord0, pred, succ) {
      this.Ord0 = Ord0;
      this.pred = pred;
      this.succ = succ;
  };
  var BoundedEnum = function (Bounded0, Enum1, cardinality, fromEnum, toEnum) {
      this.Bounded0 = Bounded0;
      this.Enum1 = Enum1;
      this.cardinality = cardinality;
      this.fromEnum = fromEnum;
      this.toEnum = toEnum;
  };
  var toEnum = function (dict) {
      return dict.toEnum;
  };              
  var fromEnum = function (dict) {
      return dict.fromEnum;
  };
  var toEnumWithDefaults = function (dictBoundedEnum) {
      return function (low) {
          return function (high) {
              return function (x) {
                  var v = toEnum(dictBoundedEnum)(x);
                  if (v instanceof Data_Maybe.Just) {
                      return v.value0;
                  };
                  if (v instanceof Data_Maybe.Nothing) {
                      var $54 = x < fromEnum(dictBoundedEnum)(Data_Bounded.bottom(dictBoundedEnum.Bounded0()));
                      if ($54) {
                          return low;
                      };
                      return high;
                  };
                  throw new Error("Failed pattern match at Data.Enum (line 158, column 33 - line 160, column 62): " + [ v.constructor.name ]);
              };
          };
      };
  };
  var defaultSucc = function (toEnum$prime) {
      return function (fromEnum$prime) {
          return function (a) {
              return toEnum$prime(fromEnum$prime(a) + 1 | 0);
          };
      };
  };
  var defaultPred = function (toEnum$prime) {
      return function (fromEnum$prime) {
          return function (a) {
              return toEnum$prime(fromEnum$prime(a) - 1 | 0);
          };
      };
  };
  var charToEnum = function (v) {
      if (v >= Data_Bounded.bottom(Data_Bounded.boundedInt) && v <= Data_Bounded.top(Data_Bounded.boundedInt)) {
          return new Data_Maybe.Just($foreign.fromCharCode(v));
      };
      return Data_Maybe.Nothing.value;
  };
  var enumChar = new Enum(function () {
      return Data_Ord.ordChar;
  }, defaultPred(charToEnum)($foreign.toCharCode), defaultSucc(charToEnum)($foreign.toCharCode));
  var boundedEnumChar = new BoundedEnum(function () {
      return Data_Bounded.boundedChar;
  }, function () {
      return enumChar;
  }, $foreign.toCharCode(Data_Bounded.top(Data_Bounded.boundedChar)) - $foreign.toCharCode(Data_Bounded.bottom(Data_Bounded.boundedChar)) | 0, $foreign.toCharCode, charToEnum);
  exports["toEnum"] = toEnum;
  exports["fromEnum"] = fromEnum;
  exports["toEnumWithDefaults"] = toEnumWithDefaults;
  exports["boundedEnumChar"] = boundedEnumChar;
})(PS);
(function(exports) {
  "use strict";

  exports.fromCharArray = function (a) {
    return a.join("");
  };

  exports.toCharArray = function (s) {
    return s.split("");
  };

  exports.singleton = function (c) {
    return c;
  };

  exports._charAt = function (just) {
    return function (nothing) {
      return function (i) {
        return function (s) {
          return i >= 0 && i < s.length ? just(s.charAt(i)) : nothing;
        };
      };
    };
  };

  exports.length = function (s) {
    return s.length;
  };

  exports._indexOf = function (just) {
    return function (nothing) {
      return function (x) {
        return function (s) {
          var i = s.indexOf(x);
          return i === -1 ? nothing : just(i);
        };
      };
    };
  };

  exports.take = function (n) {
    return function (s) {
      return s.substr(0, n);
    };
  };

  exports.drop = function (n) {
    return function (s) {
      return s.substring(n);
    };
  };
})(PS["Data.String.CodeUnits"] = PS["Data.String.CodeUnits"] || {});
(function(exports) {
  "use strict";

  exports.charAt = function (i) {
    return function (s) {
      if (i >= 0 && i < s.length) return s.charAt(i);
      throw new Error("Data.String.Unsafe.charAt: Invalid index.");
    };
  };
})(PS["Data.String.Unsafe"] = PS["Data.String.Unsafe"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.String.Unsafe"] = $PS["Data.String.Unsafe"] || {};
  var exports = $PS["Data.String.Unsafe"];
  var $foreign = $PS["Data.String.Unsafe"];
  exports["charAt"] = $foreign.charAt;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.String.CodeUnits"] = $PS["Data.String.CodeUnits"] || {};
  var exports = $PS["Data.String.CodeUnits"];
  var $foreign = $PS["Data.String.CodeUnits"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_String_Unsafe = $PS["Data.String.Unsafe"];                
  var uncons = function (v) {
      if (v === "") {
          return Data_Maybe.Nothing.value;
      };
      return new Data_Maybe.Just({
          head: Data_String_Unsafe.charAt(0)(v),
          tail: $foreign.drop(1)(v)
      });
  };                                                                                                   
  var indexOf = $foreign["_indexOf"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var charAt = $foreign["_charAt"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  exports["uncons"] = uncons;
  exports["indexOf"] = indexOf;
  exports["singleton"] = $foreign.singleton;
  exports["fromCharArray"] = $foreign.fromCharArray;
  exports["toCharArray"] = $foreign.toCharArray;
  exports["length"] = $foreign.length;
  exports["take"] = $foreign.take;
  exports["drop"] = $foreign.drop;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.String.CodePoints"] = $PS["Data.String.CodePoints"] || {};
  var exports = $PS["Data.String.CodePoints"];
  var $foreign = $PS["Data.String.CodePoints"];
  var Data_Array = $PS["Data.Array"];
  var Data_Bounded = $PS["Data.Bounded"];
  var Data_Enum = $PS["Data.Enum"];
  var Data_EuclideanRing = $PS["Data.EuclideanRing"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_String_CodeUnits = $PS["Data.String.CodeUnits"];
  var Data_String_Unsafe = $PS["Data.String.Unsafe"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unfoldable = $PS["Data.Unfoldable"];
  var unsurrogate = function (lead) {
      return function (trail) {
          return (((lead - 55296 | 0) * 1024 | 0) + (trail - 56320 | 0) | 0) + 65536 | 0;
      };
  }; 
  var isTrail = function (cu) {
      return 56320 <= cu && cu <= 57343;
  };
  var isLead = function (cu) {
      return 55296 <= cu && cu <= 56319;
  };
  var uncons = function (s) {
      var v = Data_String_CodeUnits.length(s);
      if (v === 0) {
          return Data_Maybe.Nothing.value;
      };
      if (v === 1) {
          return new Data_Maybe.Just({
              head: Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(0)(s)),
              tail: ""
          });
      };
      var cu1 = Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(1)(s));
      var cu0 = Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(0)(s));
      var $21 = isLead(cu0) && isTrail(cu1);
      if ($21) {
          return new Data_Maybe.Just({
              head: unsurrogate(cu0)(cu1),
              tail: Data_String_CodeUnits.drop(2)(s)
          });
      };
      return new Data_Maybe.Just({
          head: cu0,
          tail: Data_String_CodeUnits.drop(1)(s)
      });
  };
  var unconsButWithTuple = function (s) {
      return Data_Functor.map(Data_Maybe.functorMaybe)(function (v) {
          return new Data_Tuple.Tuple(v.head, v.tail);
      })(uncons(s));
  };
  var toCodePointArrayFallback = function (s) {
      return Data_Unfoldable.unfoldr(Data_Unfoldable.unfoldableArray)(unconsButWithTuple)(s);
  };
  var unsafeCodePointAt0Fallback = function (s) {
      var cu0 = Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(0)(s));
      var $25 = isLead(cu0) && Data_String_CodeUnits.length(s) > 1;
      if ($25) {
          var cu1 = Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(1)(s));
          var $26 = isTrail(cu1);
          if ($26) {
              return unsurrogate(cu0)(cu1);
          };
          return cu0;
      };
      return cu0;
  };
  var unsafeCodePointAt0 = $foreign["_unsafeCodePointAt0"](unsafeCodePointAt0Fallback);
  var toCodePointArray = $foreign["_toCodePointArray"](toCodePointArrayFallback)(unsafeCodePointAt0);
  var length = function ($52) {
      return Data_Array.length(toCodePointArray($52));
  };
  var indexOf = function (p) {
      return function (s) {
          return Data_Functor.map(Data_Maybe.functorMaybe)(function (i) {
              return length(Data_String_CodeUnits.take(i)(s));
          })(Data_String_CodeUnits.indexOf(p)(s));
      };
  };
  var fromCharCode = (function () {
      var $53 = Data_Enum.toEnumWithDefaults(Data_Enum.boundedEnumChar)(Data_Bounded.bottom(Data_Bounded.boundedChar))(Data_Bounded.top(Data_Bounded.boundedChar));
      return function ($54) {
          return Data_String_CodeUnits.singleton($53($54));
      };
  })();
  var singletonFallback = function (v) {
      if (v <= 65535) {
          return fromCharCode(v);
      };
      var lead = Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(v - 65536 | 0)(1024) + 55296 | 0;
      var trail = Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(v - 65536 | 0)(1024) + 56320 | 0;
      return fromCharCode(lead) + fromCharCode(trail);
  };                                                                          
  var singleton = $foreign["_singleton"](singletonFallback);
  var takeFallback = function (n) {
      return function (v) {
          if (n < 1) {
              return "";
          };
          var v1 = uncons(v);
          if (v1 instanceof Data_Maybe.Just) {
              return singleton(v1.value0.head) + takeFallback(n - 1 | 0)(v1.value0.tail);
          };
          return v;
      };
  };
  var take = $foreign["_take"](takeFallback);
  var drop = function (n) {
      return function (s) {
          return Data_String_CodeUnits.drop(Data_String_CodeUnits.length(take(n)(s)))(s);
      };
  };
  exports["length"] = length;
  exports["indexOf"] = indexOf;
  exports["drop"] = drop;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Text.Parsing.Parser.String"] = $PS["Text.Parsing.Parser.String"] || {};
  var exports = $PS["Text.Parsing.Parser.String"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_State_Class = $PS["Control.Monad.State.Class"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Show = $PS["Data.Show"];
  var Data_String_CodePoints = $PS["Data.String.CodePoints"];
  var Data_String_CodeUnits = $PS["Data.String.CodeUnits"];
  var Data_String_Common = $PS["Data.String.Common"];
  var Data_String_Pattern = $PS["Data.String.Pattern"];
  var Text_Parsing_Parser = $PS["Text.Parsing.Parser"];
  var Text_Parsing_Parser_Combinators = $PS["Text.Parsing.Parser.Combinators"];
  var Text_Parsing_Parser_Pos = $PS["Text.Parsing.Parser.Pos"];                
  var StringLike = function (drop, indexOf, $$null, uncons) {
      this.drop = drop;
      this.indexOf = indexOf;
      this["null"] = $$null;
      this.uncons = uncons;
  };
  var uncons = function (dict) {
      return dict.uncons;
  };
  var stringLikeString = new StringLike(Data_String_CodePoints.drop, Data_String_CodePoints.indexOf, Data_String_Common["null"], Data_String_CodeUnits.uncons);
  var $$null = function (dict) {
      return dict["null"];
  };
  var indexOf = function (dict) {
      return dict.indexOf;
  };
  var eof = function (dictStringLike) {
      return function (dictMonad) {
          return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Control_Monad_State_Class.gets(Text_Parsing_Parser.monadStateParserT(dictMonad))(function (v) {
              return v.value0;
          }))(function (input) {
              return Control_Applicative.unless(Text_Parsing_Parser.applicativeParserT(dictMonad))($$null(dictStringLike)(input))(Text_Parsing_Parser.fail(dictMonad)("Expected EOF"));
          });
      };
  };
  var drop = function (dict) {
      return dict.drop;
  };
  var string = function (dictStringLike) {
      return function (dictMonad) {
          return function (str) {
              return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Control_Monad_State_Class.gets(Text_Parsing_Parser.monadStateParserT(dictMonad))(function (v) {
                  return v.value0;
              }))(function (input) {
                  var v = indexOf(dictStringLike)(Data_Newtype.wrap(Data_String_Pattern.newtypePattern)(str))(input);
                  if (v instanceof Data_Maybe.Just && v.value0 === 0) {
                      return Control_Bind.discard(Control_Bind.discardUnit)(Text_Parsing_Parser.bindParserT(dictMonad))(Control_Monad_State_Class.modify_(Text_Parsing_Parser.monadStateParserT(dictMonad))(function (v1) {
                          return new Text_Parsing_Parser.ParseState(drop(dictStringLike)(Data_String_CodePoints.length(str))(input), Text_Parsing_Parser_Pos.updatePosString(v1.value1)(str), true);
                      }))(function () {
                          return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(str);
                      });
                  };
                  return Text_Parsing_Parser.fail(dictMonad)("Expected " + Data_Show.show(Data_Show.showString)(str));
              });
          };
      };
  };
  var anyChar = function (dictStringLike) {
      return function (dictMonad) {
          return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Control_Monad_State_Class.gets(Text_Parsing_Parser.monadStateParserT(dictMonad))(function (v) {
              return v.value0;
          }))(function (input) {
              var v = uncons(dictStringLike)(input);
              if (v instanceof Data_Maybe.Nothing) {
                  return Text_Parsing_Parser.fail(dictMonad)("Unexpected EOF");
              };
              if (v instanceof Data_Maybe.Just) {
                  return Control_Bind.discard(Control_Bind.discardUnit)(Text_Parsing_Parser.bindParserT(dictMonad))(Control_Monad_State_Class.modify_(Text_Parsing_Parser.monadStateParserT(dictMonad))(function (v1) {
                      return new Text_Parsing_Parser.ParseState(v.value0.tail, Text_Parsing_Parser_Pos.updatePosString(v1.value1)(Data_String_CodeUnits.singleton(v.value0.head)), true);
                  }))(function () {
                      return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(v.value0.head);
                  });
              };
              throw new Error("Failed pattern match at Text.Parsing.Parser.String (line 56, column 3 - line 63, column 16): " + [ v.constructor.name ]);
          });
      };
  };
  var satisfy = function (dictStringLike) {
      return function (dictMonad) {
          return function (f) {
              return Text_Parsing_Parser_Combinators.tryRethrow(dictMonad)(Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(anyChar(dictStringLike)(dictMonad))(function (c) {
                  var $52 = f(c);
                  if ($52) {
                      return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(c);
                  };
                  return Text_Parsing_Parser.fail(dictMonad)("Character '" + (Data_String_CodeUnits.singleton(c) + "' did not satisfy predicate"));
              }));
          };
      };
  };
  var $$char = function (dictStringLike) {
      return function (dictMonad) {
          return function (c) {
              return Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(satisfy(dictStringLike)(dictMonad)(function (v) {
                  return v === c;
              }))(Data_Show.show(Data_Show.showChar)(c));
          };
      };
  };
  var noneOf = function (dictStringLike) {
      return function (dictMonad) {
          return function (ss) {
              return Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(satisfy(dictStringLike)(dictMonad)(Data_Function.flip(Data_Foldable.notElem(Data_Foldable.foldableArray)(Data_Eq.eqChar))(ss)))("none of " + Data_Show.show(Data_Show.showArray(Data_Show.showChar))(ss));
          };
      };
  };
  var oneOf = function (dictStringLike) {
      return function (dictMonad) {
          return function (ss) {
              return Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(satisfy(dictStringLike)(dictMonad)(Data_Function.flip(Data_Foldable.elem(Data_Foldable.foldableArray)(Data_Eq.eqChar))(ss)))("one of " + Data_Show.show(Data_Show.showArray(Data_Show.showChar))(ss));
          };
      };
  };
  exports["eof"] = eof;
  exports["string"] = string;
  exports["satisfy"] = satisfy;
  exports["char"] = $$char;
  exports["oneOf"] = oneOf;
  exports["noneOf"] = noneOf;
  exports["stringLikeString"] = stringLikeString;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Char"] = $PS["Data.Char"] || {};
  var exports = $PS["Data.Char"];
  var Data_Enum = $PS["Data.Enum"];                
  var toCharCode = Data_Enum.fromEnum(Data_Enum.boundedEnumChar);
  var fromCharCode = Data_Enum.toEnum(Data_Enum.boundedEnumChar);
  exports["toCharCode"] = toCharCode;
  exports["fromCharCode"] = fromCharCode;
})(PS);
(function(exports) {
  exports.withCharCode = function(f) {
      return function (c) {
          return String.fromCharCode(f(c.charCodeAt()));
      }
  }
})(PS["Data.Char.Unicode"] = PS["Data.Char.Unicode"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Char.Unicode.Internal"] = $PS["Data.Char.Unicode.Internal"] || {};
  var exports = $PS["Data.Char.Unicode.Internal"];
  var Data_Array = $PS["Data.Array"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Int = $PS["Data.Int"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ordering = $PS["Data.Ordering"];        
  var NUMCAT_LU = (function () {
      function NUMCAT_LU() {

      };
      NUMCAT_LU.value = new NUMCAT_LU();
      return NUMCAT_LU;
  })();
  var NUMCAT_LL = (function () {
      function NUMCAT_LL() {

      };
      NUMCAT_LL.value = new NUMCAT_LL();
      return NUMCAT_LL;
  })();
  var NUMCAT_LT = (function () {
      function NUMCAT_LT() {

      };
      NUMCAT_LT.value = new NUMCAT_LT();
      return NUMCAT_LT;
  })();
  var NUMCAT_LM = (function () {
      function NUMCAT_LM() {

      };
      NUMCAT_LM.value = new NUMCAT_LM();
      return NUMCAT_LM;
  })();
  var NUMCAT_LO = (function () {
      function NUMCAT_LO() {

      };
      NUMCAT_LO.value = new NUMCAT_LO();
      return NUMCAT_LO;
  })();
  var NUMCAT_MN = (function () {
      function NUMCAT_MN() {

      };
      NUMCAT_MN.value = new NUMCAT_MN();
      return NUMCAT_MN;
  })();
  var NUMCAT_MC = (function () {
      function NUMCAT_MC() {

      };
      NUMCAT_MC.value = new NUMCAT_MC();
      return NUMCAT_MC;
  })();
  var NUMCAT_ME = (function () {
      function NUMCAT_ME() {

      };
      NUMCAT_ME.value = new NUMCAT_ME();
      return NUMCAT_ME;
  })();
  var NUMCAT_ND = (function () {
      function NUMCAT_ND() {

      };
      NUMCAT_ND.value = new NUMCAT_ND();
      return NUMCAT_ND;
  })();
  var NUMCAT_NL = (function () {
      function NUMCAT_NL() {

      };
      NUMCAT_NL.value = new NUMCAT_NL();
      return NUMCAT_NL;
  })();
  var NUMCAT_NO = (function () {
      function NUMCAT_NO() {

      };
      NUMCAT_NO.value = new NUMCAT_NO();
      return NUMCAT_NO;
  })();
  var NUMCAT_PC = (function () {
      function NUMCAT_PC() {

      };
      NUMCAT_PC.value = new NUMCAT_PC();
      return NUMCAT_PC;
  })();
  var NUMCAT_PD = (function () {
      function NUMCAT_PD() {

      };
      NUMCAT_PD.value = new NUMCAT_PD();
      return NUMCAT_PD;
  })();
  var NUMCAT_PS = (function () {
      function NUMCAT_PS() {

      };
      NUMCAT_PS.value = new NUMCAT_PS();
      return NUMCAT_PS;
  })();
  var NUMCAT_PE = (function () {
      function NUMCAT_PE() {

      };
      NUMCAT_PE.value = new NUMCAT_PE();
      return NUMCAT_PE;
  })();
  var NUMCAT_PI = (function () {
      function NUMCAT_PI() {

      };
      NUMCAT_PI.value = new NUMCAT_PI();
      return NUMCAT_PI;
  })();
  var NUMCAT_PF = (function () {
      function NUMCAT_PF() {

      };
      NUMCAT_PF.value = new NUMCAT_PF();
      return NUMCAT_PF;
  })();
  var NUMCAT_PO = (function () {
      function NUMCAT_PO() {

      };
      NUMCAT_PO.value = new NUMCAT_PO();
      return NUMCAT_PO;
  })();
  var NUMCAT_SM = (function () {
      function NUMCAT_SM() {

      };
      NUMCAT_SM.value = new NUMCAT_SM();
      return NUMCAT_SM;
  })();
  var NUMCAT_SC = (function () {
      function NUMCAT_SC() {

      };
      NUMCAT_SC.value = new NUMCAT_SC();
      return NUMCAT_SC;
  })();
  var NUMCAT_SK = (function () {
      function NUMCAT_SK() {

      };
      NUMCAT_SK.value = new NUMCAT_SK();
      return NUMCAT_SK;
  })();
  var NUMCAT_SO = (function () {
      function NUMCAT_SO() {

      };
      NUMCAT_SO.value = new NUMCAT_SO();
      return NUMCAT_SO;
  })();
  var NUMCAT_ZS = (function () {
      function NUMCAT_ZS() {

      };
      NUMCAT_ZS.value = new NUMCAT_ZS();
      return NUMCAT_ZS;
  })();
  var NUMCAT_ZL = (function () {
      function NUMCAT_ZL() {

      };
      NUMCAT_ZL.value = new NUMCAT_ZL();
      return NUMCAT_ZL;
  })();
  var NUMCAT_ZP = (function () {
      function NUMCAT_ZP() {

      };
      NUMCAT_ZP.value = new NUMCAT_ZP();
      return NUMCAT_ZP;
  })();
  var NUMCAT_CC = (function () {
      function NUMCAT_CC() {

      };
      NUMCAT_CC.value = new NUMCAT_CC();
      return NUMCAT_CC;
  })();
  var NUMCAT_CF = (function () {
      function NUMCAT_CF() {

      };
      NUMCAT_CF.value = new NUMCAT_CF();
      return NUMCAT_CF;
  })();
  var NUMCAT_CS = (function () {
      function NUMCAT_CS() {

      };
      NUMCAT_CS.value = new NUMCAT_CS();
      return NUMCAT_CS;
  })();
  var NUMCAT_CO = (function () {
      function NUMCAT_CO() {

      };
      NUMCAT_CO.value = new NUMCAT_CO();
      return NUMCAT_CO;
  })();
  var NUMCAT_CN = (function () {
      function NUMCAT_CN() {

      };
      NUMCAT_CN.value = new NUMCAT_CN();
      return NUMCAT_CN;
  })();
  var numSpaceBlocks = 8;
  var numLat1Blocks = 63;
  var numConvBlocks = 1230;
  var numBlocks = 2783;    
  var gencatZS = 2;
  var rule1 = {
      category: gencatZS,
      unicodeCat: NUMCAT_ZS.value,
      possible: 0,
      updist: 0,
      lowdist: 0,
      titledist: 0
  };
  var spacechars = [ {
      start: 32,
      length: 1,
      convRule: rule1
  }, {
      start: 160,
      length: 1,
      convRule: rule1
  }, {
      start: 5760,
      length: 1,
      convRule: rule1
  }, {
      start: 6158,
      length: 1,
      convRule: rule1
  }, {
      start: 8192,
      length: 11,
      convRule: rule1
  }, {
      start: 8239,
      length: 1,
      convRule: rule1
  }, {
      start: 8287,
      length: 1,
      convRule: rule1
  }, {
      start: 12288,
      length: 1,
      convRule: rule1
  } ];
  var gencatZP = 67108864;
  var rule140 = {
      category: gencatZP,
      unicodeCat: NUMCAT_ZP.value,
      possible: 0,
      updist: 0,
      lowdist: 0,
      titledist: 0
  };
  var gencatZL = 33554432;
  var rule139 = {
      category: gencatZL,
      unicodeCat: NUMCAT_ZL.value,
      possible: 0,
      updist: 0,
      lowdist: 0,
      titledist: 0
  };
  var gencatSO = 8192;
  var rule13 = {
      category: gencatSO,
      unicodeCat: NUMCAT_SO.value,
      possible: 0,
      updist: 0,
      lowdist: 0,
      titledist: 0
  };
  var rule148 = {
      category: gencatSO,
      unicodeCat: NUMCAT_SO.value,
      possible: 1,
      updist: 0,
      lowdist: 26,
      titledist: 0
  };
  var rule149 = {
      category: gencatSO,
      unicodeCat: NUMCAT_SO.value,
      possible: 1,
      updist: -26 | 0,
      lowdist: 0,
      titledist: -26 | 0
  };
  var gencatSM = 64;
  var rule6 = {
      category: gencatSM,
      unicodeCat: NUMCAT_SM.value,
      possible: 0,
      updist: 0,
      lowdist: 0,
      titledist: 0
  };
  var gencatSK = 1024;
  var rule10 = {
      category: gencatSK,
      unicodeCat: NUMCAT_SK.value,
      possible: 0,
      updist: 0,
      lowdist: 0,
      titledist: 0
  };
  var gencatSC = 8;
  var rule3 = {
      category: gencatSC,
      unicodeCat: NUMCAT_SC.value,
      possible: 0,
      updist: 0,
      lowdist: 0,
      titledist: 0
  };
  var gencatPS = 16;
  var rule4 = {
      category: gencatPS,
      unicodeCat: NUMCAT_PS.value,
      possible: 0,
      updist: 0,
      lowdist: 0,
      titledist: 0
  };
  var gencatPO = 4;
  var rule2 = {
      category: gencatPO,
      unicodeCat: NUMCAT_PO.value,
      possible: 0,
      updist: 0,
      lowdist: 0,
      titledist: 0
  };
  var gencatPI = 16384;
  var rule15 = {
      category: gencatPI,
      unicodeCat: NUMCAT_PI.value,
      possible: 0,
      updist: 0,
      lowdist: 0,
      titledist: 0
  };
  var gencatPF = 131072;
  var rule19 = {
      category: gencatPF,
      unicodeCat: NUMCAT_PF.value,
      possible: 0,
      updist: 0,
      lowdist: 0,
      titledist: 0
  };
  var gencatPE = 32;
  var rule5 = {
      category: gencatPE,
      unicodeCat: NUMCAT_PE.value,
      possible: 0,
      updist: 0,
      lowdist: 0,
      titledist: 0
  };
  var gencatPD = 128;
  var rule7 = {
      category: gencatPD,
      unicodeCat: NUMCAT_PD.value,
      possible: 0,
      updist: 0,
      lowdist: 0,
      titledist: 0
  };
  var gencatPC = 2048;
  var rule11 = {
      category: gencatPC,
      unicodeCat: NUMCAT_PC.value,
      possible: 0,
      updist: 0,
      lowdist: 0,
      titledist: 0
  };
  var gencatNO = 65536;
  var rule17 = {
      category: gencatNO,
      unicodeCat: NUMCAT_NO.value,
      possible: 0,
      updist: 0,
      lowdist: 0,
      titledist: 0
  };
  var gencatNL = 16777216;
  var rule116 = {
      category: gencatNL,
      unicodeCat: NUMCAT_NL.value,
      possible: 0,
      updist: 0,
      lowdist: 0,
      titledist: 0
  };
  var rule146 = {
      category: gencatNL,
      unicodeCat: NUMCAT_NL.value,
      possible: 1,
      updist: 0,
      lowdist: 16,
      titledist: 0
  };
  var rule147 = {
      category: gencatNL,
      unicodeCat: NUMCAT_NL.value,
      possible: 1,
      updist: -16 | 0,
      lowdist: 0,
      titledist: -16 | 0
  };
  var gencatND = 256;
  var rule8 = {
      category: gencatND,
      unicodeCat: NUMCAT_ND.value,
      possible: 0,
      updist: 0,
      lowdist: 0,
      titledist: 0
  };
  var gencatMN = 2097152;
  var rule84 = {
      category: gencatMN,
      unicodeCat: NUMCAT_MN.value,
      possible: 0,
      updist: 0,
      lowdist: 0,
      titledist: 0
  };
  var rule85 = {
      category: gencatMN,
      unicodeCat: NUMCAT_MN.value,
      possible: 1,
      updist: 84,
      lowdist: 0,
      titledist: 84
  };
  var gencatME = 4194304;
  var rule109 = {
      category: gencatME,
      unicodeCat: NUMCAT_ME.value,
      possible: 0,
      updist: 0,
      lowdist: 0,
      titledist: 0
  };
  var gencatMC = 8388608;
  var rule114 = {
      category: gencatMC,
      unicodeCat: NUMCAT_MC.value,
      possible: 0,
      updist: 0,
      lowdist: 0,
      titledist: 0
  };
  var gencatLU = 512;
  var nullrule = {
      category: gencatLU,
      unicodeCat: NUMCAT_CN.value,
      possible: 0,
      updist: 0,
      lowdist: 0,
      titledist: 0
  };
  var rule105 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -60 | 0,
      titledist: 0
  };
  var rule107 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -7 | 0,
      titledist: 0
  };
  var rule108 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 80,
      titledist: 0
  };
  var rule110 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 15,
      titledist: 0
  };
  var rule112 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 48,
      titledist: 0
  };
  var rule115 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 7264,
      titledist: 0
  };
  var rule120 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -7615 | 0,
      titledist: 0
  };
  var rule122 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -8 | 0,
      titledist: 0
  };
  var rule131 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -74 | 0,
      titledist: 0
  };
  var rule134 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -86 | 0,
      titledist: 0
  };
  var rule135 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -100 | 0,
      titledist: 0
  };
  var rule136 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -112 | 0,
      titledist: 0
  };
  var rule137 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -128 | 0,
      titledist: 0
  };
  var rule138 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -126 | 0,
      titledist: 0
  };
  var rule141 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -7517 | 0,
      titledist: 0
  };
  var rule142 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -8383 | 0,
      titledist: 0
  };
  var rule143 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -8262 | 0,
      titledist: 0
  };
  var rule144 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 28,
      titledist: 0
  };
  var rule150 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -10743 | 0,
      titledist: 0
  };
  var rule151 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -3814 | 0,
      titledist: 0
  };
  var rule152 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -10727 | 0,
      titledist: 0
  };
  var rule155 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -10780 | 0,
      titledist: 0
  };
  var rule156 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -10749 | 0,
      titledist: 0
  };
  var rule157 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -10783 | 0,
      titledist: 0
  };
  var rule158 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -10782 | 0,
      titledist: 0
  };
  var rule159 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -10815 | 0,
      titledist: 0
  };
  var rule161 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -35332 | 0,
      titledist: 0
  };
  var rule162 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -42280 | 0,
      titledist: 0
  };
  var rule165 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 40,
      titledist: 0
  };
  var rule21 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 1,
      titledist: 0
  };
  var rule23 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -199 | 0,
      titledist: 0
  };
  var rule25 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -121 | 0,
      titledist: 0
  };
  var rule28 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 210,
      titledist: 0
  };
  var rule29 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 206,
      titledist: 0
  };
  var rule30 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 205,
      titledist: 0
  };
  var rule31 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 79,
      titledist: 0
  };
  var rule32 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 202,
      titledist: 0
  };
  var rule33 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 203,
      titledist: 0
  };
  var rule34 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 207,
      titledist: 0
  };
  var rule36 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 211,
      titledist: 0
  };
  var rule37 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 209,
      titledist: 0
  };
  var rule39 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 213,
      titledist: 0
  };
  var rule41 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 214,
      titledist: 0
  };
  var rule42 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 218,
      titledist: 0
  };
  var rule43 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 217,
      titledist: 0
  };
  var rule44 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 219,
      titledist: 0
  };
  var rule47 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 2,
      titledist: 1
  };
  var rule51 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -97 | 0,
      titledist: 0
  };
  var rule52 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -56 | 0,
      titledist: 0
  };
  var rule53 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -130 | 0,
      titledist: 0
  };
  var rule54 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 10795,
      titledist: 0
  };
  var rule55 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -163 | 0,
      titledist: 0
  };
  var rule56 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 10792,
      titledist: 0
  };
  var rule58 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -195 | 0,
      titledist: 0
  };
  var rule59 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 69,
      titledist: 0
  };
  var rule60 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 71,
      titledist: 0
  };
  var rule86 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 38,
      titledist: 0
  };
  var rule87 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 37,
      titledist: 0
  };
  var rule88 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 64,
      titledist: 0
  };
  var rule89 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 63,
      titledist: 0
  };
  var rule9 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 32,
      titledist: 0
  };
  var rule95 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 8,
      titledist: 0
  };
  var rule98 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 0,
      updist: 0,
      lowdist: 0,
      titledist: 0
  };
  var gencatLT = 524288;
  var rule129 = {
      category: gencatLT,
      unicodeCat: NUMCAT_LT.value,
      possible: 1,
      updist: 0,
      lowdist: -8 | 0,
      titledist: 0
  };
  var rule132 = {
      category: gencatLT,
      unicodeCat: NUMCAT_LT.value,
      possible: 1,
      updist: 0,
      lowdist: -9 | 0,
      titledist: 0
  };
  var rule48 = {
      category: gencatLT,
      unicodeCat: NUMCAT_LT.value,
      possible: 1,
      updist: -1 | 0,
      lowdist: 1,
      titledist: 0
  };
  var gencatLO = 262144;
  var rule45 = {
      category: gencatLO,
      unicodeCat: NUMCAT_LO.value,
      possible: 0,
      updist: 0,
      lowdist: 0,
      titledist: 0
  };
  var gencatLM = 1048576;
  var rule83 = {
      category: gencatLM,
      unicodeCat: NUMCAT_LM.value,
      possible: 0,
      updist: 0,
      lowdist: 0,
      titledist: 0
  };
  var gencatLL = 4096;
  var rule100 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -54 | 0,
      lowdist: 0,
      titledist: -54 | 0
  };
  var rule101 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -8 | 0,
      lowdist: 0,
      titledist: -8 | 0
  };
  var rule102 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -86 | 0,
      lowdist: 0,
      titledist: -86 | 0
  };
  var rule103 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -80 | 0,
      lowdist: 0,
      titledist: -80 | 0
  };
  var rule104 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 7,
      lowdist: 0,
      titledist: 7
  };
  var rule106 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -96 | 0,
      lowdist: 0,
      titledist: -96 | 0
  };
  var rule111 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -15 | 0,
      lowdist: 0,
      titledist: -15 | 0
  };
  var rule113 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -48 | 0,
      lowdist: 0,
      titledist: -48 | 0
  };
  var rule117 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 35332,
      lowdist: 0,
      titledist: 35332
  };
  var rule118 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 3814,
      lowdist: 0,
      titledist: 3814
  };
  var rule119 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -59 | 0,
      lowdist: 0,
      titledist: -59 | 0
  };
  var rule12 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -32 | 0,
      lowdist: 0,
      titledist: -32 | 0
  };
  var rule121 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 8,
      lowdist: 0,
      titledist: 8
  };
  var rule123 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 74,
      lowdist: 0,
      titledist: 74
  };
  var rule124 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 86,
      lowdist: 0,
      titledist: 86
  };
  var rule125 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 100,
      lowdist: 0,
      titledist: 100
  };
  var rule126 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 128,
      lowdist: 0,
      titledist: 128
  };
  var rule127 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 112,
      lowdist: 0,
      titledist: 112
  };
  var rule128 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 126,
      lowdist: 0,
      titledist: 126
  };
  var rule130 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 9,
      lowdist: 0,
      titledist: 9
  };
  var rule133 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -7205 | 0,
      lowdist: 0,
      titledist: -7205 | 0
  };
  var rule14 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 0,
      updist: 0,
      lowdist: 0,
      titledist: 0
  };
  var rule145 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -28 | 0,
      lowdist: 0,
      titledist: -28 | 0
  };
  var rule153 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -10795 | 0,
      lowdist: 0,
      titledist: -10795 | 0
  };
  var rule154 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -10792 | 0,
      lowdist: 0,
      titledist: -10792 | 0
  };
  var rule160 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -7264 | 0,
      lowdist: 0,
      titledist: -7264 | 0
  };
  var rule166 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -40 | 0,
      lowdist: 0,
      titledist: -40 | 0
  };
  var rule18 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 743,
      lowdist: 0,
      titledist: 743
  };
  var rule20 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 121,
      lowdist: 0,
      titledist: 121
  };
  var rule22 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -1 | 0,
      lowdist: 0,
      titledist: -1 | 0
  };
  var rule24 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -232 | 0,
      lowdist: 0,
      titledist: -232 | 0
  };
  var rule26 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -300 | 0,
      lowdist: 0,
      titledist: -300 | 0
  };
  var rule27 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 195,
      lowdist: 0,
      titledist: 195
  };
  var rule35 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 97,
      lowdist: 0,
      titledist: 97
  };
  var rule38 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 163,
      lowdist: 0,
      titledist: 163
  };
  var rule40 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 130,
      lowdist: 0,
      titledist: 130
  };
  var rule46 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 56,
      lowdist: 0,
      titledist: 56
  };
  var rule49 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -2 | 0,
      lowdist: 0,
      titledist: -1 | 0
  };
  var rule50 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -79 | 0,
      lowdist: 0,
      titledist: -79 | 0
  };
  var rule57 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 10815,
      lowdist: 0,
      titledist: 10815
  };
  var rule61 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 10783,
      lowdist: 0,
      titledist: 10783
  };
  var rule62 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 10780,
      lowdist: 0,
      titledist: 10780
  };
  var rule63 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 10782,
      lowdist: 0,
      titledist: 10782
  };
  var rule64 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -210 | 0,
      lowdist: 0,
      titledist: -210 | 0
  };
  var rule65 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -206 | 0,
      lowdist: 0,
      titledist: -206 | 0
  };
  var rule66 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -205 | 0,
      lowdist: 0,
      titledist: -205 | 0
  };
  var rule67 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -202 | 0,
      lowdist: 0,
      titledist: -202 | 0
  };
  var rule68 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -203 | 0,
      lowdist: 0,
      titledist: -203 | 0
  };
  var rule69 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -207 | 0,
      lowdist: 0,
      titledist: -207 | 0
  };
  var rule70 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 42280,
      lowdist: 0,
      titledist: 42280
  };
  var rule71 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -209 | 0,
      lowdist: 0,
      titledist: -209 | 0
  };
  var rule72 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -211 | 0,
      lowdist: 0,
      titledist: -211 | 0
  };
  var rule73 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 10743,
      lowdist: 0,
      titledist: 10743
  };
  var rule74 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 10749,
      lowdist: 0,
      titledist: 10749
  };
  var rule75 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -213 | 0,
      lowdist: 0,
      titledist: -213 | 0
  };
  var rule76 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -214 | 0,
      lowdist: 0,
      titledist: -214 | 0
  };
  var rule77 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 10727,
      lowdist: 0,
      titledist: 10727
  };
  var rule78 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -218 | 0,
      lowdist: 0,
      titledist: -218 | 0
  };
  var rule79 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -69 | 0,
      lowdist: 0,
      titledist: -69 | 0
  };
  var rule80 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -217 | 0,
      lowdist: 0,
      titledist: -217 | 0
  };
  var rule81 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -71 | 0,
      lowdist: 0,
      titledist: -71 | 0
  };
  var rule82 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -219 | 0,
      lowdist: 0,
      titledist: -219 | 0
  };
  var rule90 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -38 | 0,
      lowdist: 0,
      titledist: -38 | 0
  };
  var rule91 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -37 | 0,
      lowdist: 0,
      titledist: -37 | 0
  };
  var rule92 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -31 | 0,
      lowdist: 0,
      titledist: -31 | 0
  };
  var rule93 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -64 | 0,
      lowdist: 0,
      titledist: -64 | 0
  };
  var rule94 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -63 | 0,
      lowdist: 0,
      titledist: -63 | 0
  };
  var rule96 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -62 | 0,
      lowdist: 0,
      titledist: -62 | 0
  };
  var rule97 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -57 | 0,
      lowdist: 0,
      titledist: -57 | 0
  };
  var rule99 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -47 | 0,
      lowdist: 0,
      titledist: -47 | 0
  };
  var gencatCS = 134217728;
  var rule163 = {
      category: gencatCS,
      unicodeCat: NUMCAT_CS.value,
      possible: 0,
      updist: 0,
      lowdist: 0,
      titledist: 0
  };
  var gencatCO = 268435456;
  var rule164 = {
      category: gencatCO,
      unicodeCat: NUMCAT_CO.value,
      possible: 0,
      updist: 0,
      lowdist: 0,
      titledist: 0
  };
  var gencatCF = 32768;
  var rule16 = {
      category: gencatCF,
      unicodeCat: NUMCAT_CF.value,
      possible: 0,
      updist: 0,
      lowdist: 0,
      titledist: 0
  };
  var gencatCC = 1;
  var rule0 = {
      category: gencatCC,
      unicodeCat: NUMCAT_CC.value,
      possible: 0,
      updist: 0,
      lowdist: 0,
      titledist: 0
  };
  var convchars = [ {
      start: 65,
      length: 26,
      convRule: rule9
  }, {
      start: 97,
      length: 26,
      convRule: rule12
  }, {
      start: 181,
      length: 1,
      convRule: rule18
  }, {
      start: 192,
      length: 23,
      convRule: rule9
  }, {
      start: 216,
      length: 7,
      convRule: rule9
  }, {
      start: 224,
      length: 23,
      convRule: rule12
  }, {
      start: 248,
      length: 7,
      convRule: rule12
  }, {
      start: 255,
      length: 1,
      convRule: rule20
  }, {
      start: 256,
      length: 1,
      convRule: rule21
  }, {
      start: 257,
      length: 1,
      convRule: rule22
  }, {
      start: 258,
      length: 1,
      convRule: rule21
  }, {
      start: 259,
      length: 1,
      convRule: rule22
  }, {
      start: 260,
      length: 1,
      convRule: rule21
  }, {
      start: 261,
      length: 1,
      convRule: rule22
  }, {
      start: 262,
      length: 1,
      convRule: rule21
  }, {
      start: 263,
      length: 1,
      convRule: rule22
  }, {
      start: 264,
      length: 1,
      convRule: rule21
  }, {
      start: 265,
      length: 1,
      convRule: rule22
  }, {
      start: 266,
      length: 1,
      convRule: rule21
  }, {
      start: 267,
      length: 1,
      convRule: rule22
  }, {
      start: 268,
      length: 1,
      convRule: rule21
  }, {
      start: 269,
      length: 1,
      convRule: rule22
  }, {
      start: 270,
      length: 1,
      convRule: rule21
  }, {
      start: 271,
      length: 1,
      convRule: rule22
  }, {
      start: 272,
      length: 1,
      convRule: rule21
  }, {
      start: 273,
      length: 1,
      convRule: rule22
  }, {
      start: 274,
      length: 1,
      convRule: rule21
  }, {
      start: 275,
      length: 1,
      convRule: rule22
  }, {
      start: 276,
      length: 1,
      convRule: rule21
  }, {
      start: 277,
      length: 1,
      convRule: rule22
  }, {
      start: 278,
      length: 1,
      convRule: rule21
  }, {
      start: 279,
      length: 1,
      convRule: rule22
  }, {
      start: 280,
      length: 1,
      convRule: rule21
  }, {
      start: 281,
      length: 1,
      convRule: rule22
  }, {
      start: 282,
      length: 1,
      convRule: rule21
  }, {
      start: 283,
      length: 1,
      convRule: rule22
  }, {
      start: 284,
      length: 1,
      convRule: rule21
  }, {
      start: 285,
      length: 1,
      convRule: rule22
  }, {
      start: 286,
      length: 1,
      convRule: rule21
  }, {
      start: 287,
      length: 1,
      convRule: rule22
  }, {
      start: 288,
      length: 1,
      convRule: rule21
  }, {
      start: 289,
      length: 1,
      convRule: rule22
  }, {
      start: 290,
      length: 1,
      convRule: rule21
  }, {
      start: 291,
      length: 1,
      convRule: rule22
  }, {
      start: 292,
      length: 1,
      convRule: rule21
  }, {
      start: 293,
      length: 1,
      convRule: rule22
  }, {
      start: 294,
      length: 1,
      convRule: rule21
  }, {
      start: 295,
      length: 1,
      convRule: rule22
  }, {
      start: 296,
      length: 1,
      convRule: rule21
  }, {
      start: 297,
      length: 1,
      convRule: rule22
  }, {
      start: 298,
      length: 1,
      convRule: rule21
  }, {
      start: 299,
      length: 1,
      convRule: rule22
  }, {
      start: 300,
      length: 1,
      convRule: rule21
  }, {
      start: 301,
      length: 1,
      convRule: rule22
  }, {
      start: 302,
      length: 1,
      convRule: rule21
  }, {
      start: 303,
      length: 1,
      convRule: rule22
  }, {
      start: 304,
      length: 1,
      convRule: rule23
  }, {
      start: 305,
      length: 1,
      convRule: rule24
  }, {
      start: 306,
      length: 1,
      convRule: rule21
  }, {
      start: 307,
      length: 1,
      convRule: rule22
  }, {
      start: 308,
      length: 1,
      convRule: rule21
  }, {
      start: 309,
      length: 1,
      convRule: rule22
  }, {
      start: 310,
      length: 1,
      convRule: rule21
  }, {
      start: 311,
      length: 1,
      convRule: rule22
  }, {
      start: 313,
      length: 1,
      convRule: rule21
  }, {
      start: 314,
      length: 1,
      convRule: rule22
  }, {
      start: 315,
      length: 1,
      convRule: rule21
  }, {
      start: 316,
      length: 1,
      convRule: rule22
  }, {
      start: 317,
      length: 1,
      convRule: rule21
  }, {
      start: 318,
      length: 1,
      convRule: rule22
  }, {
      start: 319,
      length: 1,
      convRule: rule21
  }, {
      start: 320,
      length: 1,
      convRule: rule22
  }, {
      start: 321,
      length: 1,
      convRule: rule21
  }, {
      start: 322,
      length: 1,
      convRule: rule22
  }, {
      start: 323,
      length: 1,
      convRule: rule21
  }, {
      start: 324,
      length: 1,
      convRule: rule22
  }, {
      start: 325,
      length: 1,
      convRule: rule21
  }, {
      start: 326,
      length: 1,
      convRule: rule22
  }, {
      start: 327,
      length: 1,
      convRule: rule21
  }, {
      start: 328,
      length: 1,
      convRule: rule22
  }, {
      start: 330,
      length: 1,
      convRule: rule21
  }, {
      start: 331,
      length: 1,
      convRule: rule22
  }, {
      start: 332,
      length: 1,
      convRule: rule21
  }, {
      start: 333,
      length: 1,
      convRule: rule22
  }, {
      start: 334,
      length: 1,
      convRule: rule21
  }, {
      start: 335,
      length: 1,
      convRule: rule22
  }, {
      start: 336,
      length: 1,
      convRule: rule21
  }, {
      start: 337,
      length: 1,
      convRule: rule22
  }, {
      start: 338,
      length: 1,
      convRule: rule21
  }, {
      start: 339,
      length: 1,
      convRule: rule22
  }, {
      start: 340,
      length: 1,
      convRule: rule21
  }, {
      start: 341,
      length: 1,
      convRule: rule22
  }, {
      start: 342,
      length: 1,
      convRule: rule21
  }, {
      start: 343,
      length: 1,
      convRule: rule22
  }, {
      start: 344,
      length: 1,
      convRule: rule21
  }, {
      start: 345,
      length: 1,
      convRule: rule22
  }, {
      start: 346,
      length: 1,
      convRule: rule21
  }, {
      start: 347,
      length: 1,
      convRule: rule22
  }, {
      start: 348,
      length: 1,
      convRule: rule21
  }, {
      start: 349,
      length: 1,
      convRule: rule22
  }, {
      start: 350,
      length: 1,
      convRule: rule21
  }, {
      start: 351,
      length: 1,
      convRule: rule22
  }, {
      start: 352,
      length: 1,
      convRule: rule21
  }, {
      start: 353,
      length: 1,
      convRule: rule22
  }, {
      start: 354,
      length: 1,
      convRule: rule21
  }, {
      start: 355,
      length: 1,
      convRule: rule22
  }, {
      start: 356,
      length: 1,
      convRule: rule21
  }, {
      start: 357,
      length: 1,
      convRule: rule22
  }, {
      start: 358,
      length: 1,
      convRule: rule21
  }, {
      start: 359,
      length: 1,
      convRule: rule22
  }, {
      start: 360,
      length: 1,
      convRule: rule21
  }, {
      start: 361,
      length: 1,
      convRule: rule22
  }, {
      start: 362,
      length: 1,
      convRule: rule21
  }, {
      start: 363,
      length: 1,
      convRule: rule22
  }, {
      start: 364,
      length: 1,
      convRule: rule21
  }, {
      start: 365,
      length: 1,
      convRule: rule22
  }, {
      start: 366,
      length: 1,
      convRule: rule21
  }, {
      start: 367,
      length: 1,
      convRule: rule22
  }, {
      start: 368,
      length: 1,
      convRule: rule21
  }, {
      start: 369,
      length: 1,
      convRule: rule22
  }, {
      start: 370,
      length: 1,
      convRule: rule21
  }, {
      start: 371,
      length: 1,
      convRule: rule22
  }, {
      start: 372,
      length: 1,
      convRule: rule21
  }, {
      start: 373,
      length: 1,
      convRule: rule22
  }, {
      start: 374,
      length: 1,
      convRule: rule21
  }, {
      start: 375,
      length: 1,
      convRule: rule22
  }, {
      start: 376,
      length: 1,
      convRule: rule25
  }, {
      start: 377,
      length: 1,
      convRule: rule21
  }, {
      start: 378,
      length: 1,
      convRule: rule22
  }, {
      start: 379,
      length: 1,
      convRule: rule21
  }, {
      start: 380,
      length: 1,
      convRule: rule22
  }, {
      start: 381,
      length: 1,
      convRule: rule21
  }, {
      start: 382,
      length: 1,
      convRule: rule22
  }, {
      start: 383,
      length: 1,
      convRule: rule26
  }, {
      start: 384,
      length: 1,
      convRule: rule27
  }, {
      start: 385,
      length: 1,
      convRule: rule28
  }, {
      start: 386,
      length: 1,
      convRule: rule21
  }, {
      start: 387,
      length: 1,
      convRule: rule22
  }, {
      start: 388,
      length: 1,
      convRule: rule21
  }, {
      start: 389,
      length: 1,
      convRule: rule22
  }, {
      start: 390,
      length: 1,
      convRule: rule29
  }, {
      start: 391,
      length: 1,
      convRule: rule21
  }, {
      start: 392,
      length: 1,
      convRule: rule22
  }, {
      start: 393,
      length: 2,
      convRule: rule30
  }, {
      start: 395,
      length: 1,
      convRule: rule21
  }, {
      start: 396,
      length: 1,
      convRule: rule22
  }, {
      start: 398,
      length: 1,
      convRule: rule31
  }, {
      start: 399,
      length: 1,
      convRule: rule32
  }, {
      start: 400,
      length: 1,
      convRule: rule33
  }, {
      start: 401,
      length: 1,
      convRule: rule21
  }, {
      start: 402,
      length: 1,
      convRule: rule22
  }, {
      start: 403,
      length: 1,
      convRule: rule30
  }, {
      start: 404,
      length: 1,
      convRule: rule34
  }, {
      start: 405,
      length: 1,
      convRule: rule35
  }, {
      start: 406,
      length: 1,
      convRule: rule36
  }, {
      start: 407,
      length: 1,
      convRule: rule37
  }, {
      start: 408,
      length: 1,
      convRule: rule21
  }, {
      start: 409,
      length: 1,
      convRule: rule22
  }, {
      start: 410,
      length: 1,
      convRule: rule38
  }, {
      start: 412,
      length: 1,
      convRule: rule36
  }, {
      start: 413,
      length: 1,
      convRule: rule39
  }, {
      start: 414,
      length: 1,
      convRule: rule40
  }, {
      start: 415,
      length: 1,
      convRule: rule41
  }, {
      start: 416,
      length: 1,
      convRule: rule21
  }, {
      start: 417,
      length: 1,
      convRule: rule22
  }, {
      start: 418,
      length: 1,
      convRule: rule21
  }, {
      start: 419,
      length: 1,
      convRule: rule22
  }, {
      start: 420,
      length: 1,
      convRule: rule21
  }, {
      start: 421,
      length: 1,
      convRule: rule22
  }, {
      start: 422,
      length: 1,
      convRule: rule42
  }, {
      start: 423,
      length: 1,
      convRule: rule21
  }, {
      start: 424,
      length: 1,
      convRule: rule22
  }, {
      start: 425,
      length: 1,
      convRule: rule42
  }, {
      start: 428,
      length: 1,
      convRule: rule21
  }, {
      start: 429,
      length: 1,
      convRule: rule22
  }, {
      start: 430,
      length: 1,
      convRule: rule42
  }, {
      start: 431,
      length: 1,
      convRule: rule21
  }, {
      start: 432,
      length: 1,
      convRule: rule22
  }, {
      start: 433,
      length: 2,
      convRule: rule43
  }, {
      start: 435,
      length: 1,
      convRule: rule21
  }, {
      start: 436,
      length: 1,
      convRule: rule22
  }, {
      start: 437,
      length: 1,
      convRule: rule21
  }, {
      start: 438,
      length: 1,
      convRule: rule22
  }, {
      start: 439,
      length: 1,
      convRule: rule44
  }, {
      start: 440,
      length: 1,
      convRule: rule21
  }, {
      start: 441,
      length: 1,
      convRule: rule22
  }, {
      start: 444,
      length: 1,
      convRule: rule21
  }, {
      start: 445,
      length: 1,
      convRule: rule22
  }, {
      start: 447,
      length: 1,
      convRule: rule46
  }, {
      start: 452,
      length: 1,
      convRule: rule47
  }, {
      start: 453,
      length: 1,
      convRule: rule48
  }, {
      start: 454,
      length: 1,
      convRule: rule49
  }, {
      start: 455,
      length: 1,
      convRule: rule47
  }, {
      start: 456,
      length: 1,
      convRule: rule48
  }, {
      start: 457,
      length: 1,
      convRule: rule49
  }, {
      start: 458,
      length: 1,
      convRule: rule47
  }, {
      start: 459,
      length: 1,
      convRule: rule48
  }, {
      start: 460,
      length: 1,
      convRule: rule49
  }, {
      start: 461,
      length: 1,
      convRule: rule21
  }, {
      start: 462,
      length: 1,
      convRule: rule22
  }, {
      start: 463,
      length: 1,
      convRule: rule21
  }, {
      start: 464,
      length: 1,
      convRule: rule22
  }, {
      start: 465,
      length: 1,
      convRule: rule21
  }, {
      start: 466,
      length: 1,
      convRule: rule22
  }, {
      start: 467,
      length: 1,
      convRule: rule21
  }, {
      start: 468,
      length: 1,
      convRule: rule22
  }, {
      start: 469,
      length: 1,
      convRule: rule21
  }, {
      start: 470,
      length: 1,
      convRule: rule22
  }, {
      start: 471,
      length: 1,
      convRule: rule21
  }, {
      start: 472,
      length: 1,
      convRule: rule22
  }, {
      start: 473,
      length: 1,
      convRule: rule21
  }, {
      start: 474,
      length: 1,
      convRule: rule22
  }, {
      start: 475,
      length: 1,
      convRule: rule21
  }, {
      start: 476,
      length: 1,
      convRule: rule22
  }, {
      start: 477,
      length: 1,
      convRule: rule50
  }, {
      start: 478,
      length: 1,
      convRule: rule21
  }, {
      start: 479,
      length: 1,
      convRule: rule22
  }, {
      start: 480,
      length: 1,
      convRule: rule21
  }, {
      start: 481,
      length: 1,
      convRule: rule22
  }, {
      start: 482,
      length: 1,
      convRule: rule21
  }, {
      start: 483,
      length: 1,
      convRule: rule22
  }, {
      start: 484,
      length: 1,
      convRule: rule21
  }, {
      start: 485,
      length: 1,
      convRule: rule22
  }, {
      start: 486,
      length: 1,
      convRule: rule21
  }, {
      start: 487,
      length: 1,
      convRule: rule22
  }, {
      start: 488,
      length: 1,
      convRule: rule21
  }, {
      start: 489,
      length: 1,
      convRule: rule22
  }, {
      start: 490,
      length: 1,
      convRule: rule21
  }, {
      start: 491,
      length: 1,
      convRule: rule22
  }, {
      start: 492,
      length: 1,
      convRule: rule21
  }, {
      start: 493,
      length: 1,
      convRule: rule22
  }, {
      start: 494,
      length: 1,
      convRule: rule21
  }, {
      start: 495,
      length: 1,
      convRule: rule22
  }, {
      start: 497,
      length: 1,
      convRule: rule47
  }, {
      start: 498,
      length: 1,
      convRule: rule48
  }, {
      start: 499,
      length: 1,
      convRule: rule49
  }, {
      start: 500,
      length: 1,
      convRule: rule21
  }, {
      start: 501,
      length: 1,
      convRule: rule22
  }, {
      start: 502,
      length: 1,
      convRule: rule51
  }, {
      start: 503,
      length: 1,
      convRule: rule52
  }, {
      start: 504,
      length: 1,
      convRule: rule21
  }, {
      start: 505,
      length: 1,
      convRule: rule22
  }, {
      start: 506,
      length: 1,
      convRule: rule21
  }, {
      start: 507,
      length: 1,
      convRule: rule22
  }, {
      start: 508,
      length: 1,
      convRule: rule21
  }, {
      start: 509,
      length: 1,
      convRule: rule22
  }, {
      start: 510,
      length: 1,
      convRule: rule21
  }, {
      start: 511,
      length: 1,
      convRule: rule22
  }, {
      start: 512,
      length: 1,
      convRule: rule21
  }, {
      start: 513,
      length: 1,
      convRule: rule22
  }, {
      start: 514,
      length: 1,
      convRule: rule21
  }, {
      start: 515,
      length: 1,
      convRule: rule22
  }, {
      start: 516,
      length: 1,
      convRule: rule21
  }, {
      start: 517,
      length: 1,
      convRule: rule22
  }, {
      start: 518,
      length: 1,
      convRule: rule21
  }, {
      start: 519,
      length: 1,
      convRule: rule22
  }, {
      start: 520,
      length: 1,
      convRule: rule21
  }, {
      start: 521,
      length: 1,
      convRule: rule22
  }, {
      start: 522,
      length: 1,
      convRule: rule21
  }, {
      start: 523,
      length: 1,
      convRule: rule22
  }, {
      start: 524,
      length: 1,
      convRule: rule21
  }, {
      start: 525,
      length: 1,
      convRule: rule22
  }, {
      start: 526,
      length: 1,
      convRule: rule21
  }, {
      start: 527,
      length: 1,
      convRule: rule22
  }, {
      start: 528,
      length: 1,
      convRule: rule21
  }, {
      start: 529,
      length: 1,
      convRule: rule22
  }, {
      start: 530,
      length: 1,
      convRule: rule21
  }, {
      start: 531,
      length: 1,
      convRule: rule22
  }, {
      start: 532,
      length: 1,
      convRule: rule21
  }, {
      start: 533,
      length: 1,
      convRule: rule22
  }, {
      start: 534,
      length: 1,
      convRule: rule21
  }, {
      start: 535,
      length: 1,
      convRule: rule22
  }, {
      start: 536,
      length: 1,
      convRule: rule21
  }, {
      start: 537,
      length: 1,
      convRule: rule22
  }, {
      start: 538,
      length: 1,
      convRule: rule21
  }, {
      start: 539,
      length: 1,
      convRule: rule22
  }, {
      start: 540,
      length: 1,
      convRule: rule21
  }, {
      start: 541,
      length: 1,
      convRule: rule22
  }, {
      start: 542,
      length: 1,
      convRule: rule21
  }, {
      start: 543,
      length: 1,
      convRule: rule22
  }, {
      start: 544,
      length: 1,
      convRule: rule53
  }, {
      start: 546,
      length: 1,
      convRule: rule21
  }, {
      start: 547,
      length: 1,
      convRule: rule22
  }, {
      start: 548,
      length: 1,
      convRule: rule21
  }, {
      start: 549,
      length: 1,
      convRule: rule22
  }, {
      start: 550,
      length: 1,
      convRule: rule21
  }, {
      start: 551,
      length: 1,
      convRule: rule22
  }, {
      start: 552,
      length: 1,
      convRule: rule21
  }, {
      start: 553,
      length: 1,
      convRule: rule22
  }, {
      start: 554,
      length: 1,
      convRule: rule21
  }, {
      start: 555,
      length: 1,
      convRule: rule22
  }, {
      start: 556,
      length: 1,
      convRule: rule21
  }, {
      start: 557,
      length: 1,
      convRule: rule22
  }, {
      start: 558,
      length: 1,
      convRule: rule21
  }, {
      start: 559,
      length: 1,
      convRule: rule22
  }, {
      start: 560,
      length: 1,
      convRule: rule21
  }, {
      start: 561,
      length: 1,
      convRule: rule22
  }, {
      start: 562,
      length: 1,
      convRule: rule21
  }, {
      start: 563,
      length: 1,
      convRule: rule22
  }, {
      start: 570,
      length: 1,
      convRule: rule54
  }, {
      start: 571,
      length: 1,
      convRule: rule21
  }, {
      start: 572,
      length: 1,
      convRule: rule22
  }, {
      start: 573,
      length: 1,
      convRule: rule55
  }, {
      start: 574,
      length: 1,
      convRule: rule56
  }, {
      start: 575,
      length: 2,
      convRule: rule57
  }, {
      start: 577,
      length: 1,
      convRule: rule21
  }, {
      start: 578,
      length: 1,
      convRule: rule22
  }, {
      start: 579,
      length: 1,
      convRule: rule58
  }, {
      start: 580,
      length: 1,
      convRule: rule59
  }, {
      start: 581,
      length: 1,
      convRule: rule60
  }, {
      start: 582,
      length: 1,
      convRule: rule21
  }, {
      start: 583,
      length: 1,
      convRule: rule22
  }, {
      start: 584,
      length: 1,
      convRule: rule21
  }, {
      start: 585,
      length: 1,
      convRule: rule22
  }, {
      start: 586,
      length: 1,
      convRule: rule21
  }, {
      start: 587,
      length: 1,
      convRule: rule22
  }, {
      start: 588,
      length: 1,
      convRule: rule21
  }, {
      start: 589,
      length: 1,
      convRule: rule22
  }, {
      start: 590,
      length: 1,
      convRule: rule21
  }, {
      start: 591,
      length: 1,
      convRule: rule22
  }, {
      start: 592,
      length: 1,
      convRule: rule61
  }, {
      start: 593,
      length: 1,
      convRule: rule62
  }, {
      start: 594,
      length: 1,
      convRule: rule63
  }, {
      start: 595,
      length: 1,
      convRule: rule64
  }, {
      start: 596,
      length: 1,
      convRule: rule65
  }, {
      start: 598,
      length: 2,
      convRule: rule66
  }, {
      start: 601,
      length: 1,
      convRule: rule67
  }, {
      start: 603,
      length: 1,
      convRule: rule68
  }, {
      start: 608,
      length: 1,
      convRule: rule66
  }, {
      start: 611,
      length: 1,
      convRule: rule69
  }, {
      start: 613,
      length: 1,
      convRule: rule70
  }, {
      start: 616,
      length: 1,
      convRule: rule71
  }, {
      start: 617,
      length: 1,
      convRule: rule72
  }, {
      start: 619,
      length: 1,
      convRule: rule73
  }, {
      start: 623,
      length: 1,
      convRule: rule72
  }, {
      start: 625,
      length: 1,
      convRule: rule74
  }, {
      start: 626,
      length: 1,
      convRule: rule75
  }, {
      start: 629,
      length: 1,
      convRule: rule76
  }, {
      start: 637,
      length: 1,
      convRule: rule77
  }, {
      start: 640,
      length: 1,
      convRule: rule78
  }, {
      start: 643,
      length: 1,
      convRule: rule78
  }, {
      start: 648,
      length: 1,
      convRule: rule78
  }, {
      start: 649,
      length: 1,
      convRule: rule79
  }, {
      start: 650,
      length: 2,
      convRule: rule80
  }, {
      start: 652,
      length: 1,
      convRule: rule81
  }, {
      start: 658,
      length: 1,
      convRule: rule82
  }, {
      start: 837,
      length: 1,
      convRule: rule85
  }, {
      start: 880,
      length: 1,
      convRule: rule21
  }, {
      start: 881,
      length: 1,
      convRule: rule22
  }, {
      start: 882,
      length: 1,
      convRule: rule21
  }, {
      start: 883,
      length: 1,
      convRule: rule22
  }, {
      start: 886,
      length: 1,
      convRule: rule21
  }, {
      start: 887,
      length: 1,
      convRule: rule22
  }, {
      start: 891,
      length: 3,
      convRule: rule40
  }, {
      start: 902,
      length: 1,
      convRule: rule86
  }, {
      start: 904,
      length: 3,
      convRule: rule87
  }, {
      start: 908,
      length: 1,
      convRule: rule88
  }, {
      start: 910,
      length: 2,
      convRule: rule89
  }, {
      start: 913,
      length: 17,
      convRule: rule9
  }, {
      start: 931,
      length: 9,
      convRule: rule9
  }, {
      start: 940,
      length: 1,
      convRule: rule90
  }, {
      start: 941,
      length: 3,
      convRule: rule91
  }, {
      start: 945,
      length: 17,
      convRule: rule12
  }, {
      start: 962,
      length: 1,
      convRule: rule92
  }, {
      start: 963,
      length: 9,
      convRule: rule12
  }, {
      start: 972,
      length: 1,
      convRule: rule93
  }, {
      start: 973,
      length: 2,
      convRule: rule94
  }, {
      start: 975,
      length: 1,
      convRule: rule95
  }, {
      start: 976,
      length: 1,
      convRule: rule96
  }, {
      start: 977,
      length: 1,
      convRule: rule97
  }, {
      start: 981,
      length: 1,
      convRule: rule99
  }, {
      start: 982,
      length: 1,
      convRule: rule100
  }, {
      start: 983,
      length: 1,
      convRule: rule101
  }, {
      start: 984,
      length: 1,
      convRule: rule21
  }, {
      start: 985,
      length: 1,
      convRule: rule22
  }, {
      start: 986,
      length: 1,
      convRule: rule21
  }, {
      start: 987,
      length: 1,
      convRule: rule22
  }, {
      start: 988,
      length: 1,
      convRule: rule21
  }, {
      start: 989,
      length: 1,
      convRule: rule22
  }, {
      start: 990,
      length: 1,
      convRule: rule21
  }, {
      start: 991,
      length: 1,
      convRule: rule22
  }, {
      start: 992,
      length: 1,
      convRule: rule21
  }, {
      start: 993,
      length: 1,
      convRule: rule22
  }, {
      start: 994,
      length: 1,
      convRule: rule21
  }, {
      start: 995,
      length: 1,
      convRule: rule22
  }, {
      start: 996,
      length: 1,
      convRule: rule21
  }, {
      start: 997,
      length: 1,
      convRule: rule22
  }, {
      start: 998,
      length: 1,
      convRule: rule21
  }, {
      start: 999,
      length: 1,
      convRule: rule22
  }, {
      start: 1000,
      length: 1,
      convRule: rule21
  }, {
      start: 1001,
      length: 1,
      convRule: rule22
  }, {
      start: 1002,
      length: 1,
      convRule: rule21
  }, {
      start: 1003,
      length: 1,
      convRule: rule22
  }, {
      start: 1004,
      length: 1,
      convRule: rule21
  }, {
      start: 1005,
      length: 1,
      convRule: rule22
  }, {
      start: 1006,
      length: 1,
      convRule: rule21
  }, {
      start: 1007,
      length: 1,
      convRule: rule22
  }, {
      start: 1008,
      length: 1,
      convRule: rule102
  }, {
      start: 1009,
      length: 1,
      convRule: rule103
  }, {
      start: 1010,
      length: 1,
      convRule: rule104
  }, {
      start: 1012,
      length: 1,
      convRule: rule105
  }, {
      start: 1013,
      length: 1,
      convRule: rule106
  }, {
      start: 1015,
      length: 1,
      convRule: rule21
  }, {
      start: 1016,
      length: 1,
      convRule: rule22
  }, {
      start: 1017,
      length: 1,
      convRule: rule107
  }, {
      start: 1018,
      length: 1,
      convRule: rule21
  }, {
      start: 1019,
      length: 1,
      convRule: rule22
  }, {
      start: 1021,
      length: 3,
      convRule: rule53
  }, {
      start: 1024,
      length: 16,
      convRule: rule108
  }, {
      start: 1040,
      length: 32,
      convRule: rule9
  }, {
      start: 1072,
      length: 32,
      convRule: rule12
  }, {
      start: 1104,
      length: 16,
      convRule: rule103
  }, {
      start: 1120,
      length: 1,
      convRule: rule21
  }, {
      start: 1121,
      length: 1,
      convRule: rule22
  }, {
      start: 1122,
      length: 1,
      convRule: rule21
  }, {
      start: 1123,
      length: 1,
      convRule: rule22
  }, {
      start: 1124,
      length: 1,
      convRule: rule21
  }, {
      start: 1125,
      length: 1,
      convRule: rule22
  }, {
      start: 1126,
      length: 1,
      convRule: rule21
  }, {
      start: 1127,
      length: 1,
      convRule: rule22
  }, {
      start: 1128,
      length: 1,
      convRule: rule21
  }, {
      start: 1129,
      length: 1,
      convRule: rule22
  }, {
      start: 1130,
      length: 1,
      convRule: rule21
  }, {
      start: 1131,
      length: 1,
      convRule: rule22
  }, {
      start: 1132,
      length: 1,
      convRule: rule21
  }, {
      start: 1133,
      length: 1,
      convRule: rule22
  }, {
      start: 1134,
      length: 1,
      convRule: rule21
  }, {
      start: 1135,
      length: 1,
      convRule: rule22
  }, {
      start: 1136,
      length: 1,
      convRule: rule21
  }, {
      start: 1137,
      length: 1,
      convRule: rule22
  }, {
      start: 1138,
      length: 1,
      convRule: rule21
  }, {
      start: 1139,
      length: 1,
      convRule: rule22
  }, {
      start: 1140,
      length: 1,
      convRule: rule21
  }, {
      start: 1141,
      length: 1,
      convRule: rule22
  }, {
      start: 1142,
      length: 1,
      convRule: rule21
  }, {
      start: 1143,
      length: 1,
      convRule: rule22
  }, {
      start: 1144,
      length: 1,
      convRule: rule21
  }, {
      start: 1145,
      length: 1,
      convRule: rule22
  }, {
      start: 1146,
      length: 1,
      convRule: rule21
  }, {
      start: 1147,
      length: 1,
      convRule: rule22
  }, {
      start: 1148,
      length: 1,
      convRule: rule21
  }, {
      start: 1149,
      length: 1,
      convRule: rule22
  }, {
      start: 1150,
      length: 1,
      convRule: rule21
  }, {
      start: 1151,
      length: 1,
      convRule: rule22
  }, {
      start: 1152,
      length: 1,
      convRule: rule21
  }, {
      start: 1153,
      length: 1,
      convRule: rule22
  }, {
      start: 1162,
      length: 1,
      convRule: rule21
  }, {
      start: 1163,
      length: 1,
      convRule: rule22
  }, {
      start: 1164,
      length: 1,
      convRule: rule21
  }, {
      start: 1165,
      length: 1,
      convRule: rule22
  }, {
      start: 1166,
      length: 1,
      convRule: rule21
  }, {
      start: 1167,
      length: 1,
      convRule: rule22
  }, {
      start: 1168,
      length: 1,
      convRule: rule21
  }, {
      start: 1169,
      length: 1,
      convRule: rule22
  }, {
      start: 1170,
      length: 1,
      convRule: rule21
  }, {
      start: 1171,
      length: 1,
      convRule: rule22
  }, {
      start: 1172,
      length: 1,
      convRule: rule21
  }, {
      start: 1173,
      length: 1,
      convRule: rule22
  }, {
      start: 1174,
      length: 1,
      convRule: rule21
  }, {
      start: 1175,
      length: 1,
      convRule: rule22
  }, {
      start: 1176,
      length: 1,
      convRule: rule21
  }, {
      start: 1177,
      length: 1,
      convRule: rule22
  }, {
      start: 1178,
      length: 1,
      convRule: rule21
  }, {
      start: 1179,
      length: 1,
      convRule: rule22
  }, {
      start: 1180,
      length: 1,
      convRule: rule21
  }, {
      start: 1181,
      length: 1,
      convRule: rule22
  }, {
      start: 1182,
      length: 1,
      convRule: rule21
  }, {
      start: 1183,
      length: 1,
      convRule: rule22
  }, {
      start: 1184,
      length: 1,
      convRule: rule21
  }, {
      start: 1185,
      length: 1,
      convRule: rule22
  }, {
      start: 1186,
      length: 1,
      convRule: rule21
  }, {
      start: 1187,
      length: 1,
      convRule: rule22
  }, {
      start: 1188,
      length: 1,
      convRule: rule21
  }, {
      start: 1189,
      length: 1,
      convRule: rule22
  }, {
      start: 1190,
      length: 1,
      convRule: rule21
  }, {
      start: 1191,
      length: 1,
      convRule: rule22
  }, {
      start: 1192,
      length: 1,
      convRule: rule21
  }, {
      start: 1193,
      length: 1,
      convRule: rule22
  }, {
      start: 1194,
      length: 1,
      convRule: rule21
  }, {
      start: 1195,
      length: 1,
      convRule: rule22
  }, {
      start: 1196,
      length: 1,
      convRule: rule21
  }, {
      start: 1197,
      length: 1,
      convRule: rule22
  }, {
      start: 1198,
      length: 1,
      convRule: rule21
  }, {
      start: 1199,
      length: 1,
      convRule: rule22
  }, {
      start: 1200,
      length: 1,
      convRule: rule21
  }, {
      start: 1201,
      length: 1,
      convRule: rule22
  }, {
      start: 1202,
      length: 1,
      convRule: rule21
  }, {
      start: 1203,
      length: 1,
      convRule: rule22
  }, {
      start: 1204,
      length: 1,
      convRule: rule21
  }, {
      start: 1205,
      length: 1,
      convRule: rule22
  }, {
      start: 1206,
      length: 1,
      convRule: rule21
  }, {
      start: 1207,
      length: 1,
      convRule: rule22
  }, {
      start: 1208,
      length: 1,
      convRule: rule21
  }, {
      start: 1209,
      length: 1,
      convRule: rule22
  }, {
      start: 1210,
      length: 1,
      convRule: rule21
  }, {
      start: 1211,
      length: 1,
      convRule: rule22
  }, {
      start: 1212,
      length: 1,
      convRule: rule21
  }, {
      start: 1213,
      length: 1,
      convRule: rule22
  }, {
      start: 1214,
      length: 1,
      convRule: rule21
  }, {
      start: 1215,
      length: 1,
      convRule: rule22
  }, {
      start: 1216,
      length: 1,
      convRule: rule110
  }, {
      start: 1217,
      length: 1,
      convRule: rule21
  }, {
      start: 1218,
      length: 1,
      convRule: rule22
  }, {
      start: 1219,
      length: 1,
      convRule: rule21
  }, {
      start: 1220,
      length: 1,
      convRule: rule22
  }, {
      start: 1221,
      length: 1,
      convRule: rule21
  }, {
      start: 1222,
      length: 1,
      convRule: rule22
  }, {
      start: 1223,
      length: 1,
      convRule: rule21
  }, {
      start: 1224,
      length: 1,
      convRule: rule22
  }, {
      start: 1225,
      length: 1,
      convRule: rule21
  }, {
      start: 1226,
      length: 1,
      convRule: rule22
  }, {
      start: 1227,
      length: 1,
      convRule: rule21
  }, {
      start: 1228,
      length: 1,
      convRule: rule22
  }, {
      start: 1229,
      length: 1,
      convRule: rule21
  }, {
      start: 1230,
      length: 1,
      convRule: rule22
  }, {
      start: 1231,
      length: 1,
      convRule: rule111
  }, {
      start: 1232,
      length: 1,
      convRule: rule21
  }, {
      start: 1233,
      length: 1,
      convRule: rule22
  }, {
      start: 1234,
      length: 1,
      convRule: rule21
  }, {
      start: 1235,
      length: 1,
      convRule: rule22
  }, {
      start: 1236,
      length: 1,
      convRule: rule21
  }, {
      start: 1237,
      length: 1,
      convRule: rule22
  }, {
      start: 1238,
      length: 1,
      convRule: rule21
  }, {
      start: 1239,
      length: 1,
      convRule: rule22
  }, {
      start: 1240,
      length: 1,
      convRule: rule21
  }, {
      start: 1241,
      length: 1,
      convRule: rule22
  }, {
      start: 1242,
      length: 1,
      convRule: rule21
  }, {
      start: 1243,
      length: 1,
      convRule: rule22
  }, {
      start: 1244,
      length: 1,
      convRule: rule21
  }, {
      start: 1245,
      length: 1,
      convRule: rule22
  }, {
      start: 1246,
      length: 1,
      convRule: rule21
  }, {
      start: 1247,
      length: 1,
      convRule: rule22
  }, {
      start: 1248,
      length: 1,
      convRule: rule21
  }, {
      start: 1249,
      length: 1,
      convRule: rule22
  }, {
      start: 1250,
      length: 1,
      convRule: rule21
  }, {
      start: 1251,
      length: 1,
      convRule: rule22
  }, {
      start: 1252,
      length: 1,
      convRule: rule21
  }, {
      start: 1253,
      length: 1,
      convRule: rule22
  }, {
      start: 1254,
      length: 1,
      convRule: rule21
  }, {
      start: 1255,
      length: 1,
      convRule: rule22
  }, {
      start: 1256,
      length: 1,
      convRule: rule21
  }, {
      start: 1257,
      length: 1,
      convRule: rule22
  }, {
      start: 1258,
      length: 1,
      convRule: rule21
  }, {
      start: 1259,
      length: 1,
      convRule: rule22
  }, {
      start: 1260,
      length: 1,
      convRule: rule21
  }, {
      start: 1261,
      length: 1,
      convRule: rule22
  }, {
      start: 1262,
      length: 1,
      convRule: rule21
  }, {
      start: 1263,
      length: 1,
      convRule: rule22
  }, {
      start: 1264,
      length: 1,
      convRule: rule21
  }, {
      start: 1265,
      length: 1,
      convRule: rule22
  }, {
      start: 1266,
      length: 1,
      convRule: rule21
  }, {
      start: 1267,
      length: 1,
      convRule: rule22
  }, {
      start: 1268,
      length: 1,
      convRule: rule21
  }, {
      start: 1269,
      length: 1,
      convRule: rule22
  }, {
      start: 1270,
      length: 1,
      convRule: rule21
  }, {
      start: 1271,
      length: 1,
      convRule: rule22
  }, {
      start: 1272,
      length: 1,
      convRule: rule21
  }, {
      start: 1273,
      length: 1,
      convRule: rule22
  }, {
      start: 1274,
      length: 1,
      convRule: rule21
  }, {
      start: 1275,
      length: 1,
      convRule: rule22
  }, {
      start: 1276,
      length: 1,
      convRule: rule21
  }, {
      start: 1277,
      length: 1,
      convRule: rule22
  }, {
      start: 1278,
      length: 1,
      convRule: rule21
  }, {
      start: 1279,
      length: 1,
      convRule: rule22
  }, {
      start: 1280,
      length: 1,
      convRule: rule21
  }, {
      start: 1281,
      length: 1,
      convRule: rule22
  }, {
      start: 1282,
      length: 1,
      convRule: rule21
  }, {
      start: 1283,
      length: 1,
      convRule: rule22
  }, {
      start: 1284,
      length: 1,
      convRule: rule21
  }, {
      start: 1285,
      length: 1,
      convRule: rule22
  }, {
      start: 1286,
      length: 1,
      convRule: rule21
  }, {
      start: 1287,
      length: 1,
      convRule: rule22
  }, {
      start: 1288,
      length: 1,
      convRule: rule21
  }, {
      start: 1289,
      length: 1,
      convRule: rule22
  }, {
      start: 1290,
      length: 1,
      convRule: rule21
  }, {
      start: 1291,
      length: 1,
      convRule: rule22
  }, {
      start: 1292,
      length: 1,
      convRule: rule21
  }, {
      start: 1293,
      length: 1,
      convRule: rule22
  }, {
      start: 1294,
      length: 1,
      convRule: rule21
  }, {
      start: 1295,
      length: 1,
      convRule: rule22
  }, {
      start: 1296,
      length: 1,
      convRule: rule21
  }, {
      start: 1297,
      length: 1,
      convRule: rule22
  }, {
      start: 1298,
      length: 1,
      convRule: rule21
  }, {
      start: 1299,
      length: 1,
      convRule: rule22
  }, {
      start: 1300,
      length: 1,
      convRule: rule21
  }, {
      start: 1301,
      length: 1,
      convRule: rule22
  }, {
      start: 1302,
      length: 1,
      convRule: rule21
  }, {
      start: 1303,
      length: 1,
      convRule: rule22
  }, {
      start: 1304,
      length: 1,
      convRule: rule21
  }, {
      start: 1305,
      length: 1,
      convRule: rule22
  }, {
      start: 1306,
      length: 1,
      convRule: rule21
  }, {
      start: 1307,
      length: 1,
      convRule: rule22
  }, {
      start: 1308,
      length: 1,
      convRule: rule21
  }, {
      start: 1309,
      length: 1,
      convRule: rule22
  }, {
      start: 1310,
      length: 1,
      convRule: rule21
  }, {
      start: 1311,
      length: 1,
      convRule: rule22
  }, {
      start: 1312,
      length: 1,
      convRule: rule21
  }, {
      start: 1313,
      length: 1,
      convRule: rule22
  }, {
      start: 1314,
      length: 1,
      convRule: rule21
  }, {
      start: 1315,
      length: 1,
      convRule: rule22
  }, {
      start: 1316,
      length: 1,
      convRule: rule21
  }, {
      start: 1317,
      length: 1,
      convRule: rule22
  }, {
      start: 1318,
      length: 1,
      convRule: rule21
  }, {
      start: 1319,
      length: 1,
      convRule: rule22
  }, {
      start: 1329,
      length: 38,
      convRule: rule112
  }, {
      start: 1377,
      length: 38,
      convRule: rule113
  }, {
      start: 4256,
      length: 38,
      convRule: rule115
  }, {
      start: 7545,
      length: 1,
      convRule: rule117
  }, {
      start: 7549,
      length: 1,
      convRule: rule118
  }, {
      start: 7680,
      length: 1,
      convRule: rule21
  }, {
      start: 7681,
      length: 1,
      convRule: rule22
  }, {
      start: 7682,
      length: 1,
      convRule: rule21
  }, {
      start: 7683,
      length: 1,
      convRule: rule22
  }, {
      start: 7684,
      length: 1,
      convRule: rule21
  }, {
      start: 7685,
      length: 1,
      convRule: rule22
  }, {
      start: 7686,
      length: 1,
      convRule: rule21
  }, {
      start: 7687,
      length: 1,
      convRule: rule22
  }, {
      start: 7688,
      length: 1,
      convRule: rule21
  }, {
      start: 7689,
      length: 1,
      convRule: rule22
  }, {
      start: 7690,
      length: 1,
      convRule: rule21
  }, {
      start: 7691,
      length: 1,
      convRule: rule22
  }, {
      start: 7692,
      length: 1,
      convRule: rule21
  }, {
      start: 7693,
      length: 1,
      convRule: rule22
  }, {
      start: 7694,
      length: 1,
      convRule: rule21
  }, {
      start: 7695,
      length: 1,
      convRule: rule22
  }, {
      start: 7696,
      length: 1,
      convRule: rule21
  }, {
      start: 7697,
      length: 1,
      convRule: rule22
  }, {
      start: 7698,
      length: 1,
      convRule: rule21
  }, {
      start: 7699,
      length: 1,
      convRule: rule22
  }, {
      start: 7700,
      length: 1,
      convRule: rule21
  }, {
      start: 7701,
      length: 1,
      convRule: rule22
  }, {
      start: 7702,
      length: 1,
      convRule: rule21
  }, {
      start: 7703,
      length: 1,
      convRule: rule22
  }, {
      start: 7704,
      length: 1,
      convRule: rule21
  }, {
      start: 7705,
      length: 1,
      convRule: rule22
  }, {
      start: 7706,
      length: 1,
      convRule: rule21
  }, {
      start: 7707,
      length: 1,
      convRule: rule22
  }, {
      start: 7708,
      length: 1,
      convRule: rule21
  }, {
      start: 7709,
      length: 1,
      convRule: rule22
  }, {
      start: 7710,
      length: 1,
      convRule: rule21
  }, {
      start: 7711,
      length: 1,
      convRule: rule22
  }, {
      start: 7712,
      length: 1,
      convRule: rule21
  }, {
      start: 7713,
      length: 1,
      convRule: rule22
  }, {
      start: 7714,
      length: 1,
      convRule: rule21
  }, {
      start: 7715,
      length: 1,
      convRule: rule22
  }, {
      start: 7716,
      length: 1,
      convRule: rule21
  }, {
      start: 7717,
      length: 1,
      convRule: rule22
  }, {
      start: 7718,
      length: 1,
      convRule: rule21
  }, {
      start: 7719,
      length: 1,
      convRule: rule22
  }, {
      start: 7720,
      length: 1,
      convRule: rule21
  }, {
      start: 7721,
      length: 1,
      convRule: rule22
  }, {
      start: 7722,
      length: 1,
      convRule: rule21
  }, {
      start: 7723,
      length: 1,
      convRule: rule22
  }, {
      start: 7724,
      length: 1,
      convRule: rule21
  }, {
      start: 7725,
      length: 1,
      convRule: rule22
  }, {
      start: 7726,
      length: 1,
      convRule: rule21
  }, {
      start: 7727,
      length: 1,
      convRule: rule22
  }, {
      start: 7728,
      length: 1,
      convRule: rule21
  }, {
      start: 7729,
      length: 1,
      convRule: rule22
  }, {
      start: 7730,
      length: 1,
      convRule: rule21
  }, {
      start: 7731,
      length: 1,
      convRule: rule22
  }, {
      start: 7732,
      length: 1,
      convRule: rule21
  }, {
      start: 7733,
      length: 1,
      convRule: rule22
  }, {
      start: 7734,
      length: 1,
      convRule: rule21
  }, {
      start: 7735,
      length: 1,
      convRule: rule22
  }, {
      start: 7736,
      length: 1,
      convRule: rule21
  }, {
      start: 7737,
      length: 1,
      convRule: rule22
  }, {
      start: 7738,
      length: 1,
      convRule: rule21
  }, {
      start: 7739,
      length: 1,
      convRule: rule22
  }, {
      start: 7740,
      length: 1,
      convRule: rule21
  }, {
      start: 7741,
      length: 1,
      convRule: rule22
  }, {
      start: 7742,
      length: 1,
      convRule: rule21
  }, {
      start: 7743,
      length: 1,
      convRule: rule22
  }, {
      start: 7744,
      length: 1,
      convRule: rule21
  }, {
      start: 7745,
      length: 1,
      convRule: rule22
  }, {
      start: 7746,
      length: 1,
      convRule: rule21
  }, {
      start: 7747,
      length: 1,
      convRule: rule22
  }, {
      start: 7748,
      length: 1,
      convRule: rule21
  }, {
      start: 7749,
      length: 1,
      convRule: rule22
  }, {
      start: 7750,
      length: 1,
      convRule: rule21
  }, {
      start: 7751,
      length: 1,
      convRule: rule22
  }, {
      start: 7752,
      length: 1,
      convRule: rule21
  }, {
      start: 7753,
      length: 1,
      convRule: rule22
  }, {
      start: 7754,
      length: 1,
      convRule: rule21
  }, {
      start: 7755,
      length: 1,
      convRule: rule22
  }, {
      start: 7756,
      length: 1,
      convRule: rule21
  }, {
      start: 7757,
      length: 1,
      convRule: rule22
  }, {
      start: 7758,
      length: 1,
      convRule: rule21
  }, {
      start: 7759,
      length: 1,
      convRule: rule22
  }, {
      start: 7760,
      length: 1,
      convRule: rule21
  }, {
      start: 7761,
      length: 1,
      convRule: rule22
  }, {
      start: 7762,
      length: 1,
      convRule: rule21
  }, {
      start: 7763,
      length: 1,
      convRule: rule22
  }, {
      start: 7764,
      length: 1,
      convRule: rule21
  }, {
      start: 7765,
      length: 1,
      convRule: rule22
  }, {
      start: 7766,
      length: 1,
      convRule: rule21
  }, {
      start: 7767,
      length: 1,
      convRule: rule22
  }, {
      start: 7768,
      length: 1,
      convRule: rule21
  }, {
      start: 7769,
      length: 1,
      convRule: rule22
  }, {
      start: 7770,
      length: 1,
      convRule: rule21
  }, {
      start: 7771,
      length: 1,
      convRule: rule22
  }, {
      start: 7772,
      length: 1,
      convRule: rule21
  }, {
      start: 7773,
      length: 1,
      convRule: rule22
  }, {
      start: 7774,
      length: 1,
      convRule: rule21
  }, {
      start: 7775,
      length: 1,
      convRule: rule22
  }, {
      start: 7776,
      length: 1,
      convRule: rule21
  }, {
      start: 7777,
      length: 1,
      convRule: rule22
  }, {
      start: 7778,
      length: 1,
      convRule: rule21
  }, {
      start: 7779,
      length: 1,
      convRule: rule22
  }, {
      start: 7780,
      length: 1,
      convRule: rule21
  }, {
      start: 7781,
      length: 1,
      convRule: rule22
  }, {
      start: 7782,
      length: 1,
      convRule: rule21
  }, {
      start: 7783,
      length: 1,
      convRule: rule22
  }, {
      start: 7784,
      length: 1,
      convRule: rule21
  }, {
      start: 7785,
      length: 1,
      convRule: rule22
  }, {
      start: 7786,
      length: 1,
      convRule: rule21
  }, {
      start: 7787,
      length: 1,
      convRule: rule22
  }, {
      start: 7788,
      length: 1,
      convRule: rule21
  }, {
      start: 7789,
      length: 1,
      convRule: rule22
  }, {
      start: 7790,
      length: 1,
      convRule: rule21
  }, {
      start: 7791,
      length: 1,
      convRule: rule22
  }, {
      start: 7792,
      length: 1,
      convRule: rule21
  }, {
      start: 7793,
      length: 1,
      convRule: rule22
  }, {
      start: 7794,
      length: 1,
      convRule: rule21
  }, {
      start: 7795,
      length: 1,
      convRule: rule22
  }, {
      start: 7796,
      length: 1,
      convRule: rule21
  }, {
      start: 7797,
      length: 1,
      convRule: rule22
  }, {
      start: 7798,
      length: 1,
      convRule: rule21
  }, {
      start: 7799,
      length: 1,
      convRule: rule22
  }, {
      start: 7800,
      length: 1,
      convRule: rule21
  }, {
      start: 7801,
      length: 1,
      convRule: rule22
  }, {
      start: 7802,
      length: 1,
      convRule: rule21
  }, {
      start: 7803,
      length: 1,
      convRule: rule22
  }, {
      start: 7804,
      length: 1,
      convRule: rule21
  }, {
      start: 7805,
      length: 1,
      convRule: rule22
  }, {
      start: 7806,
      length: 1,
      convRule: rule21
  }, {
      start: 7807,
      length: 1,
      convRule: rule22
  }, {
      start: 7808,
      length: 1,
      convRule: rule21
  }, {
      start: 7809,
      length: 1,
      convRule: rule22
  }, {
      start: 7810,
      length: 1,
      convRule: rule21
  }, {
      start: 7811,
      length: 1,
      convRule: rule22
  }, {
      start: 7812,
      length: 1,
      convRule: rule21
  }, {
      start: 7813,
      length: 1,
      convRule: rule22
  }, {
      start: 7814,
      length: 1,
      convRule: rule21
  }, {
      start: 7815,
      length: 1,
      convRule: rule22
  }, {
      start: 7816,
      length: 1,
      convRule: rule21
  }, {
      start: 7817,
      length: 1,
      convRule: rule22
  }, {
      start: 7818,
      length: 1,
      convRule: rule21
  }, {
      start: 7819,
      length: 1,
      convRule: rule22
  }, {
      start: 7820,
      length: 1,
      convRule: rule21
  }, {
      start: 7821,
      length: 1,
      convRule: rule22
  }, {
      start: 7822,
      length: 1,
      convRule: rule21
  }, {
      start: 7823,
      length: 1,
      convRule: rule22
  }, {
      start: 7824,
      length: 1,
      convRule: rule21
  }, {
      start: 7825,
      length: 1,
      convRule: rule22
  }, {
      start: 7826,
      length: 1,
      convRule: rule21
  }, {
      start: 7827,
      length: 1,
      convRule: rule22
  }, {
      start: 7828,
      length: 1,
      convRule: rule21
  }, {
      start: 7829,
      length: 1,
      convRule: rule22
  }, {
      start: 7835,
      length: 1,
      convRule: rule119
  }, {
      start: 7838,
      length: 1,
      convRule: rule120
  }, {
      start: 7840,
      length: 1,
      convRule: rule21
  }, {
      start: 7841,
      length: 1,
      convRule: rule22
  }, {
      start: 7842,
      length: 1,
      convRule: rule21
  }, {
      start: 7843,
      length: 1,
      convRule: rule22
  }, {
      start: 7844,
      length: 1,
      convRule: rule21
  }, {
      start: 7845,
      length: 1,
      convRule: rule22
  }, {
      start: 7846,
      length: 1,
      convRule: rule21
  }, {
      start: 7847,
      length: 1,
      convRule: rule22
  }, {
      start: 7848,
      length: 1,
      convRule: rule21
  }, {
      start: 7849,
      length: 1,
      convRule: rule22
  }, {
      start: 7850,
      length: 1,
      convRule: rule21
  }, {
      start: 7851,
      length: 1,
      convRule: rule22
  }, {
      start: 7852,
      length: 1,
      convRule: rule21
  }, {
      start: 7853,
      length: 1,
      convRule: rule22
  }, {
      start: 7854,
      length: 1,
      convRule: rule21
  }, {
      start: 7855,
      length: 1,
      convRule: rule22
  }, {
      start: 7856,
      length: 1,
      convRule: rule21
  }, {
      start: 7857,
      length: 1,
      convRule: rule22
  }, {
      start: 7858,
      length: 1,
      convRule: rule21
  }, {
      start: 7859,
      length: 1,
      convRule: rule22
  }, {
      start: 7860,
      length: 1,
      convRule: rule21
  }, {
      start: 7861,
      length: 1,
      convRule: rule22
  }, {
      start: 7862,
      length: 1,
      convRule: rule21
  }, {
      start: 7863,
      length: 1,
      convRule: rule22
  }, {
      start: 7864,
      length: 1,
      convRule: rule21
  }, {
      start: 7865,
      length: 1,
      convRule: rule22
  }, {
      start: 7866,
      length: 1,
      convRule: rule21
  }, {
      start: 7867,
      length: 1,
      convRule: rule22
  }, {
      start: 7868,
      length: 1,
      convRule: rule21
  }, {
      start: 7869,
      length: 1,
      convRule: rule22
  }, {
      start: 7870,
      length: 1,
      convRule: rule21
  }, {
      start: 7871,
      length: 1,
      convRule: rule22
  }, {
      start: 7872,
      length: 1,
      convRule: rule21
  }, {
      start: 7873,
      length: 1,
      convRule: rule22
  }, {
      start: 7874,
      length: 1,
      convRule: rule21
  }, {
      start: 7875,
      length: 1,
      convRule: rule22
  }, {
      start: 7876,
      length: 1,
      convRule: rule21
  }, {
      start: 7877,
      length: 1,
      convRule: rule22
  }, {
      start: 7878,
      length: 1,
      convRule: rule21
  }, {
      start: 7879,
      length: 1,
      convRule: rule22
  }, {
      start: 7880,
      length: 1,
      convRule: rule21
  }, {
      start: 7881,
      length: 1,
      convRule: rule22
  }, {
      start: 7882,
      length: 1,
      convRule: rule21
  }, {
      start: 7883,
      length: 1,
      convRule: rule22
  }, {
      start: 7884,
      length: 1,
      convRule: rule21
  }, {
      start: 7885,
      length: 1,
      convRule: rule22
  }, {
      start: 7886,
      length: 1,
      convRule: rule21
  }, {
      start: 7887,
      length: 1,
      convRule: rule22
  }, {
      start: 7888,
      length: 1,
      convRule: rule21
  }, {
      start: 7889,
      length: 1,
      convRule: rule22
  }, {
      start: 7890,
      length: 1,
      convRule: rule21
  }, {
      start: 7891,
      length: 1,
      convRule: rule22
  }, {
      start: 7892,
      length: 1,
      convRule: rule21
  }, {
      start: 7893,
      length: 1,
      convRule: rule22
  }, {
      start: 7894,
      length: 1,
      convRule: rule21
  }, {
      start: 7895,
      length: 1,
      convRule: rule22
  }, {
      start: 7896,
      length: 1,
      convRule: rule21
  }, {
      start: 7897,
      length: 1,
      convRule: rule22
  }, {
      start: 7898,
      length: 1,
      convRule: rule21
  }, {
      start: 7899,
      length: 1,
      convRule: rule22
  }, {
      start: 7900,
      length: 1,
      convRule: rule21
  }, {
      start: 7901,
      length: 1,
      convRule: rule22
  }, {
      start: 7902,
      length: 1,
      convRule: rule21
  }, {
      start: 7903,
      length: 1,
      convRule: rule22
  }, {
      start: 7904,
      length: 1,
      convRule: rule21
  }, {
      start: 7905,
      length: 1,
      convRule: rule22
  }, {
      start: 7906,
      length: 1,
      convRule: rule21
  }, {
      start: 7907,
      length: 1,
      convRule: rule22
  }, {
      start: 7908,
      length: 1,
      convRule: rule21
  }, {
      start: 7909,
      length: 1,
      convRule: rule22
  }, {
      start: 7910,
      length: 1,
      convRule: rule21
  }, {
      start: 7911,
      length: 1,
      convRule: rule22
  }, {
      start: 7912,
      length: 1,
      convRule: rule21
  }, {
      start: 7913,
      length: 1,
      convRule: rule22
  }, {
      start: 7914,
      length: 1,
      convRule: rule21
  }, {
      start: 7915,
      length: 1,
      convRule: rule22
  }, {
      start: 7916,
      length: 1,
      convRule: rule21
  }, {
      start: 7917,
      length: 1,
      convRule: rule22
  }, {
      start: 7918,
      length: 1,
      convRule: rule21
  }, {
      start: 7919,
      length: 1,
      convRule: rule22
  }, {
      start: 7920,
      length: 1,
      convRule: rule21
  }, {
      start: 7921,
      length: 1,
      convRule: rule22
  }, {
      start: 7922,
      length: 1,
      convRule: rule21
  }, {
      start: 7923,
      length: 1,
      convRule: rule22
  }, {
      start: 7924,
      length: 1,
      convRule: rule21
  }, {
      start: 7925,
      length: 1,
      convRule: rule22
  }, {
      start: 7926,
      length: 1,
      convRule: rule21
  }, {
      start: 7927,
      length: 1,
      convRule: rule22
  }, {
      start: 7928,
      length: 1,
      convRule: rule21
  }, {
      start: 7929,
      length: 1,
      convRule: rule22
  }, {
      start: 7930,
      length: 1,
      convRule: rule21
  }, {
      start: 7931,
      length: 1,
      convRule: rule22
  }, {
      start: 7932,
      length: 1,
      convRule: rule21
  }, {
      start: 7933,
      length: 1,
      convRule: rule22
  }, {
      start: 7934,
      length: 1,
      convRule: rule21
  }, {
      start: 7935,
      length: 1,
      convRule: rule22
  }, {
      start: 7936,
      length: 8,
      convRule: rule121
  }, {
      start: 7944,
      length: 8,
      convRule: rule122
  }, {
      start: 7952,
      length: 6,
      convRule: rule121
  }, {
      start: 7960,
      length: 6,
      convRule: rule122
  }, {
      start: 7968,
      length: 8,
      convRule: rule121
  }, {
      start: 7976,
      length: 8,
      convRule: rule122
  }, {
      start: 7984,
      length: 8,
      convRule: rule121
  }, {
      start: 7992,
      length: 8,
      convRule: rule122
  }, {
      start: 8000,
      length: 6,
      convRule: rule121
  }, {
      start: 8008,
      length: 6,
      convRule: rule122
  }, {
      start: 8017,
      length: 1,
      convRule: rule121
  }, {
      start: 8019,
      length: 1,
      convRule: rule121
  }, {
      start: 8021,
      length: 1,
      convRule: rule121
  }, {
      start: 8023,
      length: 1,
      convRule: rule121
  }, {
      start: 8025,
      length: 1,
      convRule: rule122
  }, {
      start: 8027,
      length: 1,
      convRule: rule122
  }, {
      start: 8029,
      length: 1,
      convRule: rule122
  }, {
      start: 8031,
      length: 1,
      convRule: rule122
  }, {
      start: 8032,
      length: 8,
      convRule: rule121
  }, {
      start: 8040,
      length: 8,
      convRule: rule122
  }, {
      start: 8048,
      length: 2,
      convRule: rule123
  }, {
      start: 8050,
      length: 4,
      convRule: rule124
  }, {
      start: 8054,
      length: 2,
      convRule: rule125
  }, {
      start: 8056,
      length: 2,
      convRule: rule126
  }, {
      start: 8058,
      length: 2,
      convRule: rule127
  }, {
      start: 8060,
      length: 2,
      convRule: rule128
  }, {
      start: 8064,
      length: 8,
      convRule: rule121
  }, {
      start: 8072,
      length: 8,
      convRule: rule129
  }, {
      start: 8080,
      length: 8,
      convRule: rule121
  }, {
      start: 8088,
      length: 8,
      convRule: rule129
  }, {
      start: 8096,
      length: 8,
      convRule: rule121
  }, {
      start: 8104,
      length: 8,
      convRule: rule129
  }, {
      start: 8112,
      length: 2,
      convRule: rule121
  }, {
      start: 8115,
      length: 1,
      convRule: rule130
  }, {
      start: 8120,
      length: 2,
      convRule: rule122
  }, {
      start: 8122,
      length: 2,
      convRule: rule131
  }, {
      start: 8124,
      length: 1,
      convRule: rule132
  }, {
      start: 8126,
      length: 1,
      convRule: rule133
  }, {
      start: 8131,
      length: 1,
      convRule: rule130
  }, {
      start: 8136,
      length: 4,
      convRule: rule134
  }, {
      start: 8140,
      length: 1,
      convRule: rule132
  }, {
      start: 8144,
      length: 2,
      convRule: rule121
  }, {
      start: 8152,
      length: 2,
      convRule: rule122
  }, {
      start: 8154,
      length: 2,
      convRule: rule135
  }, {
      start: 8160,
      length: 2,
      convRule: rule121
  }, {
      start: 8165,
      length: 1,
      convRule: rule104
  }, {
      start: 8168,
      length: 2,
      convRule: rule122
  }, {
      start: 8170,
      length: 2,
      convRule: rule136
  }, {
      start: 8172,
      length: 1,
      convRule: rule107
  }, {
      start: 8179,
      length: 1,
      convRule: rule130
  }, {
      start: 8184,
      length: 2,
      convRule: rule137
  }, {
      start: 8186,
      length: 2,
      convRule: rule138
  }, {
      start: 8188,
      length: 1,
      convRule: rule132
  }, {
      start: 8486,
      length: 1,
      convRule: rule141
  }, {
      start: 8490,
      length: 1,
      convRule: rule142
  }, {
      start: 8491,
      length: 1,
      convRule: rule143
  }, {
      start: 8498,
      length: 1,
      convRule: rule144
  }, {
      start: 8526,
      length: 1,
      convRule: rule145
  }, {
      start: 8544,
      length: 16,
      convRule: rule146
  }, {
      start: 8560,
      length: 16,
      convRule: rule147
  }, {
      start: 8579,
      length: 1,
      convRule: rule21
  }, {
      start: 8580,
      length: 1,
      convRule: rule22
  }, {
      start: 9398,
      length: 26,
      convRule: rule148
  }, {
      start: 9424,
      length: 26,
      convRule: rule149
  }, {
      start: 11264,
      length: 47,
      convRule: rule112
  }, {
      start: 11312,
      length: 47,
      convRule: rule113
  }, {
      start: 11360,
      length: 1,
      convRule: rule21
  }, {
      start: 11361,
      length: 1,
      convRule: rule22
  }, {
      start: 11362,
      length: 1,
      convRule: rule150
  }, {
      start: 11363,
      length: 1,
      convRule: rule151
  }, {
      start: 11364,
      length: 1,
      convRule: rule152
  }, {
      start: 11365,
      length: 1,
      convRule: rule153
  }, {
      start: 11366,
      length: 1,
      convRule: rule154
  }, {
      start: 11367,
      length: 1,
      convRule: rule21
  }, {
      start: 11368,
      length: 1,
      convRule: rule22
  }, {
      start: 11369,
      length: 1,
      convRule: rule21
  }, {
      start: 11370,
      length: 1,
      convRule: rule22
  }, {
      start: 11371,
      length: 1,
      convRule: rule21
  }, {
      start: 11372,
      length: 1,
      convRule: rule22
  }, {
      start: 11373,
      length: 1,
      convRule: rule155
  }, {
      start: 11374,
      length: 1,
      convRule: rule156
  }, {
      start: 11375,
      length: 1,
      convRule: rule157
  }, {
      start: 11376,
      length: 1,
      convRule: rule158
  }, {
      start: 11378,
      length: 1,
      convRule: rule21
  }, {
      start: 11379,
      length: 1,
      convRule: rule22
  }, {
      start: 11381,
      length: 1,
      convRule: rule21
  }, {
      start: 11382,
      length: 1,
      convRule: rule22
  }, {
      start: 11390,
      length: 2,
      convRule: rule159
  }, {
      start: 11392,
      length: 1,
      convRule: rule21
  }, {
      start: 11393,
      length: 1,
      convRule: rule22
  }, {
      start: 11394,
      length: 1,
      convRule: rule21
  }, {
      start: 11395,
      length: 1,
      convRule: rule22
  }, {
      start: 11396,
      length: 1,
      convRule: rule21
  }, {
      start: 11397,
      length: 1,
      convRule: rule22
  }, {
      start: 11398,
      length: 1,
      convRule: rule21
  }, {
      start: 11399,
      length: 1,
      convRule: rule22
  }, {
      start: 11400,
      length: 1,
      convRule: rule21
  }, {
      start: 11401,
      length: 1,
      convRule: rule22
  }, {
      start: 11402,
      length: 1,
      convRule: rule21
  }, {
      start: 11403,
      length: 1,
      convRule: rule22
  }, {
      start: 11404,
      length: 1,
      convRule: rule21
  }, {
      start: 11405,
      length: 1,
      convRule: rule22
  }, {
      start: 11406,
      length: 1,
      convRule: rule21
  }, {
      start: 11407,
      length: 1,
      convRule: rule22
  }, {
      start: 11408,
      length: 1,
      convRule: rule21
  }, {
      start: 11409,
      length: 1,
      convRule: rule22
  }, {
      start: 11410,
      length: 1,
      convRule: rule21
  }, {
      start: 11411,
      length: 1,
      convRule: rule22
  }, {
      start: 11412,
      length: 1,
      convRule: rule21
  }, {
      start: 11413,
      length: 1,
      convRule: rule22
  }, {
      start: 11414,
      length: 1,
      convRule: rule21
  }, {
      start: 11415,
      length: 1,
      convRule: rule22
  }, {
      start: 11416,
      length: 1,
      convRule: rule21
  }, {
      start: 11417,
      length: 1,
      convRule: rule22
  }, {
      start: 11418,
      length: 1,
      convRule: rule21
  }, {
      start: 11419,
      length: 1,
      convRule: rule22
  }, {
      start: 11420,
      length: 1,
      convRule: rule21
  }, {
      start: 11421,
      length: 1,
      convRule: rule22
  }, {
      start: 11422,
      length: 1,
      convRule: rule21
  }, {
      start: 11423,
      length: 1,
      convRule: rule22
  }, {
      start: 11424,
      length: 1,
      convRule: rule21
  }, {
      start: 11425,
      length: 1,
      convRule: rule22
  }, {
      start: 11426,
      length: 1,
      convRule: rule21
  }, {
      start: 11427,
      length: 1,
      convRule: rule22
  }, {
      start: 11428,
      length: 1,
      convRule: rule21
  }, {
      start: 11429,
      length: 1,
      convRule: rule22
  }, {
      start: 11430,
      length: 1,
      convRule: rule21
  }, {
      start: 11431,
      length: 1,
      convRule: rule22
  }, {
      start: 11432,
      length: 1,
      convRule: rule21
  }, {
      start: 11433,
      length: 1,
      convRule: rule22
  }, {
      start: 11434,
      length: 1,
      convRule: rule21
  }, {
      start: 11435,
      length: 1,
      convRule: rule22
  }, {
      start: 11436,
      length: 1,
      convRule: rule21
  }, {
      start: 11437,
      length: 1,
      convRule: rule22
  }, {
      start: 11438,
      length: 1,
      convRule: rule21
  }, {
      start: 11439,
      length: 1,
      convRule: rule22
  }, {
      start: 11440,
      length: 1,
      convRule: rule21
  }, {
      start: 11441,
      length: 1,
      convRule: rule22
  }, {
      start: 11442,
      length: 1,
      convRule: rule21
  }, {
      start: 11443,
      length: 1,
      convRule: rule22
  }, {
      start: 11444,
      length: 1,
      convRule: rule21
  }, {
      start: 11445,
      length: 1,
      convRule: rule22
  }, {
      start: 11446,
      length: 1,
      convRule: rule21
  }, {
      start: 11447,
      length: 1,
      convRule: rule22
  }, {
      start: 11448,
      length: 1,
      convRule: rule21
  }, {
      start: 11449,
      length: 1,
      convRule: rule22
  }, {
      start: 11450,
      length: 1,
      convRule: rule21
  }, {
      start: 11451,
      length: 1,
      convRule: rule22
  }, {
      start: 11452,
      length: 1,
      convRule: rule21
  }, {
      start: 11453,
      length: 1,
      convRule: rule22
  }, {
      start: 11454,
      length: 1,
      convRule: rule21
  }, {
      start: 11455,
      length: 1,
      convRule: rule22
  }, {
      start: 11456,
      length: 1,
      convRule: rule21
  }, {
      start: 11457,
      length: 1,
      convRule: rule22
  }, {
      start: 11458,
      length: 1,
      convRule: rule21
  }, {
      start: 11459,
      length: 1,
      convRule: rule22
  }, {
      start: 11460,
      length: 1,
      convRule: rule21
  }, {
      start: 11461,
      length: 1,
      convRule: rule22
  }, {
      start: 11462,
      length: 1,
      convRule: rule21
  }, {
      start: 11463,
      length: 1,
      convRule: rule22
  }, {
      start: 11464,
      length: 1,
      convRule: rule21
  }, {
      start: 11465,
      length: 1,
      convRule: rule22
  }, {
      start: 11466,
      length: 1,
      convRule: rule21
  }, {
      start: 11467,
      length: 1,
      convRule: rule22
  }, {
      start: 11468,
      length: 1,
      convRule: rule21
  }, {
      start: 11469,
      length: 1,
      convRule: rule22
  }, {
      start: 11470,
      length: 1,
      convRule: rule21
  }, {
      start: 11471,
      length: 1,
      convRule: rule22
  }, {
      start: 11472,
      length: 1,
      convRule: rule21
  }, {
      start: 11473,
      length: 1,
      convRule: rule22
  }, {
      start: 11474,
      length: 1,
      convRule: rule21
  }, {
      start: 11475,
      length: 1,
      convRule: rule22
  }, {
      start: 11476,
      length: 1,
      convRule: rule21
  }, {
      start: 11477,
      length: 1,
      convRule: rule22
  }, {
      start: 11478,
      length: 1,
      convRule: rule21
  }, {
      start: 11479,
      length: 1,
      convRule: rule22
  }, {
      start: 11480,
      length: 1,
      convRule: rule21
  }, {
      start: 11481,
      length: 1,
      convRule: rule22
  }, {
      start: 11482,
      length: 1,
      convRule: rule21
  }, {
      start: 11483,
      length: 1,
      convRule: rule22
  }, {
      start: 11484,
      length: 1,
      convRule: rule21
  }, {
      start: 11485,
      length: 1,
      convRule: rule22
  }, {
      start: 11486,
      length: 1,
      convRule: rule21
  }, {
      start: 11487,
      length: 1,
      convRule: rule22
  }, {
      start: 11488,
      length: 1,
      convRule: rule21
  }, {
      start: 11489,
      length: 1,
      convRule: rule22
  }, {
      start: 11490,
      length: 1,
      convRule: rule21
  }, {
      start: 11491,
      length: 1,
      convRule: rule22
  }, {
      start: 11499,
      length: 1,
      convRule: rule21
  }, {
      start: 11500,
      length: 1,
      convRule: rule22
  }, {
      start: 11501,
      length: 1,
      convRule: rule21
  }, {
      start: 11502,
      length: 1,
      convRule: rule22
  }, {
      start: 11520,
      length: 38,
      convRule: rule160
  }, {
      start: 42560,
      length: 1,
      convRule: rule21
  }, {
      start: 42561,
      length: 1,
      convRule: rule22
  }, {
      start: 42562,
      length: 1,
      convRule: rule21
  }, {
      start: 42563,
      length: 1,
      convRule: rule22
  }, {
      start: 42564,
      length: 1,
      convRule: rule21
  }, {
      start: 42565,
      length: 1,
      convRule: rule22
  }, {
      start: 42566,
      length: 1,
      convRule: rule21
  }, {
      start: 42567,
      length: 1,
      convRule: rule22
  }, {
      start: 42568,
      length: 1,
      convRule: rule21
  }, {
      start: 42569,
      length: 1,
      convRule: rule22
  }, {
      start: 42570,
      length: 1,
      convRule: rule21
  }, {
      start: 42571,
      length: 1,
      convRule: rule22
  }, {
      start: 42572,
      length: 1,
      convRule: rule21
  }, {
      start: 42573,
      length: 1,
      convRule: rule22
  }, {
      start: 42574,
      length: 1,
      convRule: rule21
  }, {
      start: 42575,
      length: 1,
      convRule: rule22
  }, {
      start: 42576,
      length: 1,
      convRule: rule21
  }, {
      start: 42577,
      length: 1,
      convRule: rule22
  }, {
      start: 42578,
      length: 1,
      convRule: rule21
  }, {
      start: 42579,
      length: 1,
      convRule: rule22
  }, {
      start: 42580,
      length: 1,
      convRule: rule21
  }, {
      start: 42581,
      length: 1,
      convRule: rule22
  }, {
      start: 42582,
      length: 1,
      convRule: rule21
  }, {
      start: 42583,
      length: 1,
      convRule: rule22
  }, {
      start: 42584,
      length: 1,
      convRule: rule21
  }, {
      start: 42585,
      length: 1,
      convRule: rule22
  }, {
      start: 42586,
      length: 1,
      convRule: rule21
  }, {
      start: 42587,
      length: 1,
      convRule: rule22
  }, {
      start: 42588,
      length: 1,
      convRule: rule21
  }, {
      start: 42589,
      length: 1,
      convRule: rule22
  }, {
      start: 42590,
      length: 1,
      convRule: rule21
  }, {
      start: 42591,
      length: 1,
      convRule: rule22
  }, {
      start: 42592,
      length: 1,
      convRule: rule21
  }, {
      start: 42593,
      length: 1,
      convRule: rule22
  }, {
      start: 42594,
      length: 1,
      convRule: rule21
  }, {
      start: 42595,
      length: 1,
      convRule: rule22
  }, {
      start: 42596,
      length: 1,
      convRule: rule21
  }, {
      start: 42597,
      length: 1,
      convRule: rule22
  }, {
      start: 42598,
      length: 1,
      convRule: rule21
  }, {
      start: 42599,
      length: 1,
      convRule: rule22
  }, {
      start: 42600,
      length: 1,
      convRule: rule21
  }, {
      start: 42601,
      length: 1,
      convRule: rule22
  }, {
      start: 42602,
      length: 1,
      convRule: rule21
  }, {
      start: 42603,
      length: 1,
      convRule: rule22
  }, {
      start: 42604,
      length: 1,
      convRule: rule21
  }, {
      start: 42605,
      length: 1,
      convRule: rule22
  }, {
      start: 42624,
      length: 1,
      convRule: rule21
  }, {
      start: 42625,
      length: 1,
      convRule: rule22
  }, {
      start: 42626,
      length: 1,
      convRule: rule21
  }, {
      start: 42627,
      length: 1,
      convRule: rule22
  }, {
      start: 42628,
      length: 1,
      convRule: rule21
  }, {
      start: 42629,
      length: 1,
      convRule: rule22
  }, {
      start: 42630,
      length: 1,
      convRule: rule21
  }, {
      start: 42631,
      length: 1,
      convRule: rule22
  }, {
      start: 42632,
      length: 1,
      convRule: rule21
  }, {
      start: 42633,
      length: 1,
      convRule: rule22
  }, {
      start: 42634,
      length: 1,
      convRule: rule21
  }, {
      start: 42635,
      length: 1,
      convRule: rule22
  }, {
      start: 42636,
      length: 1,
      convRule: rule21
  }, {
      start: 42637,
      length: 1,
      convRule: rule22
  }, {
      start: 42638,
      length: 1,
      convRule: rule21
  }, {
      start: 42639,
      length: 1,
      convRule: rule22
  }, {
      start: 42640,
      length: 1,
      convRule: rule21
  }, {
      start: 42641,
      length: 1,
      convRule: rule22
  }, {
      start: 42642,
      length: 1,
      convRule: rule21
  }, {
      start: 42643,
      length: 1,
      convRule: rule22
  }, {
      start: 42644,
      length: 1,
      convRule: rule21
  }, {
      start: 42645,
      length: 1,
      convRule: rule22
  }, {
      start: 42646,
      length: 1,
      convRule: rule21
  }, {
      start: 42647,
      length: 1,
      convRule: rule22
  }, {
      start: 42786,
      length: 1,
      convRule: rule21
  }, {
      start: 42787,
      length: 1,
      convRule: rule22
  }, {
      start: 42788,
      length: 1,
      convRule: rule21
  }, {
      start: 42789,
      length: 1,
      convRule: rule22
  }, {
      start: 42790,
      length: 1,
      convRule: rule21
  }, {
      start: 42791,
      length: 1,
      convRule: rule22
  }, {
      start: 42792,
      length: 1,
      convRule: rule21
  }, {
      start: 42793,
      length: 1,
      convRule: rule22
  }, {
      start: 42794,
      length: 1,
      convRule: rule21
  }, {
      start: 42795,
      length: 1,
      convRule: rule22
  }, {
      start: 42796,
      length: 1,
      convRule: rule21
  }, {
      start: 42797,
      length: 1,
      convRule: rule22
  }, {
      start: 42798,
      length: 1,
      convRule: rule21
  }, {
      start: 42799,
      length: 1,
      convRule: rule22
  }, {
      start: 42802,
      length: 1,
      convRule: rule21
  }, {
      start: 42803,
      length: 1,
      convRule: rule22
  }, {
      start: 42804,
      length: 1,
      convRule: rule21
  }, {
      start: 42805,
      length: 1,
      convRule: rule22
  }, {
      start: 42806,
      length: 1,
      convRule: rule21
  }, {
      start: 42807,
      length: 1,
      convRule: rule22
  }, {
      start: 42808,
      length: 1,
      convRule: rule21
  }, {
      start: 42809,
      length: 1,
      convRule: rule22
  }, {
      start: 42810,
      length: 1,
      convRule: rule21
  }, {
      start: 42811,
      length: 1,
      convRule: rule22
  }, {
      start: 42812,
      length: 1,
      convRule: rule21
  }, {
      start: 42813,
      length: 1,
      convRule: rule22
  }, {
      start: 42814,
      length: 1,
      convRule: rule21
  }, {
      start: 42815,
      length: 1,
      convRule: rule22
  }, {
      start: 42816,
      length: 1,
      convRule: rule21
  }, {
      start: 42817,
      length: 1,
      convRule: rule22
  }, {
      start: 42818,
      length: 1,
      convRule: rule21
  }, {
      start: 42819,
      length: 1,
      convRule: rule22
  }, {
      start: 42820,
      length: 1,
      convRule: rule21
  }, {
      start: 42821,
      length: 1,
      convRule: rule22
  }, {
      start: 42822,
      length: 1,
      convRule: rule21
  }, {
      start: 42823,
      length: 1,
      convRule: rule22
  }, {
      start: 42824,
      length: 1,
      convRule: rule21
  }, {
      start: 42825,
      length: 1,
      convRule: rule22
  }, {
      start: 42826,
      length: 1,
      convRule: rule21
  }, {
      start: 42827,
      length: 1,
      convRule: rule22
  }, {
      start: 42828,
      length: 1,
      convRule: rule21
  }, {
      start: 42829,
      length: 1,
      convRule: rule22
  }, {
      start: 42830,
      length: 1,
      convRule: rule21
  }, {
      start: 42831,
      length: 1,
      convRule: rule22
  }, {
      start: 42832,
      length: 1,
      convRule: rule21
  }, {
      start: 42833,
      length: 1,
      convRule: rule22
  }, {
      start: 42834,
      length: 1,
      convRule: rule21
  }, {
      start: 42835,
      length: 1,
      convRule: rule22
  }, {
      start: 42836,
      length: 1,
      convRule: rule21
  }, {
      start: 42837,
      length: 1,
      convRule: rule22
  }, {
      start: 42838,
      length: 1,
      convRule: rule21
  }, {
      start: 42839,
      length: 1,
      convRule: rule22
  }, {
      start: 42840,
      length: 1,
      convRule: rule21
  }, {
      start: 42841,
      length: 1,
      convRule: rule22
  }, {
      start: 42842,
      length: 1,
      convRule: rule21
  }, {
      start: 42843,
      length: 1,
      convRule: rule22
  }, {
      start: 42844,
      length: 1,
      convRule: rule21
  }, {
      start: 42845,
      length: 1,
      convRule: rule22
  }, {
      start: 42846,
      length: 1,
      convRule: rule21
  }, {
      start: 42847,
      length: 1,
      convRule: rule22
  }, {
      start: 42848,
      length: 1,
      convRule: rule21
  }, {
      start: 42849,
      length: 1,
      convRule: rule22
  }, {
      start: 42850,
      length: 1,
      convRule: rule21
  }, {
      start: 42851,
      length: 1,
      convRule: rule22
  }, {
      start: 42852,
      length: 1,
      convRule: rule21
  }, {
      start: 42853,
      length: 1,
      convRule: rule22
  }, {
      start: 42854,
      length: 1,
      convRule: rule21
  }, {
      start: 42855,
      length: 1,
      convRule: rule22
  }, {
      start: 42856,
      length: 1,
      convRule: rule21
  }, {
      start: 42857,
      length: 1,
      convRule: rule22
  }, {
      start: 42858,
      length: 1,
      convRule: rule21
  }, {
      start: 42859,
      length: 1,
      convRule: rule22
  }, {
      start: 42860,
      length: 1,
      convRule: rule21
  }, {
      start: 42861,
      length: 1,
      convRule: rule22
  }, {
      start: 42862,
      length: 1,
      convRule: rule21
  }, {
      start: 42863,
      length: 1,
      convRule: rule22
  }, {
      start: 42873,
      length: 1,
      convRule: rule21
  }, {
      start: 42874,
      length: 1,
      convRule: rule22
  }, {
      start: 42875,
      length: 1,
      convRule: rule21
  }, {
      start: 42876,
      length: 1,
      convRule: rule22
  }, {
      start: 42877,
      length: 1,
      convRule: rule161
  }, {
      start: 42878,
      length: 1,
      convRule: rule21
  }, {
      start: 42879,
      length: 1,
      convRule: rule22
  }, {
      start: 42880,
      length: 1,
      convRule: rule21
  }, {
      start: 42881,
      length: 1,
      convRule: rule22
  }, {
      start: 42882,
      length: 1,
      convRule: rule21
  }, {
      start: 42883,
      length: 1,
      convRule: rule22
  }, {
      start: 42884,
      length: 1,
      convRule: rule21
  }, {
      start: 42885,
      length: 1,
      convRule: rule22
  }, {
      start: 42886,
      length: 1,
      convRule: rule21
  }, {
      start: 42887,
      length: 1,
      convRule: rule22
  }, {
      start: 42891,
      length: 1,
      convRule: rule21
  }, {
      start: 42892,
      length: 1,
      convRule: rule22
  }, {
      start: 42893,
      length: 1,
      convRule: rule162
  }, {
      start: 42896,
      length: 1,
      convRule: rule21
  }, {
      start: 42897,
      length: 1,
      convRule: rule22
  }, {
      start: 42912,
      length: 1,
      convRule: rule21
  }, {
      start: 42913,
      length: 1,
      convRule: rule22
  }, {
      start: 42914,
      length: 1,
      convRule: rule21
  }, {
      start: 42915,
      length: 1,
      convRule: rule22
  }, {
      start: 42916,
      length: 1,
      convRule: rule21
  }, {
      start: 42917,
      length: 1,
      convRule: rule22
  }, {
      start: 42918,
      length: 1,
      convRule: rule21
  }, {
      start: 42919,
      length: 1,
      convRule: rule22
  }, {
      start: 42920,
      length: 1,
      convRule: rule21
  }, {
      start: 42921,
      length: 1,
      convRule: rule22
  }, {
      start: 65313,
      length: 26,
      convRule: rule9
  }, {
      start: 65345,
      length: 26,
      convRule: rule12
  }, {
      start: 66560,
      length: 40,
      convRule: rule165
  }, {
      start: 66600,
      length: 40,
      convRule: rule166
  } ];
  var bsearch = function (a) {
      return function (array) {
          return function (size) {
              return function (compare) {
                  var go = function ($copy_i) {
                      return function ($copy_k) {
                          var $tco_var_i = $copy_i;
                          var $tco_done = false;
                          var $tco_result;
                          function $tco_loop(i, k) {
                              if (i > k) {
                                  $tco_done = true;
                                  return Data_Maybe.Nothing.value;
                              };
                              if (Data_Boolean.otherwise) {
                                  var j = Data_Int.floor(Data_Int.toNumber(i + k | 0) / 2.0);
                                  var v = compare(a)(array[j]);
                                  if (v instanceof Data_Ordering.EQ) {
                                      $tco_done = true;
                                      return new Data_Maybe.Just(array[j]);
                                  };
                                  if (v instanceof Data_Ordering.GT) {
                                      $tco_var_i = j + 1 | 0;
                                      $copy_k = k;
                                      return;
                                  };
                                  $tco_var_i = i;
                                  $copy_k = j - 1 | 0;
                                  return;
                              };
                              throw new Error("Failed pattern match at Data.Char.Unicode.Internal (line 4783, column 5 - line 4789, column 49): " + [ i.constructor.name, k.constructor.name ]);
                          };
                          while (!$tco_done) {
                              $tco_result = $tco_loop($tco_var_i, $copy_k);
                          };
                          return $tco_result;
                      };
                  };
                  return go(0)(size);
              };
          };
      };
  };
  var blkCmp = function (v) {
      return function (v1) {
          if (v.start >= v1.start && v.start < (v1.start + v1.length | 0)) {
              return Data_Ordering.EQ.value;
          };
          if (v.start > v1.start) {
              return Data_Ordering.GT.value;
          };
          if (Data_Boolean.otherwise) {
              return Data_Ordering.LT.value;
          };
          throw new Error("Failed pattern match at Data.Char.Unicode.Internal (line 4760, column 1 - line 4760, column 45): " + [ v.constructor.name, v1.constructor.name ]);
      };
  };
  var getRule = function (blocks) {
      return function (unichar) {
          return function (size) {
              var key = {
                  start: unichar,
                  length: 1,
                  convRule: nullrule
              };
              var maybeCharBlock = bsearch(key)(blocks)(size)(blkCmp);
              if (maybeCharBlock instanceof Data_Maybe.Nothing) {
                  return Data_Maybe.Nothing.value;
              };
              if (maybeCharBlock instanceof Data_Maybe.Just) {
                  return new Data_Maybe.Just(maybeCharBlock.value0.convRule);
              };
              throw new Error("Failed pattern match at Data.Char.Unicode.Internal (line 4773, column 8 - line 4775, column 62): " + [ maybeCharBlock.constructor.name ]);
          };
      };
  };
  var caseConv = function (f) {
      return function ($$char) {
          var maybeConversionRule = getRule(convchars)($$char)(numConvBlocks);
          if (maybeConversionRule instanceof Data_Maybe.Nothing) {
              return $$char;
          };
          if (maybeConversionRule instanceof Data_Maybe.Just) {
              return $$char + f(maybeConversionRule.value0) | 0;
          };
          throw new Error("Failed pattern match at Data.Char.Unicode.Internal (line 4850, column 8 - line 4852, column 55): " + [ maybeConversionRule.constructor.name ]);
      };
  };
  var uTowlower = caseConv(function (v) {
      return v.lowdist;
  });
  var uTowupper = caseConv(function (v) {
      return v.updist;
  });
  var checkAttrS = function (categories) {
      return function ($$char) {
          var maybeConversionRule = getRule(spacechars)($$char)(numSpaceBlocks);
          if (maybeConversionRule instanceof Data_Maybe.Nothing) {
              return false;
          };
          if (maybeConversionRule instanceof Data_Maybe.Just) {
              return Data_Maybe.isJust(Data_Array.elemIndex(Data_Eq.eqInt)(maybeConversionRule.value0.category)(categories));
          };
          throw new Error("Failed pattern match at Data.Char.Unicode.Internal (line 4807, column 8 - line 4809, column 92): " + [ maybeConversionRule.constructor.name ]);
      };
  };
  var uIswspace = checkAttrS([ gencatZS ]);
  var allchars = [ {
      start: 0,
      length: 32,
      convRule: rule0
  }, {
      start: 32,
      length: 1,
      convRule: rule1
  }, {
      start: 33,
      length: 3,
      convRule: rule2
  }, {
      start: 36,
      length: 1,
      convRule: rule3
  }, {
      start: 37,
      length: 3,
      convRule: rule2
  }, {
      start: 40,
      length: 1,
      convRule: rule4
  }, {
      start: 41,
      length: 1,
      convRule: rule5
  }, {
      start: 42,
      length: 1,
      convRule: rule2
  }, {
      start: 43,
      length: 1,
      convRule: rule6
  }, {
      start: 44,
      length: 1,
      convRule: rule2
  }, {
      start: 45,
      length: 1,
      convRule: rule7
  }, {
      start: 46,
      length: 2,
      convRule: rule2
  }, {
      start: 48,
      length: 10,
      convRule: rule8
  }, {
      start: 58,
      length: 2,
      convRule: rule2
  }, {
      start: 60,
      length: 3,
      convRule: rule6
  }, {
      start: 63,
      length: 2,
      convRule: rule2
  }, {
      start: 65,
      length: 26,
      convRule: rule9
  }, {
      start: 91,
      length: 1,
      convRule: rule4
  }, {
      start: 92,
      length: 1,
      convRule: rule2
  }, {
      start: 93,
      length: 1,
      convRule: rule5
  }, {
      start: 94,
      length: 1,
      convRule: rule10
  }, {
      start: 95,
      length: 1,
      convRule: rule11
  }, {
      start: 96,
      length: 1,
      convRule: rule10
  }, {
      start: 97,
      length: 26,
      convRule: rule12
  }, {
      start: 123,
      length: 1,
      convRule: rule4
  }, {
      start: 124,
      length: 1,
      convRule: rule6
  }, {
      start: 125,
      length: 1,
      convRule: rule5
  }, {
      start: 126,
      length: 1,
      convRule: rule6
  }, {
      start: 127,
      length: 33,
      convRule: rule0
  }, {
      start: 160,
      length: 1,
      convRule: rule1
  }, {
      start: 161,
      length: 1,
      convRule: rule2
  }, {
      start: 162,
      length: 4,
      convRule: rule3
  }, {
      start: 166,
      length: 2,
      convRule: rule13
  }, {
      start: 168,
      length: 1,
      convRule: rule10
  }, {
      start: 169,
      length: 1,
      convRule: rule13
  }, {
      start: 170,
      length: 1,
      convRule: rule14
  }, {
      start: 171,
      length: 1,
      convRule: rule15
  }, {
      start: 172,
      length: 1,
      convRule: rule6
  }, {
      start: 173,
      length: 1,
      convRule: rule16
  }, {
      start: 174,
      length: 1,
      convRule: rule13
  }, {
      start: 175,
      length: 1,
      convRule: rule10
  }, {
      start: 176,
      length: 1,
      convRule: rule13
  }, {
      start: 177,
      length: 1,
      convRule: rule6
  }, {
      start: 178,
      length: 2,
      convRule: rule17
  }, {
      start: 180,
      length: 1,
      convRule: rule10
  }, {
      start: 181,
      length: 1,
      convRule: rule18
  }, {
      start: 182,
      length: 1,
      convRule: rule13
  }, {
      start: 183,
      length: 1,
      convRule: rule2
  }, {
      start: 184,
      length: 1,
      convRule: rule10
  }, {
      start: 185,
      length: 1,
      convRule: rule17
  }, {
      start: 186,
      length: 1,
      convRule: rule14
  }, {
      start: 187,
      length: 1,
      convRule: rule19
  }, {
      start: 188,
      length: 3,
      convRule: rule17
  }, {
      start: 191,
      length: 1,
      convRule: rule2
  }, {
      start: 192,
      length: 23,
      convRule: rule9
  }, {
      start: 215,
      length: 1,
      convRule: rule6
  }, {
      start: 216,
      length: 7,
      convRule: rule9
  }, {
      start: 223,
      length: 1,
      convRule: rule14
  }, {
      start: 224,
      length: 23,
      convRule: rule12
  }, {
      start: 247,
      length: 1,
      convRule: rule6
  }, {
      start: 248,
      length: 7,
      convRule: rule12
  }, {
      start: 255,
      length: 1,
      convRule: rule20
  }, {
      start: 256,
      length: 1,
      convRule: rule21
  }, {
      start: 257,
      length: 1,
      convRule: rule22
  }, {
      start: 258,
      length: 1,
      convRule: rule21
  }, {
      start: 259,
      length: 1,
      convRule: rule22
  }, {
      start: 260,
      length: 1,
      convRule: rule21
  }, {
      start: 261,
      length: 1,
      convRule: rule22
  }, {
      start: 262,
      length: 1,
      convRule: rule21
  }, {
      start: 263,
      length: 1,
      convRule: rule22
  }, {
      start: 264,
      length: 1,
      convRule: rule21
  }, {
      start: 265,
      length: 1,
      convRule: rule22
  }, {
      start: 266,
      length: 1,
      convRule: rule21
  }, {
      start: 267,
      length: 1,
      convRule: rule22
  }, {
      start: 268,
      length: 1,
      convRule: rule21
  }, {
      start: 269,
      length: 1,
      convRule: rule22
  }, {
      start: 270,
      length: 1,
      convRule: rule21
  }, {
      start: 271,
      length: 1,
      convRule: rule22
  }, {
      start: 272,
      length: 1,
      convRule: rule21
  }, {
      start: 273,
      length: 1,
      convRule: rule22
  }, {
      start: 274,
      length: 1,
      convRule: rule21
  }, {
      start: 275,
      length: 1,
      convRule: rule22
  }, {
      start: 276,
      length: 1,
      convRule: rule21
  }, {
      start: 277,
      length: 1,
      convRule: rule22
  }, {
      start: 278,
      length: 1,
      convRule: rule21
  }, {
      start: 279,
      length: 1,
      convRule: rule22
  }, {
      start: 280,
      length: 1,
      convRule: rule21
  }, {
      start: 281,
      length: 1,
      convRule: rule22
  }, {
      start: 282,
      length: 1,
      convRule: rule21
  }, {
      start: 283,
      length: 1,
      convRule: rule22
  }, {
      start: 284,
      length: 1,
      convRule: rule21
  }, {
      start: 285,
      length: 1,
      convRule: rule22
  }, {
      start: 286,
      length: 1,
      convRule: rule21
  }, {
      start: 287,
      length: 1,
      convRule: rule22
  }, {
      start: 288,
      length: 1,
      convRule: rule21
  }, {
      start: 289,
      length: 1,
      convRule: rule22
  }, {
      start: 290,
      length: 1,
      convRule: rule21
  }, {
      start: 291,
      length: 1,
      convRule: rule22
  }, {
      start: 292,
      length: 1,
      convRule: rule21
  }, {
      start: 293,
      length: 1,
      convRule: rule22
  }, {
      start: 294,
      length: 1,
      convRule: rule21
  }, {
      start: 295,
      length: 1,
      convRule: rule22
  }, {
      start: 296,
      length: 1,
      convRule: rule21
  }, {
      start: 297,
      length: 1,
      convRule: rule22
  }, {
      start: 298,
      length: 1,
      convRule: rule21
  }, {
      start: 299,
      length: 1,
      convRule: rule22
  }, {
      start: 300,
      length: 1,
      convRule: rule21
  }, {
      start: 301,
      length: 1,
      convRule: rule22
  }, {
      start: 302,
      length: 1,
      convRule: rule21
  }, {
      start: 303,
      length: 1,
      convRule: rule22
  }, {
      start: 304,
      length: 1,
      convRule: rule23
  }, {
      start: 305,
      length: 1,
      convRule: rule24
  }, {
      start: 306,
      length: 1,
      convRule: rule21
  }, {
      start: 307,
      length: 1,
      convRule: rule22
  }, {
      start: 308,
      length: 1,
      convRule: rule21
  }, {
      start: 309,
      length: 1,
      convRule: rule22
  }, {
      start: 310,
      length: 1,
      convRule: rule21
  }, {
      start: 311,
      length: 1,
      convRule: rule22
  }, {
      start: 312,
      length: 1,
      convRule: rule14
  }, {
      start: 313,
      length: 1,
      convRule: rule21
  }, {
      start: 314,
      length: 1,
      convRule: rule22
  }, {
      start: 315,
      length: 1,
      convRule: rule21
  }, {
      start: 316,
      length: 1,
      convRule: rule22
  }, {
      start: 317,
      length: 1,
      convRule: rule21
  }, {
      start: 318,
      length: 1,
      convRule: rule22
  }, {
      start: 319,
      length: 1,
      convRule: rule21
  }, {
      start: 320,
      length: 1,
      convRule: rule22
  }, {
      start: 321,
      length: 1,
      convRule: rule21
  }, {
      start: 322,
      length: 1,
      convRule: rule22
  }, {
      start: 323,
      length: 1,
      convRule: rule21
  }, {
      start: 324,
      length: 1,
      convRule: rule22
  }, {
      start: 325,
      length: 1,
      convRule: rule21
  }, {
      start: 326,
      length: 1,
      convRule: rule22
  }, {
      start: 327,
      length: 1,
      convRule: rule21
  }, {
      start: 328,
      length: 1,
      convRule: rule22
  }, {
      start: 329,
      length: 1,
      convRule: rule14
  }, {
      start: 330,
      length: 1,
      convRule: rule21
  }, {
      start: 331,
      length: 1,
      convRule: rule22
  }, {
      start: 332,
      length: 1,
      convRule: rule21
  }, {
      start: 333,
      length: 1,
      convRule: rule22
  }, {
      start: 334,
      length: 1,
      convRule: rule21
  }, {
      start: 335,
      length: 1,
      convRule: rule22
  }, {
      start: 336,
      length: 1,
      convRule: rule21
  }, {
      start: 337,
      length: 1,
      convRule: rule22
  }, {
      start: 338,
      length: 1,
      convRule: rule21
  }, {
      start: 339,
      length: 1,
      convRule: rule22
  }, {
      start: 340,
      length: 1,
      convRule: rule21
  }, {
      start: 341,
      length: 1,
      convRule: rule22
  }, {
      start: 342,
      length: 1,
      convRule: rule21
  }, {
      start: 343,
      length: 1,
      convRule: rule22
  }, {
      start: 344,
      length: 1,
      convRule: rule21
  }, {
      start: 345,
      length: 1,
      convRule: rule22
  }, {
      start: 346,
      length: 1,
      convRule: rule21
  }, {
      start: 347,
      length: 1,
      convRule: rule22
  }, {
      start: 348,
      length: 1,
      convRule: rule21
  }, {
      start: 349,
      length: 1,
      convRule: rule22
  }, {
      start: 350,
      length: 1,
      convRule: rule21
  }, {
      start: 351,
      length: 1,
      convRule: rule22
  }, {
      start: 352,
      length: 1,
      convRule: rule21
  }, {
      start: 353,
      length: 1,
      convRule: rule22
  }, {
      start: 354,
      length: 1,
      convRule: rule21
  }, {
      start: 355,
      length: 1,
      convRule: rule22
  }, {
      start: 356,
      length: 1,
      convRule: rule21
  }, {
      start: 357,
      length: 1,
      convRule: rule22
  }, {
      start: 358,
      length: 1,
      convRule: rule21
  }, {
      start: 359,
      length: 1,
      convRule: rule22
  }, {
      start: 360,
      length: 1,
      convRule: rule21
  }, {
      start: 361,
      length: 1,
      convRule: rule22
  }, {
      start: 362,
      length: 1,
      convRule: rule21
  }, {
      start: 363,
      length: 1,
      convRule: rule22
  }, {
      start: 364,
      length: 1,
      convRule: rule21
  }, {
      start: 365,
      length: 1,
      convRule: rule22
  }, {
      start: 366,
      length: 1,
      convRule: rule21
  }, {
      start: 367,
      length: 1,
      convRule: rule22
  }, {
      start: 368,
      length: 1,
      convRule: rule21
  }, {
      start: 369,
      length: 1,
      convRule: rule22
  }, {
      start: 370,
      length: 1,
      convRule: rule21
  }, {
      start: 371,
      length: 1,
      convRule: rule22
  }, {
      start: 372,
      length: 1,
      convRule: rule21
  }, {
      start: 373,
      length: 1,
      convRule: rule22
  }, {
      start: 374,
      length: 1,
      convRule: rule21
  }, {
      start: 375,
      length: 1,
      convRule: rule22
  }, {
      start: 376,
      length: 1,
      convRule: rule25
  }, {
      start: 377,
      length: 1,
      convRule: rule21
  }, {
      start: 378,
      length: 1,
      convRule: rule22
  }, {
      start: 379,
      length: 1,
      convRule: rule21
  }, {
      start: 380,
      length: 1,
      convRule: rule22
  }, {
      start: 381,
      length: 1,
      convRule: rule21
  }, {
      start: 382,
      length: 1,
      convRule: rule22
  }, {
      start: 383,
      length: 1,
      convRule: rule26
  }, {
      start: 384,
      length: 1,
      convRule: rule27
  }, {
      start: 385,
      length: 1,
      convRule: rule28
  }, {
      start: 386,
      length: 1,
      convRule: rule21
  }, {
      start: 387,
      length: 1,
      convRule: rule22
  }, {
      start: 388,
      length: 1,
      convRule: rule21
  }, {
      start: 389,
      length: 1,
      convRule: rule22
  }, {
      start: 390,
      length: 1,
      convRule: rule29
  }, {
      start: 391,
      length: 1,
      convRule: rule21
  }, {
      start: 392,
      length: 1,
      convRule: rule22
  }, {
      start: 393,
      length: 2,
      convRule: rule30
  }, {
      start: 395,
      length: 1,
      convRule: rule21
  }, {
      start: 396,
      length: 1,
      convRule: rule22
  }, {
      start: 397,
      length: 1,
      convRule: rule14
  }, {
      start: 398,
      length: 1,
      convRule: rule31
  }, {
      start: 399,
      length: 1,
      convRule: rule32
  }, {
      start: 400,
      length: 1,
      convRule: rule33
  }, {
      start: 401,
      length: 1,
      convRule: rule21
  }, {
      start: 402,
      length: 1,
      convRule: rule22
  }, {
      start: 403,
      length: 1,
      convRule: rule30
  }, {
      start: 404,
      length: 1,
      convRule: rule34
  }, {
      start: 405,
      length: 1,
      convRule: rule35
  }, {
      start: 406,
      length: 1,
      convRule: rule36
  }, {
      start: 407,
      length: 1,
      convRule: rule37
  }, {
      start: 408,
      length: 1,
      convRule: rule21
  }, {
      start: 409,
      length: 1,
      convRule: rule22
  }, {
      start: 410,
      length: 1,
      convRule: rule38
  }, {
      start: 411,
      length: 1,
      convRule: rule14
  }, {
      start: 412,
      length: 1,
      convRule: rule36
  }, {
      start: 413,
      length: 1,
      convRule: rule39
  }, {
      start: 414,
      length: 1,
      convRule: rule40
  }, {
      start: 415,
      length: 1,
      convRule: rule41
  }, {
      start: 416,
      length: 1,
      convRule: rule21
  }, {
      start: 417,
      length: 1,
      convRule: rule22
  }, {
      start: 418,
      length: 1,
      convRule: rule21
  }, {
      start: 419,
      length: 1,
      convRule: rule22
  }, {
      start: 420,
      length: 1,
      convRule: rule21
  }, {
      start: 421,
      length: 1,
      convRule: rule22
  }, {
      start: 422,
      length: 1,
      convRule: rule42
  }, {
      start: 423,
      length: 1,
      convRule: rule21
  }, {
      start: 424,
      length: 1,
      convRule: rule22
  }, {
      start: 425,
      length: 1,
      convRule: rule42
  }, {
      start: 426,
      length: 2,
      convRule: rule14
  }, {
      start: 428,
      length: 1,
      convRule: rule21
  }, {
      start: 429,
      length: 1,
      convRule: rule22
  }, {
      start: 430,
      length: 1,
      convRule: rule42
  }, {
      start: 431,
      length: 1,
      convRule: rule21
  }, {
      start: 432,
      length: 1,
      convRule: rule22
  }, {
      start: 433,
      length: 2,
      convRule: rule43
  }, {
      start: 435,
      length: 1,
      convRule: rule21
  }, {
      start: 436,
      length: 1,
      convRule: rule22
  }, {
      start: 437,
      length: 1,
      convRule: rule21
  }, {
      start: 438,
      length: 1,
      convRule: rule22
  }, {
      start: 439,
      length: 1,
      convRule: rule44
  }, {
      start: 440,
      length: 1,
      convRule: rule21
  }, {
      start: 441,
      length: 1,
      convRule: rule22
  }, {
      start: 442,
      length: 1,
      convRule: rule14
  }, {
      start: 443,
      length: 1,
      convRule: rule45
  }, {
      start: 444,
      length: 1,
      convRule: rule21
  }, {
      start: 445,
      length: 1,
      convRule: rule22
  }, {
      start: 446,
      length: 1,
      convRule: rule14
  }, {
      start: 447,
      length: 1,
      convRule: rule46
  }, {
      start: 448,
      length: 4,
      convRule: rule45
  }, {
      start: 452,
      length: 1,
      convRule: rule47
  }, {
      start: 453,
      length: 1,
      convRule: rule48
  }, {
      start: 454,
      length: 1,
      convRule: rule49
  }, {
      start: 455,
      length: 1,
      convRule: rule47
  }, {
      start: 456,
      length: 1,
      convRule: rule48
  }, {
      start: 457,
      length: 1,
      convRule: rule49
  }, {
      start: 458,
      length: 1,
      convRule: rule47
  }, {
      start: 459,
      length: 1,
      convRule: rule48
  }, {
      start: 460,
      length: 1,
      convRule: rule49
  }, {
      start: 461,
      length: 1,
      convRule: rule21
  }, {
      start: 462,
      length: 1,
      convRule: rule22
  }, {
      start: 463,
      length: 1,
      convRule: rule21
  }, {
      start: 464,
      length: 1,
      convRule: rule22
  }, {
      start: 465,
      length: 1,
      convRule: rule21
  }, {
      start: 466,
      length: 1,
      convRule: rule22
  }, {
      start: 467,
      length: 1,
      convRule: rule21
  }, {
      start: 468,
      length: 1,
      convRule: rule22
  }, {
      start: 469,
      length: 1,
      convRule: rule21
  }, {
      start: 470,
      length: 1,
      convRule: rule22
  }, {
      start: 471,
      length: 1,
      convRule: rule21
  }, {
      start: 472,
      length: 1,
      convRule: rule22
  }, {
      start: 473,
      length: 1,
      convRule: rule21
  }, {
      start: 474,
      length: 1,
      convRule: rule22
  }, {
      start: 475,
      length: 1,
      convRule: rule21
  }, {
      start: 476,
      length: 1,
      convRule: rule22
  }, {
      start: 477,
      length: 1,
      convRule: rule50
  }, {
      start: 478,
      length: 1,
      convRule: rule21
  }, {
      start: 479,
      length: 1,
      convRule: rule22
  }, {
      start: 480,
      length: 1,
      convRule: rule21
  }, {
      start: 481,
      length: 1,
      convRule: rule22
  }, {
      start: 482,
      length: 1,
      convRule: rule21
  }, {
      start: 483,
      length: 1,
      convRule: rule22
  }, {
      start: 484,
      length: 1,
      convRule: rule21
  }, {
      start: 485,
      length: 1,
      convRule: rule22
  }, {
      start: 486,
      length: 1,
      convRule: rule21
  }, {
      start: 487,
      length: 1,
      convRule: rule22
  }, {
      start: 488,
      length: 1,
      convRule: rule21
  }, {
      start: 489,
      length: 1,
      convRule: rule22
  }, {
      start: 490,
      length: 1,
      convRule: rule21
  }, {
      start: 491,
      length: 1,
      convRule: rule22
  }, {
      start: 492,
      length: 1,
      convRule: rule21
  }, {
      start: 493,
      length: 1,
      convRule: rule22
  }, {
      start: 494,
      length: 1,
      convRule: rule21
  }, {
      start: 495,
      length: 1,
      convRule: rule22
  }, {
      start: 496,
      length: 1,
      convRule: rule14
  }, {
      start: 497,
      length: 1,
      convRule: rule47
  }, {
      start: 498,
      length: 1,
      convRule: rule48
  }, {
      start: 499,
      length: 1,
      convRule: rule49
  }, {
      start: 500,
      length: 1,
      convRule: rule21
  }, {
      start: 501,
      length: 1,
      convRule: rule22
  }, {
      start: 502,
      length: 1,
      convRule: rule51
  }, {
      start: 503,
      length: 1,
      convRule: rule52
  }, {
      start: 504,
      length: 1,
      convRule: rule21
  }, {
      start: 505,
      length: 1,
      convRule: rule22
  }, {
      start: 506,
      length: 1,
      convRule: rule21
  }, {
      start: 507,
      length: 1,
      convRule: rule22
  }, {
      start: 508,
      length: 1,
      convRule: rule21
  }, {
      start: 509,
      length: 1,
      convRule: rule22
  }, {
      start: 510,
      length: 1,
      convRule: rule21
  }, {
      start: 511,
      length: 1,
      convRule: rule22
  }, {
      start: 512,
      length: 1,
      convRule: rule21
  }, {
      start: 513,
      length: 1,
      convRule: rule22
  }, {
      start: 514,
      length: 1,
      convRule: rule21
  }, {
      start: 515,
      length: 1,
      convRule: rule22
  }, {
      start: 516,
      length: 1,
      convRule: rule21
  }, {
      start: 517,
      length: 1,
      convRule: rule22
  }, {
      start: 518,
      length: 1,
      convRule: rule21
  }, {
      start: 519,
      length: 1,
      convRule: rule22
  }, {
      start: 520,
      length: 1,
      convRule: rule21
  }, {
      start: 521,
      length: 1,
      convRule: rule22
  }, {
      start: 522,
      length: 1,
      convRule: rule21
  }, {
      start: 523,
      length: 1,
      convRule: rule22
  }, {
      start: 524,
      length: 1,
      convRule: rule21
  }, {
      start: 525,
      length: 1,
      convRule: rule22
  }, {
      start: 526,
      length: 1,
      convRule: rule21
  }, {
      start: 527,
      length: 1,
      convRule: rule22
  }, {
      start: 528,
      length: 1,
      convRule: rule21
  }, {
      start: 529,
      length: 1,
      convRule: rule22
  }, {
      start: 530,
      length: 1,
      convRule: rule21
  }, {
      start: 531,
      length: 1,
      convRule: rule22
  }, {
      start: 532,
      length: 1,
      convRule: rule21
  }, {
      start: 533,
      length: 1,
      convRule: rule22
  }, {
      start: 534,
      length: 1,
      convRule: rule21
  }, {
      start: 535,
      length: 1,
      convRule: rule22
  }, {
      start: 536,
      length: 1,
      convRule: rule21
  }, {
      start: 537,
      length: 1,
      convRule: rule22
  }, {
      start: 538,
      length: 1,
      convRule: rule21
  }, {
      start: 539,
      length: 1,
      convRule: rule22
  }, {
      start: 540,
      length: 1,
      convRule: rule21
  }, {
      start: 541,
      length: 1,
      convRule: rule22
  }, {
      start: 542,
      length: 1,
      convRule: rule21
  }, {
      start: 543,
      length: 1,
      convRule: rule22
  }, {
      start: 544,
      length: 1,
      convRule: rule53
  }, {
      start: 545,
      length: 1,
      convRule: rule14
  }, {
      start: 546,
      length: 1,
      convRule: rule21
  }, {
      start: 547,
      length: 1,
      convRule: rule22
  }, {
      start: 548,
      length: 1,
      convRule: rule21
  }, {
      start: 549,
      length: 1,
      convRule: rule22
  }, {
      start: 550,
      length: 1,
      convRule: rule21
  }, {
      start: 551,
      length: 1,
      convRule: rule22
  }, {
      start: 552,
      length: 1,
      convRule: rule21
  }, {
      start: 553,
      length: 1,
      convRule: rule22
  }, {
      start: 554,
      length: 1,
      convRule: rule21
  }, {
      start: 555,
      length: 1,
      convRule: rule22
  }, {
      start: 556,
      length: 1,
      convRule: rule21
  }, {
      start: 557,
      length: 1,
      convRule: rule22
  }, {
      start: 558,
      length: 1,
      convRule: rule21
  }, {
      start: 559,
      length: 1,
      convRule: rule22
  }, {
      start: 560,
      length: 1,
      convRule: rule21
  }, {
      start: 561,
      length: 1,
      convRule: rule22
  }, {
      start: 562,
      length: 1,
      convRule: rule21
  }, {
      start: 563,
      length: 1,
      convRule: rule22
  }, {
      start: 564,
      length: 6,
      convRule: rule14
  }, {
      start: 570,
      length: 1,
      convRule: rule54
  }, {
      start: 571,
      length: 1,
      convRule: rule21
  }, {
      start: 572,
      length: 1,
      convRule: rule22
  }, {
      start: 573,
      length: 1,
      convRule: rule55
  }, {
      start: 574,
      length: 1,
      convRule: rule56
  }, {
      start: 575,
      length: 2,
      convRule: rule57
  }, {
      start: 577,
      length: 1,
      convRule: rule21
  }, {
      start: 578,
      length: 1,
      convRule: rule22
  }, {
      start: 579,
      length: 1,
      convRule: rule58
  }, {
      start: 580,
      length: 1,
      convRule: rule59
  }, {
      start: 581,
      length: 1,
      convRule: rule60
  }, {
      start: 582,
      length: 1,
      convRule: rule21
  }, {
      start: 583,
      length: 1,
      convRule: rule22
  }, {
      start: 584,
      length: 1,
      convRule: rule21
  }, {
      start: 585,
      length: 1,
      convRule: rule22
  }, {
      start: 586,
      length: 1,
      convRule: rule21
  }, {
      start: 587,
      length: 1,
      convRule: rule22
  }, {
      start: 588,
      length: 1,
      convRule: rule21
  }, {
      start: 589,
      length: 1,
      convRule: rule22
  }, {
      start: 590,
      length: 1,
      convRule: rule21
  }, {
      start: 591,
      length: 1,
      convRule: rule22
  }, {
      start: 592,
      length: 1,
      convRule: rule61
  }, {
      start: 593,
      length: 1,
      convRule: rule62
  }, {
      start: 594,
      length: 1,
      convRule: rule63
  }, {
      start: 595,
      length: 1,
      convRule: rule64
  }, {
      start: 596,
      length: 1,
      convRule: rule65
  }, {
      start: 597,
      length: 1,
      convRule: rule14
  }, {
      start: 598,
      length: 2,
      convRule: rule66
  }, {
      start: 600,
      length: 1,
      convRule: rule14
  }, {
      start: 601,
      length: 1,
      convRule: rule67
  }, {
      start: 602,
      length: 1,
      convRule: rule14
  }, {
      start: 603,
      length: 1,
      convRule: rule68
  }, {
      start: 604,
      length: 4,
      convRule: rule14
  }, {
      start: 608,
      length: 1,
      convRule: rule66
  }, {
      start: 609,
      length: 2,
      convRule: rule14
  }, {
      start: 611,
      length: 1,
      convRule: rule69
  }, {
      start: 612,
      length: 1,
      convRule: rule14
  }, {
      start: 613,
      length: 1,
      convRule: rule70
  }, {
      start: 614,
      length: 2,
      convRule: rule14
  }, {
      start: 616,
      length: 1,
      convRule: rule71
  }, {
      start: 617,
      length: 1,
      convRule: rule72
  }, {
      start: 618,
      length: 1,
      convRule: rule14
  }, {
      start: 619,
      length: 1,
      convRule: rule73
  }, {
      start: 620,
      length: 3,
      convRule: rule14
  }, {
      start: 623,
      length: 1,
      convRule: rule72
  }, {
      start: 624,
      length: 1,
      convRule: rule14
  }, {
      start: 625,
      length: 1,
      convRule: rule74
  }, {
      start: 626,
      length: 1,
      convRule: rule75
  }, {
      start: 627,
      length: 2,
      convRule: rule14
  }, {
      start: 629,
      length: 1,
      convRule: rule76
  }, {
      start: 630,
      length: 7,
      convRule: rule14
  }, {
      start: 637,
      length: 1,
      convRule: rule77
  }, {
      start: 638,
      length: 2,
      convRule: rule14
  }, {
      start: 640,
      length: 1,
      convRule: rule78
  }, {
      start: 641,
      length: 2,
      convRule: rule14
  }, {
      start: 643,
      length: 1,
      convRule: rule78
  }, {
      start: 644,
      length: 4,
      convRule: rule14
  }, {
      start: 648,
      length: 1,
      convRule: rule78
  }, {
      start: 649,
      length: 1,
      convRule: rule79
  }, {
      start: 650,
      length: 2,
      convRule: rule80
  }, {
      start: 652,
      length: 1,
      convRule: rule81
  }, {
      start: 653,
      length: 5,
      convRule: rule14
  }, {
      start: 658,
      length: 1,
      convRule: rule82
  }, {
      start: 659,
      length: 1,
      convRule: rule14
  }, {
      start: 660,
      length: 1,
      convRule: rule45
  }, {
      start: 661,
      length: 27,
      convRule: rule14
  }, {
      start: 688,
      length: 18,
      convRule: rule83
  }, {
      start: 706,
      length: 4,
      convRule: rule10
  }, {
      start: 710,
      length: 12,
      convRule: rule83
  }, {
      start: 722,
      length: 14,
      convRule: rule10
  }, {
      start: 736,
      length: 5,
      convRule: rule83
  }, {
      start: 741,
      length: 7,
      convRule: rule10
  }, {
      start: 748,
      length: 1,
      convRule: rule83
  }, {
      start: 749,
      length: 1,
      convRule: rule10
  }, {
      start: 750,
      length: 1,
      convRule: rule83
  }, {
      start: 751,
      length: 17,
      convRule: rule10
  }, {
      start: 768,
      length: 69,
      convRule: rule84
  }, {
      start: 837,
      length: 1,
      convRule: rule85
  }, {
      start: 838,
      length: 42,
      convRule: rule84
  }, {
      start: 880,
      length: 1,
      convRule: rule21
  }, {
      start: 881,
      length: 1,
      convRule: rule22
  }, {
      start: 882,
      length: 1,
      convRule: rule21
  }, {
      start: 883,
      length: 1,
      convRule: rule22
  }, {
      start: 884,
      length: 1,
      convRule: rule83
  }, {
      start: 885,
      length: 1,
      convRule: rule10
  }, {
      start: 886,
      length: 1,
      convRule: rule21
  }, {
      start: 887,
      length: 1,
      convRule: rule22
  }, {
      start: 890,
      length: 1,
      convRule: rule83
  }, {
      start: 891,
      length: 3,
      convRule: rule40
  }, {
      start: 894,
      length: 1,
      convRule: rule2
  }, {
      start: 900,
      length: 2,
      convRule: rule10
  }, {
      start: 902,
      length: 1,
      convRule: rule86
  }, {
      start: 903,
      length: 1,
      convRule: rule2
  }, {
      start: 904,
      length: 3,
      convRule: rule87
  }, {
      start: 908,
      length: 1,
      convRule: rule88
  }, {
      start: 910,
      length: 2,
      convRule: rule89
  }, {
      start: 912,
      length: 1,
      convRule: rule14
  }, {
      start: 913,
      length: 17,
      convRule: rule9
  }, {
      start: 931,
      length: 9,
      convRule: rule9
  }, {
      start: 940,
      length: 1,
      convRule: rule90
  }, {
      start: 941,
      length: 3,
      convRule: rule91
  }, {
      start: 944,
      length: 1,
      convRule: rule14
  }, {
      start: 945,
      length: 17,
      convRule: rule12
  }, {
      start: 962,
      length: 1,
      convRule: rule92
  }, {
      start: 963,
      length: 9,
      convRule: rule12
  }, {
      start: 972,
      length: 1,
      convRule: rule93
  }, {
      start: 973,
      length: 2,
      convRule: rule94
  }, {
      start: 975,
      length: 1,
      convRule: rule95
  }, {
      start: 976,
      length: 1,
      convRule: rule96
  }, {
      start: 977,
      length: 1,
      convRule: rule97
  }, {
      start: 978,
      length: 3,
      convRule: rule98
  }, {
      start: 981,
      length: 1,
      convRule: rule99
  }, {
      start: 982,
      length: 1,
      convRule: rule100
  }, {
      start: 983,
      length: 1,
      convRule: rule101
  }, {
      start: 984,
      length: 1,
      convRule: rule21
  }, {
      start: 985,
      length: 1,
      convRule: rule22
  }, {
      start: 986,
      length: 1,
      convRule: rule21
  }, {
      start: 987,
      length: 1,
      convRule: rule22
  }, {
      start: 988,
      length: 1,
      convRule: rule21
  }, {
      start: 989,
      length: 1,
      convRule: rule22
  }, {
      start: 990,
      length: 1,
      convRule: rule21
  }, {
      start: 991,
      length: 1,
      convRule: rule22
  }, {
      start: 992,
      length: 1,
      convRule: rule21
  }, {
      start: 993,
      length: 1,
      convRule: rule22
  }, {
      start: 994,
      length: 1,
      convRule: rule21
  }, {
      start: 995,
      length: 1,
      convRule: rule22
  }, {
      start: 996,
      length: 1,
      convRule: rule21
  }, {
      start: 997,
      length: 1,
      convRule: rule22
  }, {
      start: 998,
      length: 1,
      convRule: rule21
  }, {
      start: 999,
      length: 1,
      convRule: rule22
  }, {
      start: 1000,
      length: 1,
      convRule: rule21
  }, {
      start: 1001,
      length: 1,
      convRule: rule22
  }, {
      start: 1002,
      length: 1,
      convRule: rule21
  }, {
      start: 1003,
      length: 1,
      convRule: rule22
  }, {
      start: 1004,
      length: 1,
      convRule: rule21
  }, {
      start: 1005,
      length: 1,
      convRule: rule22
  }, {
      start: 1006,
      length: 1,
      convRule: rule21
  }, {
      start: 1007,
      length: 1,
      convRule: rule22
  }, {
      start: 1008,
      length: 1,
      convRule: rule102
  }, {
      start: 1009,
      length: 1,
      convRule: rule103
  }, {
      start: 1010,
      length: 1,
      convRule: rule104
  }, {
      start: 1011,
      length: 1,
      convRule: rule14
  }, {
      start: 1012,
      length: 1,
      convRule: rule105
  }, {
      start: 1013,
      length: 1,
      convRule: rule106
  }, {
      start: 1014,
      length: 1,
      convRule: rule6
  }, {
      start: 1015,
      length: 1,
      convRule: rule21
  }, {
      start: 1016,
      length: 1,
      convRule: rule22
  }, {
      start: 1017,
      length: 1,
      convRule: rule107
  }, {
      start: 1018,
      length: 1,
      convRule: rule21
  }, {
      start: 1019,
      length: 1,
      convRule: rule22
  }, {
      start: 1020,
      length: 1,
      convRule: rule14
  }, {
      start: 1021,
      length: 3,
      convRule: rule53
  }, {
      start: 1024,
      length: 16,
      convRule: rule108
  }, {
      start: 1040,
      length: 32,
      convRule: rule9
  }, {
      start: 1072,
      length: 32,
      convRule: rule12
  }, {
      start: 1104,
      length: 16,
      convRule: rule103
  }, {
      start: 1120,
      length: 1,
      convRule: rule21
  }, {
      start: 1121,
      length: 1,
      convRule: rule22
  }, {
      start: 1122,
      length: 1,
      convRule: rule21
  }, {
      start: 1123,
      length: 1,
      convRule: rule22
  }, {
      start: 1124,
      length: 1,
      convRule: rule21
  }, {
      start: 1125,
      length: 1,
      convRule: rule22
  }, {
      start: 1126,
      length: 1,
      convRule: rule21
  }, {
      start: 1127,
      length: 1,
      convRule: rule22
  }, {
      start: 1128,
      length: 1,
      convRule: rule21
  }, {
      start: 1129,
      length: 1,
      convRule: rule22
  }, {
      start: 1130,
      length: 1,
      convRule: rule21
  }, {
      start: 1131,
      length: 1,
      convRule: rule22
  }, {
      start: 1132,
      length: 1,
      convRule: rule21
  }, {
      start: 1133,
      length: 1,
      convRule: rule22
  }, {
      start: 1134,
      length: 1,
      convRule: rule21
  }, {
      start: 1135,
      length: 1,
      convRule: rule22
  }, {
      start: 1136,
      length: 1,
      convRule: rule21
  }, {
      start: 1137,
      length: 1,
      convRule: rule22
  }, {
      start: 1138,
      length: 1,
      convRule: rule21
  }, {
      start: 1139,
      length: 1,
      convRule: rule22
  }, {
      start: 1140,
      length: 1,
      convRule: rule21
  }, {
      start: 1141,
      length: 1,
      convRule: rule22
  }, {
      start: 1142,
      length: 1,
      convRule: rule21
  }, {
      start: 1143,
      length: 1,
      convRule: rule22
  }, {
      start: 1144,
      length: 1,
      convRule: rule21
  }, {
      start: 1145,
      length: 1,
      convRule: rule22
  }, {
      start: 1146,
      length: 1,
      convRule: rule21
  }, {
      start: 1147,
      length: 1,
      convRule: rule22
  }, {
      start: 1148,
      length: 1,
      convRule: rule21
  }, {
      start: 1149,
      length: 1,
      convRule: rule22
  }, {
      start: 1150,
      length: 1,
      convRule: rule21
  }, {
      start: 1151,
      length: 1,
      convRule: rule22
  }, {
      start: 1152,
      length: 1,
      convRule: rule21
  }, {
      start: 1153,
      length: 1,
      convRule: rule22
  }, {
      start: 1154,
      length: 1,
      convRule: rule13
  }, {
      start: 1155,
      length: 5,
      convRule: rule84
  }, {
      start: 1160,
      length: 2,
      convRule: rule109
  }, {
      start: 1162,
      length: 1,
      convRule: rule21
  }, {
      start: 1163,
      length: 1,
      convRule: rule22
  }, {
      start: 1164,
      length: 1,
      convRule: rule21
  }, {
      start: 1165,
      length: 1,
      convRule: rule22
  }, {
      start: 1166,
      length: 1,
      convRule: rule21
  }, {
      start: 1167,
      length: 1,
      convRule: rule22
  }, {
      start: 1168,
      length: 1,
      convRule: rule21
  }, {
      start: 1169,
      length: 1,
      convRule: rule22
  }, {
      start: 1170,
      length: 1,
      convRule: rule21
  }, {
      start: 1171,
      length: 1,
      convRule: rule22
  }, {
      start: 1172,
      length: 1,
      convRule: rule21
  }, {
      start: 1173,
      length: 1,
      convRule: rule22
  }, {
      start: 1174,
      length: 1,
      convRule: rule21
  }, {
      start: 1175,
      length: 1,
      convRule: rule22
  }, {
      start: 1176,
      length: 1,
      convRule: rule21
  }, {
      start: 1177,
      length: 1,
      convRule: rule22
  }, {
      start: 1178,
      length: 1,
      convRule: rule21
  }, {
      start: 1179,
      length: 1,
      convRule: rule22
  }, {
      start: 1180,
      length: 1,
      convRule: rule21
  }, {
      start: 1181,
      length: 1,
      convRule: rule22
  }, {
      start: 1182,
      length: 1,
      convRule: rule21
  }, {
      start: 1183,
      length: 1,
      convRule: rule22
  }, {
      start: 1184,
      length: 1,
      convRule: rule21
  }, {
      start: 1185,
      length: 1,
      convRule: rule22
  }, {
      start: 1186,
      length: 1,
      convRule: rule21
  }, {
      start: 1187,
      length: 1,
      convRule: rule22
  }, {
      start: 1188,
      length: 1,
      convRule: rule21
  }, {
      start: 1189,
      length: 1,
      convRule: rule22
  }, {
      start: 1190,
      length: 1,
      convRule: rule21
  }, {
      start: 1191,
      length: 1,
      convRule: rule22
  }, {
      start: 1192,
      length: 1,
      convRule: rule21
  }, {
      start: 1193,
      length: 1,
      convRule: rule22
  }, {
      start: 1194,
      length: 1,
      convRule: rule21
  }, {
      start: 1195,
      length: 1,
      convRule: rule22
  }, {
      start: 1196,
      length: 1,
      convRule: rule21
  }, {
      start: 1197,
      length: 1,
      convRule: rule22
  }, {
      start: 1198,
      length: 1,
      convRule: rule21
  }, {
      start: 1199,
      length: 1,
      convRule: rule22
  }, {
      start: 1200,
      length: 1,
      convRule: rule21
  }, {
      start: 1201,
      length: 1,
      convRule: rule22
  }, {
      start: 1202,
      length: 1,
      convRule: rule21
  }, {
      start: 1203,
      length: 1,
      convRule: rule22
  }, {
      start: 1204,
      length: 1,
      convRule: rule21
  }, {
      start: 1205,
      length: 1,
      convRule: rule22
  }, {
      start: 1206,
      length: 1,
      convRule: rule21
  }, {
      start: 1207,
      length: 1,
      convRule: rule22
  }, {
      start: 1208,
      length: 1,
      convRule: rule21
  }, {
      start: 1209,
      length: 1,
      convRule: rule22
  }, {
      start: 1210,
      length: 1,
      convRule: rule21
  }, {
      start: 1211,
      length: 1,
      convRule: rule22
  }, {
      start: 1212,
      length: 1,
      convRule: rule21
  }, {
      start: 1213,
      length: 1,
      convRule: rule22
  }, {
      start: 1214,
      length: 1,
      convRule: rule21
  }, {
      start: 1215,
      length: 1,
      convRule: rule22
  }, {
      start: 1216,
      length: 1,
      convRule: rule110
  }, {
      start: 1217,
      length: 1,
      convRule: rule21
  }, {
      start: 1218,
      length: 1,
      convRule: rule22
  }, {
      start: 1219,
      length: 1,
      convRule: rule21
  }, {
      start: 1220,
      length: 1,
      convRule: rule22
  }, {
      start: 1221,
      length: 1,
      convRule: rule21
  }, {
      start: 1222,
      length: 1,
      convRule: rule22
  }, {
      start: 1223,
      length: 1,
      convRule: rule21
  }, {
      start: 1224,
      length: 1,
      convRule: rule22
  }, {
      start: 1225,
      length: 1,
      convRule: rule21
  }, {
      start: 1226,
      length: 1,
      convRule: rule22
  }, {
      start: 1227,
      length: 1,
      convRule: rule21
  }, {
      start: 1228,
      length: 1,
      convRule: rule22
  }, {
      start: 1229,
      length: 1,
      convRule: rule21
  }, {
      start: 1230,
      length: 1,
      convRule: rule22
  }, {
      start: 1231,
      length: 1,
      convRule: rule111
  }, {
      start: 1232,
      length: 1,
      convRule: rule21
  }, {
      start: 1233,
      length: 1,
      convRule: rule22
  }, {
      start: 1234,
      length: 1,
      convRule: rule21
  }, {
      start: 1235,
      length: 1,
      convRule: rule22
  }, {
      start: 1236,
      length: 1,
      convRule: rule21
  }, {
      start: 1237,
      length: 1,
      convRule: rule22
  }, {
      start: 1238,
      length: 1,
      convRule: rule21
  }, {
      start: 1239,
      length: 1,
      convRule: rule22
  }, {
      start: 1240,
      length: 1,
      convRule: rule21
  }, {
      start: 1241,
      length: 1,
      convRule: rule22
  }, {
      start: 1242,
      length: 1,
      convRule: rule21
  }, {
      start: 1243,
      length: 1,
      convRule: rule22
  }, {
      start: 1244,
      length: 1,
      convRule: rule21
  }, {
      start: 1245,
      length: 1,
      convRule: rule22
  }, {
      start: 1246,
      length: 1,
      convRule: rule21
  }, {
      start: 1247,
      length: 1,
      convRule: rule22
  }, {
      start: 1248,
      length: 1,
      convRule: rule21
  }, {
      start: 1249,
      length: 1,
      convRule: rule22
  }, {
      start: 1250,
      length: 1,
      convRule: rule21
  }, {
      start: 1251,
      length: 1,
      convRule: rule22
  }, {
      start: 1252,
      length: 1,
      convRule: rule21
  }, {
      start: 1253,
      length: 1,
      convRule: rule22
  }, {
      start: 1254,
      length: 1,
      convRule: rule21
  }, {
      start: 1255,
      length: 1,
      convRule: rule22
  }, {
      start: 1256,
      length: 1,
      convRule: rule21
  }, {
      start: 1257,
      length: 1,
      convRule: rule22
  }, {
      start: 1258,
      length: 1,
      convRule: rule21
  }, {
      start: 1259,
      length: 1,
      convRule: rule22
  }, {
      start: 1260,
      length: 1,
      convRule: rule21
  }, {
      start: 1261,
      length: 1,
      convRule: rule22
  }, {
      start: 1262,
      length: 1,
      convRule: rule21
  }, {
      start: 1263,
      length: 1,
      convRule: rule22
  }, {
      start: 1264,
      length: 1,
      convRule: rule21
  }, {
      start: 1265,
      length: 1,
      convRule: rule22
  }, {
      start: 1266,
      length: 1,
      convRule: rule21
  }, {
      start: 1267,
      length: 1,
      convRule: rule22
  }, {
      start: 1268,
      length: 1,
      convRule: rule21
  }, {
      start: 1269,
      length: 1,
      convRule: rule22
  }, {
      start: 1270,
      length: 1,
      convRule: rule21
  }, {
      start: 1271,
      length: 1,
      convRule: rule22
  }, {
      start: 1272,
      length: 1,
      convRule: rule21
  }, {
      start: 1273,
      length: 1,
      convRule: rule22
  }, {
      start: 1274,
      length: 1,
      convRule: rule21
  }, {
      start: 1275,
      length: 1,
      convRule: rule22
  }, {
      start: 1276,
      length: 1,
      convRule: rule21
  }, {
      start: 1277,
      length: 1,
      convRule: rule22
  }, {
      start: 1278,
      length: 1,
      convRule: rule21
  }, {
      start: 1279,
      length: 1,
      convRule: rule22
  }, {
      start: 1280,
      length: 1,
      convRule: rule21
  }, {
      start: 1281,
      length: 1,
      convRule: rule22
  }, {
      start: 1282,
      length: 1,
      convRule: rule21
  }, {
      start: 1283,
      length: 1,
      convRule: rule22
  }, {
      start: 1284,
      length: 1,
      convRule: rule21
  }, {
      start: 1285,
      length: 1,
      convRule: rule22
  }, {
      start: 1286,
      length: 1,
      convRule: rule21
  }, {
      start: 1287,
      length: 1,
      convRule: rule22
  }, {
      start: 1288,
      length: 1,
      convRule: rule21
  }, {
      start: 1289,
      length: 1,
      convRule: rule22
  }, {
      start: 1290,
      length: 1,
      convRule: rule21
  }, {
      start: 1291,
      length: 1,
      convRule: rule22
  }, {
      start: 1292,
      length: 1,
      convRule: rule21
  }, {
      start: 1293,
      length: 1,
      convRule: rule22
  }, {
      start: 1294,
      length: 1,
      convRule: rule21
  }, {
      start: 1295,
      length: 1,
      convRule: rule22
  }, {
      start: 1296,
      length: 1,
      convRule: rule21
  }, {
      start: 1297,
      length: 1,
      convRule: rule22
  }, {
      start: 1298,
      length: 1,
      convRule: rule21
  }, {
      start: 1299,
      length: 1,
      convRule: rule22
  }, {
      start: 1300,
      length: 1,
      convRule: rule21
  }, {
      start: 1301,
      length: 1,
      convRule: rule22
  }, {
      start: 1302,
      length: 1,
      convRule: rule21
  }, {
      start: 1303,
      length: 1,
      convRule: rule22
  }, {
      start: 1304,
      length: 1,
      convRule: rule21
  }, {
      start: 1305,
      length: 1,
      convRule: rule22
  }, {
      start: 1306,
      length: 1,
      convRule: rule21
  }, {
      start: 1307,
      length: 1,
      convRule: rule22
  }, {
      start: 1308,
      length: 1,
      convRule: rule21
  }, {
      start: 1309,
      length: 1,
      convRule: rule22
  }, {
      start: 1310,
      length: 1,
      convRule: rule21
  }, {
      start: 1311,
      length: 1,
      convRule: rule22
  }, {
      start: 1312,
      length: 1,
      convRule: rule21
  }, {
      start: 1313,
      length: 1,
      convRule: rule22
  }, {
      start: 1314,
      length: 1,
      convRule: rule21
  }, {
      start: 1315,
      length: 1,
      convRule: rule22
  }, {
      start: 1316,
      length: 1,
      convRule: rule21
  }, {
      start: 1317,
      length: 1,
      convRule: rule22
  }, {
      start: 1318,
      length: 1,
      convRule: rule21
  }, {
      start: 1319,
      length: 1,
      convRule: rule22
  }, {
      start: 1329,
      length: 38,
      convRule: rule112
  }, {
      start: 1369,
      length: 1,
      convRule: rule83
  }, {
      start: 1370,
      length: 6,
      convRule: rule2
  }, {
      start: 1377,
      length: 38,
      convRule: rule113
  }, {
      start: 1415,
      length: 1,
      convRule: rule14
  }, {
      start: 1417,
      length: 1,
      convRule: rule2
  }, {
      start: 1418,
      length: 1,
      convRule: rule7
  }, {
      start: 1425,
      length: 45,
      convRule: rule84
  }, {
      start: 1470,
      length: 1,
      convRule: rule7
  }, {
      start: 1471,
      length: 1,
      convRule: rule84
  }, {
      start: 1472,
      length: 1,
      convRule: rule2
  }, {
      start: 1473,
      length: 2,
      convRule: rule84
  }, {
      start: 1475,
      length: 1,
      convRule: rule2
  }, {
      start: 1476,
      length: 2,
      convRule: rule84
  }, {
      start: 1478,
      length: 1,
      convRule: rule2
  }, {
      start: 1479,
      length: 1,
      convRule: rule84
  }, {
      start: 1488,
      length: 27,
      convRule: rule45
  }, {
      start: 1520,
      length: 3,
      convRule: rule45
  }, {
      start: 1523,
      length: 2,
      convRule: rule2
  }, {
      start: 1536,
      length: 4,
      convRule: rule16
  }, {
      start: 1542,
      length: 3,
      convRule: rule6
  }, {
      start: 1545,
      length: 2,
      convRule: rule2
  }, {
      start: 1547,
      length: 1,
      convRule: rule3
  }, {
      start: 1548,
      length: 2,
      convRule: rule2
  }, {
      start: 1550,
      length: 2,
      convRule: rule13
  }, {
      start: 1552,
      length: 11,
      convRule: rule84
  }, {
      start: 1563,
      length: 1,
      convRule: rule2
  }, {
      start: 1566,
      length: 2,
      convRule: rule2
  }, {
      start: 1568,
      length: 32,
      convRule: rule45
  }, {
      start: 1600,
      length: 1,
      convRule: rule83
  }, {
      start: 1601,
      length: 10,
      convRule: rule45
  }, {
      start: 1611,
      length: 21,
      convRule: rule84
  }, {
      start: 1632,
      length: 10,
      convRule: rule8
  }, {
      start: 1642,
      length: 4,
      convRule: rule2
  }, {
      start: 1646,
      length: 2,
      convRule: rule45
  }, {
      start: 1648,
      length: 1,
      convRule: rule84
  }, {
      start: 1649,
      length: 99,
      convRule: rule45
  }, {
      start: 1748,
      length: 1,
      convRule: rule2
  }, {
      start: 1749,
      length: 1,
      convRule: rule45
  }, {
      start: 1750,
      length: 7,
      convRule: rule84
  }, {
      start: 1757,
      length: 1,
      convRule: rule16
  }, {
      start: 1758,
      length: 1,
      convRule: rule13
  }, {
      start: 1759,
      length: 6,
      convRule: rule84
  }, {
      start: 1765,
      length: 2,
      convRule: rule83
  }, {
      start: 1767,
      length: 2,
      convRule: rule84
  }, {
      start: 1769,
      length: 1,
      convRule: rule13
  }, {
      start: 1770,
      length: 4,
      convRule: rule84
  }, {
      start: 1774,
      length: 2,
      convRule: rule45
  }, {
      start: 1776,
      length: 10,
      convRule: rule8
  }, {
      start: 1786,
      length: 3,
      convRule: rule45
  }, {
      start: 1789,
      length: 2,
      convRule: rule13
  }, {
      start: 1791,
      length: 1,
      convRule: rule45
  }, {
      start: 1792,
      length: 14,
      convRule: rule2
  }, {
      start: 1807,
      length: 1,
      convRule: rule16
  }, {
      start: 1808,
      length: 1,
      convRule: rule45
  }, {
      start: 1809,
      length: 1,
      convRule: rule84
  }, {
      start: 1810,
      length: 30,
      convRule: rule45
  }, {
      start: 1840,
      length: 27,
      convRule: rule84
  }, {
      start: 1869,
      length: 89,
      convRule: rule45
  }, {
      start: 1958,
      length: 11,
      convRule: rule84
  }, {
      start: 1969,
      length: 1,
      convRule: rule45
  }, {
      start: 1984,
      length: 10,
      convRule: rule8
  }, {
      start: 1994,
      length: 33,
      convRule: rule45
  }, {
      start: 2027,
      length: 9,
      convRule: rule84
  }, {
      start: 2036,
      length: 2,
      convRule: rule83
  }, {
      start: 2038,
      length: 1,
      convRule: rule13
  }, {
      start: 2039,
      length: 3,
      convRule: rule2
  }, {
      start: 2042,
      length: 1,
      convRule: rule83
  }, {
      start: 2048,
      length: 22,
      convRule: rule45
  }, {
      start: 2070,
      length: 4,
      convRule: rule84
  }, {
      start: 2074,
      length: 1,
      convRule: rule83
  }, {
      start: 2075,
      length: 9,
      convRule: rule84
  }, {
      start: 2084,
      length: 1,
      convRule: rule83
  }, {
      start: 2085,
      length: 3,
      convRule: rule84
  }, {
      start: 2088,
      length: 1,
      convRule: rule83
  }, {
      start: 2089,
      length: 5,
      convRule: rule84
  }, {
      start: 2096,
      length: 15,
      convRule: rule2
  }, {
      start: 2112,
      length: 25,
      convRule: rule45
  }, {
      start: 2137,
      length: 3,
      convRule: rule84
  }, {
      start: 2142,
      length: 1,
      convRule: rule2
  }, {
      start: 2304,
      length: 3,
      convRule: rule84
  }, {
      start: 2307,
      length: 1,
      convRule: rule114
  }, {
      start: 2308,
      length: 54,
      convRule: rule45
  }, {
      start: 2362,
      length: 1,
      convRule: rule84
  }, {
      start: 2363,
      length: 1,
      convRule: rule114
  }, {
      start: 2364,
      length: 1,
      convRule: rule84
  }, {
      start: 2365,
      length: 1,
      convRule: rule45
  }, {
      start: 2366,
      length: 3,
      convRule: rule114
  }, {
      start: 2369,
      length: 8,
      convRule: rule84
  }, {
      start: 2377,
      length: 4,
      convRule: rule114
  }, {
      start: 2381,
      length: 1,
      convRule: rule84
  }, {
      start: 2382,
      length: 2,
      convRule: rule114
  }, {
      start: 2384,
      length: 1,
      convRule: rule45
  }, {
      start: 2385,
      length: 7,
      convRule: rule84
  }, {
      start: 2392,
      length: 10,
      convRule: rule45
  }, {
      start: 2402,
      length: 2,
      convRule: rule84
  }, {
      start: 2404,
      length: 2,
      convRule: rule2
  }, {
      start: 2406,
      length: 10,
      convRule: rule8
  }, {
      start: 2416,
      length: 1,
      convRule: rule2
  }, {
      start: 2417,
      length: 1,
      convRule: rule83
  }, {
      start: 2418,
      length: 6,
      convRule: rule45
  }, {
      start: 2425,
      length: 7,
      convRule: rule45
  }, {
      start: 2433,
      length: 1,
      convRule: rule84
  }, {
      start: 2434,
      length: 2,
      convRule: rule114
  }, {
      start: 2437,
      length: 8,
      convRule: rule45
  }, {
      start: 2447,
      length: 2,
      convRule: rule45
  }, {
      start: 2451,
      length: 22,
      convRule: rule45
  }, {
      start: 2474,
      length: 7,
      convRule: rule45
  }, {
      start: 2482,
      length: 1,
      convRule: rule45
  }, {
      start: 2486,
      length: 4,
      convRule: rule45
  }, {
      start: 2492,
      length: 1,
      convRule: rule84
  }, {
      start: 2493,
      length: 1,
      convRule: rule45
  }, {
      start: 2494,
      length: 3,
      convRule: rule114
  }, {
      start: 2497,
      length: 4,
      convRule: rule84
  }, {
      start: 2503,
      length: 2,
      convRule: rule114
  }, {
      start: 2507,
      length: 2,
      convRule: rule114
  }, {
      start: 2509,
      length: 1,
      convRule: rule84
  }, {
      start: 2510,
      length: 1,
      convRule: rule45
  }, {
      start: 2519,
      length: 1,
      convRule: rule114
  }, {
      start: 2524,
      length: 2,
      convRule: rule45
  }, {
      start: 2527,
      length: 3,
      convRule: rule45
  }, {
      start: 2530,
      length: 2,
      convRule: rule84
  }, {
      start: 2534,
      length: 10,
      convRule: rule8
  }, {
      start: 2544,
      length: 2,
      convRule: rule45
  }, {
      start: 2546,
      length: 2,
      convRule: rule3
  }, {
      start: 2548,
      length: 6,
      convRule: rule17
  }, {
      start: 2554,
      length: 1,
      convRule: rule13
  }, {
      start: 2555,
      length: 1,
      convRule: rule3
  }, {
      start: 2561,
      length: 2,
      convRule: rule84
  }, {
      start: 2563,
      length: 1,
      convRule: rule114
  }, {
      start: 2565,
      length: 6,
      convRule: rule45
  }, {
      start: 2575,
      length: 2,
      convRule: rule45
  }, {
      start: 2579,
      length: 22,
      convRule: rule45
  }, {
      start: 2602,
      length: 7,
      convRule: rule45
  }, {
      start: 2610,
      length: 2,
      convRule: rule45
  }, {
      start: 2613,
      length: 2,
      convRule: rule45
  }, {
      start: 2616,
      length: 2,
      convRule: rule45
  }, {
      start: 2620,
      length: 1,
      convRule: rule84
  }, {
      start: 2622,
      length: 3,
      convRule: rule114
  }, {
      start: 2625,
      length: 2,
      convRule: rule84
  }, {
      start: 2631,
      length: 2,
      convRule: rule84
  }, {
      start: 2635,
      length: 3,
      convRule: rule84
  }, {
      start: 2641,
      length: 1,
      convRule: rule84
  }, {
      start: 2649,
      length: 4,
      convRule: rule45
  }, {
      start: 2654,
      length: 1,
      convRule: rule45
  }, {
      start: 2662,
      length: 10,
      convRule: rule8
  }, {
      start: 2672,
      length: 2,
      convRule: rule84
  }, {
      start: 2674,
      length: 3,
      convRule: rule45
  }, {
      start: 2677,
      length: 1,
      convRule: rule84
  }, {
      start: 2689,
      length: 2,
      convRule: rule84
  }, {
      start: 2691,
      length: 1,
      convRule: rule114
  }, {
      start: 2693,
      length: 9,
      convRule: rule45
  }, {
      start: 2703,
      length: 3,
      convRule: rule45
  }, {
      start: 2707,
      length: 22,
      convRule: rule45
  }, {
      start: 2730,
      length: 7,
      convRule: rule45
  }, {
      start: 2738,
      length: 2,
      convRule: rule45
  }, {
      start: 2741,
      length: 5,
      convRule: rule45
  }, {
      start: 2748,
      length: 1,
      convRule: rule84
  }, {
      start: 2749,
      length: 1,
      convRule: rule45
  }, {
      start: 2750,
      length: 3,
      convRule: rule114
  }, {
      start: 2753,
      length: 5,
      convRule: rule84
  }, {
      start: 2759,
      length: 2,
      convRule: rule84
  }, {
      start: 2761,
      length: 1,
      convRule: rule114
  }, {
      start: 2763,
      length: 2,
      convRule: rule114
  }, {
      start: 2765,
      length: 1,
      convRule: rule84
  }, {
      start: 2768,
      length: 1,
      convRule: rule45
  }, {
      start: 2784,
      length: 2,
      convRule: rule45
  }, {
      start: 2786,
      length: 2,
      convRule: rule84
  }, {
      start: 2790,
      length: 10,
      convRule: rule8
  }, {
      start: 2801,
      length: 1,
      convRule: rule3
  }, {
      start: 2817,
      length: 1,
      convRule: rule84
  }, {
      start: 2818,
      length: 2,
      convRule: rule114
  }, {
      start: 2821,
      length: 8,
      convRule: rule45
  }, {
      start: 2831,
      length: 2,
      convRule: rule45
  }, {
      start: 2835,
      length: 22,
      convRule: rule45
  }, {
      start: 2858,
      length: 7,
      convRule: rule45
  }, {
      start: 2866,
      length: 2,
      convRule: rule45
  }, {
      start: 2869,
      length: 5,
      convRule: rule45
  }, {
      start: 2876,
      length: 1,
      convRule: rule84
  }, {
      start: 2877,
      length: 1,
      convRule: rule45
  }, {
      start: 2878,
      length: 1,
      convRule: rule114
  }, {
      start: 2879,
      length: 1,
      convRule: rule84
  }, {
      start: 2880,
      length: 1,
      convRule: rule114
  }, {
      start: 2881,
      length: 4,
      convRule: rule84
  }, {
      start: 2887,
      length: 2,
      convRule: rule114
  }, {
      start: 2891,
      length: 2,
      convRule: rule114
  }, {
      start: 2893,
      length: 1,
      convRule: rule84
  }, {
      start: 2902,
      length: 1,
      convRule: rule84
  }, {
      start: 2903,
      length: 1,
      convRule: rule114
  }, {
      start: 2908,
      length: 2,
      convRule: rule45
  }, {
      start: 2911,
      length: 3,
      convRule: rule45
  }, {
      start: 2914,
      length: 2,
      convRule: rule84
  }, {
      start: 2918,
      length: 10,
      convRule: rule8
  }, {
      start: 2928,
      length: 1,
      convRule: rule13
  }, {
      start: 2929,
      length: 1,
      convRule: rule45
  }, {
      start: 2930,
      length: 6,
      convRule: rule17
  }, {
      start: 2946,
      length: 1,
      convRule: rule84
  }, {
      start: 2947,
      length: 1,
      convRule: rule45
  }, {
      start: 2949,
      length: 6,
      convRule: rule45
  }, {
      start: 2958,
      length: 3,
      convRule: rule45
  }, {
      start: 2962,
      length: 4,
      convRule: rule45
  }, {
      start: 2969,
      length: 2,
      convRule: rule45
  }, {
      start: 2972,
      length: 1,
      convRule: rule45
  }, {
      start: 2974,
      length: 2,
      convRule: rule45
  }, {
      start: 2979,
      length: 2,
      convRule: rule45
  }, {
      start: 2984,
      length: 3,
      convRule: rule45
  }, {
      start: 2990,
      length: 12,
      convRule: rule45
  }, {
      start: 3006,
      length: 2,
      convRule: rule114
  }, {
      start: 3008,
      length: 1,
      convRule: rule84
  }, {
      start: 3009,
      length: 2,
      convRule: rule114
  }, {
      start: 3014,
      length: 3,
      convRule: rule114
  }, {
      start: 3018,
      length: 3,
      convRule: rule114
  }, {
      start: 3021,
      length: 1,
      convRule: rule84
  }, {
      start: 3024,
      length: 1,
      convRule: rule45
  }, {
      start: 3031,
      length: 1,
      convRule: rule114
  }, {
      start: 3046,
      length: 10,
      convRule: rule8
  }, {
      start: 3056,
      length: 3,
      convRule: rule17
  }, {
      start: 3059,
      length: 6,
      convRule: rule13
  }, {
      start: 3065,
      length: 1,
      convRule: rule3
  }, {
      start: 3066,
      length: 1,
      convRule: rule13
  }, {
      start: 3073,
      length: 3,
      convRule: rule114
  }, {
      start: 3077,
      length: 8,
      convRule: rule45
  }, {
      start: 3086,
      length: 3,
      convRule: rule45
  }, {
      start: 3090,
      length: 23,
      convRule: rule45
  }, {
      start: 3114,
      length: 10,
      convRule: rule45
  }, {
      start: 3125,
      length: 5,
      convRule: rule45
  }, {
      start: 3133,
      length: 1,
      convRule: rule45
  }, {
      start: 3134,
      length: 3,
      convRule: rule84
  }, {
      start: 3137,
      length: 4,
      convRule: rule114
  }, {
      start: 3142,
      length: 3,
      convRule: rule84
  }, {
      start: 3146,
      length: 4,
      convRule: rule84
  }, {
      start: 3157,
      length: 2,
      convRule: rule84
  }, {
      start: 3160,
      length: 2,
      convRule: rule45
  }, {
      start: 3168,
      length: 2,
      convRule: rule45
  }, {
      start: 3170,
      length: 2,
      convRule: rule84
  }, {
      start: 3174,
      length: 10,
      convRule: rule8
  }, {
      start: 3192,
      length: 7,
      convRule: rule17
  }, {
      start: 3199,
      length: 1,
      convRule: rule13
  }, {
      start: 3202,
      length: 2,
      convRule: rule114
  }, {
      start: 3205,
      length: 8,
      convRule: rule45
  }, {
      start: 3214,
      length: 3,
      convRule: rule45
  }, {
      start: 3218,
      length: 23,
      convRule: rule45
  }, {
      start: 3242,
      length: 10,
      convRule: rule45
  }, {
      start: 3253,
      length: 5,
      convRule: rule45
  }, {
      start: 3260,
      length: 1,
      convRule: rule84
  }, {
      start: 3261,
      length: 1,
      convRule: rule45
  }, {
      start: 3262,
      length: 1,
      convRule: rule114
  }, {
      start: 3263,
      length: 1,
      convRule: rule84
  }, {
      start: 3264,
      length: 5,
      convRule: rule114
  }, {
      start: 3270,
      length: 1,
      convRule: rule84
  }, {
      start: 3271,
      length: 2,
      convRule: rule114
  }, {
      start: 3274,
      length: 2,
      convRule: rule114
  }, {
      start: 3276,
      length: 2,
      convRule: rule84
  }, {
      start: 3285,
      length: 2,
      convRule: rule114
  }, {
      start: 3294,
      length: 1,
      convRule: rule45
  }, {
      start: 3296,
      length: 2,
      convRule: rule45
  }, {
      start: 3298,
      length: 2,
      convRule: rule84
  }, {
      start: 3302,
      length: 10,
      convRule: rule8
  }, {
      start: 3313,
      length: 2,
      convRule: rule45
  }, {
      start: 3330,
      length: 2,
      convRule: rule114
  }, {
      start: 3333,
      length: 8,
      convRule: rule45
  }, {
      start: 3342,
      length: 3,
      convRule: rule45
  }, {
      start: 3346,
      length: 41,
      convRule: rule45
  }, {
      start: 3389,
      length: 1,
      convRule: rule45
  }, {
      start: 3390,
      length: 3,
      convRule: rule114
  }, {
      start: 3393,
      length: 4,
      convRule: rule84
  }, {
      start: 3398,
      length: 3,
      convRule: rule114
  }, {
      start: 3402,
      length: 3,
      convRule: rule114
  }, {
      start: 3405,
      length: 1,
      convRule: rule84
  }, {
      start: 3406,
      length: 1,
      convRule: rule45
  }, {
      start: 3415,
      length: 1,
      convRule: rule114
  }, {
      start: 3424,
      length: 2,
      convRule: rule45
  }, {
      start: 3426,
      length: 2,
      convRule: rule84
  }, {
      start: 3430,
      length: 10,
      convRule: rule8
  }, {
      start: 3440,
      length: 6,
      convRule: rule17
  }, {
      start: 3449,
      length: 1,
      convRule: rule13
  }, {
      start: 3450,
      length: 6,
      convRule: rule45
  }, {
      start: 3458,
      length: 2,
      convRule: rule114
  }, {
      start: 3461,
      length: 18,
      convRule: rule45
  }, {
      start: 3482,
      length: 24,
      convRule: rule45
  }, {
      start: 3507,
      length: 9,
      convRule: rule45
  }, {
      start: 3517,
      length: 1,
      convRule: rule45
  }, {
      start: 3520,
      length: 7,
      convRule: rule45
  }, {
      start: 3530,
      length: 1,
      convRule: rule84
  }, {
      start: 3535,
      length: 3,
      convRule: rule114
  }, {
      start: 3538,
      length: 3,
      convRule: rule84
  }, {
      start: 3542,
      length: 1,
      convRule: rule84
  }, {
      start: 3544,
      length: 8,
      convRule: rule114
  }, {
      start: 3570,
      length: 2,
      convRule: rule114
  }, {
      start: 3572,
      length: 1,
      convRule: rule2
  }, {
      start: 3585,
      length: 48,
      convRule: rule45
  }, {
      start: 3633,
      length: 1,
      convRule: rule84
  }, {
      start: 3634,
      length: 2,
      convRule: rule45
  }, {
      start: 3636,
      length: 7,
      convRule: rule84
  }, {
      start: 3647,
      length: 1,
      convRule: rule3
  }, {
      start: 3648,
      length: 6,
      convRule: rule45
  }, {
      start: 3654,
      length: 1,
      convRule: rule83
  }, {
      start: 3655,
      length: 8,
      convRule: rule84
  }, {
      start: 3663,
      length: 1,
      convRule: rule2
  }, {
      start: 3664,
      length: 10,
      convRule: rule8
  }, {
      start: 3674,
      length: 2,
      convRule: rule2
  }, {
      start: 3713,
      length: 2,
      convRule: rule45
  }, {
      start: 3716,
      length: 1,
      convRule: rule45
  }, {
      start: 3719,
      length: 2,
      convRule: rule45
  }, {
      start: 3722,
      length: 1,
      convRule: rule45
  }, {
      start: 3725,
      length: 1,
      convRule: rule45
  }, {
      start: 3732,
      length: 4,
      convRule: rule45
  }, {
      start: 3737,
      length: 7,
      convRule: rule45
  }, {
      start: 3745,
      length: 3,
      convRule: rule45
  }, {
      start: 3749,
      length: 1,
      convRule: rule45
  }, {
      start: 3751,
      length: 1,
      convRule: rule45
  }, {
      start: 3754,
      length: 2,
      convRule: rule45
  }, {
      start: 3757,
      length: 4,
      convRule: rule45
  }, {
      start: 3761,
      length: 1,
      convRule: rule84
  }, {
      start: 3762,
      length: 2,
      convRule: rule45
  }, {
      start: 3764,
      length: 6,
      convRule: rule84
  }, {
      start: 3771,
      length: 2,
      convRule: rule84
  }, {
      start: 3773,
      length: 1,
      convRule: rule45
  }, {
      start: 3776,
      length: 5,
      convRule: rule45
  }, {
      start: 3782,
      length: 1,
      convRule: rule83
  }, {
      start: 3784,
      length: 6,
      convRule: rule84
  }, {
      start: 3792,
      length: 10,
      convRule: rule8
  }, {
      start: 3804,
      length: 2,
      convRule: rule45
  }, {
      start: 3840,
      length: 1,
      convRule: rule45
  }, {
      start: 3841,
      length: 3,
      convRule: rule13
  }, {
      start: 3844,
      length: 15,
      convRule: rule2
  }, {
      start: 3859,
      length: 5,
      convRule: rule13
  }, {
      start: 3864,
      length: 2,
      convRule: rule84
  }, {
      start: 3866,
      length: 6,
      convRule: rule13
  }, {
      start: 3872,
      length: 10,
      convRule: rule8
  }, {
      start: 3882,
      length: 10,
      convRule: rule17
  }, {
      start: 3892,
      length: 1,
      convRule: rule13
  }, {
      start: 3893,
      length: 1,
      convRule: rule84
  }, {
      start: 3894,
      length: 1,
      convRule: rule13
  }, {
      start: 3895,
      length: 1,
      convRule: rule84
  }, {
      start: 3896,
      length: 1,
      convRule: rule13
  }, {
      start: 3897,
      length: 1,
      convRule: rule84
  }, {
      start: 3898,
      length: 1,
      convRule: rule4
  }, {
      start: 3899,
      length: 1,
      convRule: rule5
  }, {
      start: 3900,
      length: 1,
      convRule: rule4
  }, {
      start: 3901,
      length: 1,
      convRule: rule5
  }, {
      start: 3902,
      length: 2,
      convRule: rule114
  }, {
      start: 3904,
      length: 8,
      convRule: rule45
  }, {
      start: 3913,
      length: 36,
      convRule: rule45
  }, {
      start: 3953,
      length: 14,
      convRule: rule84
  }, {
      start: 3967,
      length: 1,
      convRule: rule114
  }, {
      start: 3968,
      length: 5,
      convRule: rule84
  }, {
      start: 3973,
      length: 1,
      convRule: rule2
  }, {
      start: 3974,
      length: 2,
      convRule: rule84
  }, {
      start: 3976,
      length: 5,
      convRule: rule45
  }, {
      start: 3981,
      length: 11,
      convRule: rule84
  }, {
      start: 3993,
      length: 36,
      convRule: rule84
  }, {
      start: 4030,
      length: 8,
      convRule: rule13
  }, {
      start: 4038,
      length: 1,
      convRule: rule84
  }, {
      start: 4039,
      length: 6,
      convRule: rule13
  }, {
      start: 4046,
      length: 2,
      convRule: rule13
  }, {
      start: 4048,
      length: 5,
      convRule: rule2
  }, {
      start: 4053,
      length: 4,
      convRule: rule13
  }, {
      start: 4057,
      length: 2,
      convRule: rule2
  }, {
      start: 4096,
      length: 43,
      convRule: rule45
  }, {
      start: 4139,
      length: 2,
      convRule: rule114
  }, {
      start: 4141,
      length: 4,
      convRule: rule84
  }, {
      start: 4145,
      length: 1,
      convRule: rule114
  }, {
      start: 4146,
      length: 6,
      convRule: rule84
  }, {
      start: 4152,
      length: 1,
      convRule: rule114
  }, {
      start: 4153,
      length: 2,
      convRule: rule84
  }, {
      start: 4155,
      length: 2,
      convRule: rule114
  }, {
      start: 4157,
      length: 2,
      convRule: rule84
  }, {
      start: 4159,
      length: 1,
      convRule: rule45
  }, {
      start: 4160,
      length: 10,
      convRule: rule8
  }, {
      start: 4170,
      length: 6,
      convRule: rule2
  }, {
      start: 4176,
      length: 6,
      convRule: rule45
  }, {
      start: 4182,
      length: 2,
      convRule: rule114
  }, {
      start: 4184,
      length: 2,
      convRule: rule84
  }, {
      start: 4186,
      length: 4,
      convRule: rule45
  }, {
      start: 4190,
      length: 3,
      convRule: rule84
  }, {
      start: 4193,
      length: 1,
      convRule: rule45
  }, {
      start: 4194,
      length: 3,
      convRule: rule114
  }, {
      start: 4197,
      length: 2,
      convRule: rule45
  }, {
      start: 4199,
      length: 7,
      convRule: rule114
  }, {
      start: 4206,
      length: 3,
      convRule: rule45
  }, {
      start: 4209,
      length: 4,
      convRule: rule84
  }, {
      start: 4213,
      length: 13,
      convRule: rule45
  }, {
      start: 4226,
      length: 1,
      convRule: rule84
  }, {
      start: 4227,
      length: 2,
      convRule: rule114
  }, {
      start: 4229,
      length: 2,
      convRule: rule84
  }, {
      start: 4231,
      length: 6,
      convRule: rule114
  }, {
      start: 4237,
      length: 1,
      convRule: rule84
  }, {
      start: 4238,
      length: 1,
      convRule: rule45
  }, {
      start: 4239,
      length: 1,
      convRule: rule114
  }, {
      start: 4240,
      length: 10,
      convRule: rule8
  }, {
      start: 4250,
      length: 3,
      convRule: rule114
  }, {
      start: 4253,
      length: 1,
      convRule: rule84
  }, {
      start: 4254,
      length: 2,
      convRule: rule13
  }, {
      start: 4256,
      length: 38,
      convRule: rule115
  }, {
      start: 4304,
      length: 43,
      convRule: rule45
  }, {
      start: 4347,
      length: 1,
      convRule: rule2
  }, {
      start: 4348,
      length: 1,
      convRule: rule83
  }, {
      start: 4352,
      length: 329,
      convRule: rule45
  }, {
      start: 4682,
      length: 4,
      convRule: rule45
  }, {
      start: 4688,
      length: 7,
      convRule: rule45
  }, {
      start: 4696,
      length: 1,
      convRule: rule45
  }, {
      start: 4698,
      length: 4,
      convRule: rule45
  }, {
      start: 4704,
      length: 41,
      convRule: rule45
  }, {
      start: 4746,
      length: 4,
      convRule: rule45
  }, {
      start: 4752,
      length: 33,
      convRule: rule45
  }, {
      start: 4786,
      length: 4,
      convRule: rule45
  }, {
      start: 4792,
      length: 7,
      convRule: rule45
  }, {
      start: 4800,
      length: 1,
      convRule: rule45
  }, {
      start: 4802,
      length: 4,
      convRule: rule45
  }, {
      start: 4808,
      length: 15,
      convRule: rule45
  }, {
      start: 4824,
      length: 57,
      convRule: rule45
  }, {
      start: 4882,
      length: 4,
      convRule: rule45
  }, {
      start: 4888,
      length: 67,
      convRule: rule45
  }, {
      start: 4957,
      length: 3,
      convRule: rule84
  }, {
      start: 4960,
      length: 1,
      convRule: rule13
  }, {
      start: 4961,
      length: 8,
      convRule: rule2
  }, {
      start: 4969,
      length: 20,
      convRule: rule17
  }, {
      start: 4992,
      length: 16,
      convRule: rule45
  }, {
      start: 5008,
      length: 10,
      convRule: rule13
  }, {
      start: 5024,
      length: 85,
      convRule: rule45
  }, {
      start: 5120,
      length: 1,
      convRule: rule7
  }, {
      start: 5121,
      length: 620,
      convRule: rule45
  }, {
      start: 5741,
      length: 2,
      convRule: rule2
  }, {
      start: 5743,
      length: 17,
      convRule: rule45
  }, {
      start: 5760,
      length: 1,
      convRule: rule1
  }, {
      start: 5761,
      length: 26,
      convRule: rule45
  }, {
      start: 5787,
      length: 1,
      convRule: rule4
  }, {
      start: 5788,
      length: 1,
      convRule: rule5
  }, {
      start: 5792,
      length: 75,
      convRule: rule45
  }, {
      start: 5867,
      length: 3,
      convRule: rule2
  }, {
      start: 5870,
      length: 3,
      convRule: rule116
  }, {
      start: 5888,
      length: 13,
      convRule: rule45
  }, {
      start: 5902,
      length: 4,
      convRule: rule45
  }, {
      start: 5906,
      length: 3,
      convRule: rule84
  }, {
      start: 5920,
      length: 18,
      convRule: rule45
  }, {
      start: 5938,
      length: 3,
      convRule: rule84
  }, {
      start: 5941,
      length: 2,
      convRule: rule2
  }, {
      start: 5952,
      length: 18,
      convRule: rule45
  }, {
      start: 5970,
      length: 2,
      convRule: rule84
  }, {
      start: 5984,
      length: 13,
      convRule: rule45
  }, {
      start: 5998,
      length: 3,
      convRule: rule45
  }, {
      start: 6002,
      length: 2,
      convRule: rule84
  }, {
      start: 6016,
      length: 52,
      convRule: rule45
  }, {
      start: 6068,
      length: 2,
      convRule: rule16
  }, {
      start: 6070,
      length: 1,
      convRule: rule114
  }, {
      start: 6071,
      length: 7,
      convRule: rule84
  }, {
      start: 6078,
      length: 8,
      convRule: rule114
  }, {
      start: 6086,
      length: 1,
      convRule: rule84
  }, {
      start: 6087,
      length: 2,
      convRule: rule114
  }, {
      start: 6089,
      length: 11,
      convRule: rule84
  }, {
      start: 6100,
      length: 3,
      convRule: rule2
  }, {
      start: 6103,
      length: 1,
      convRule: rule83
  }, {
      start: 6104,
      length: 3,
      convRule: rule2
  }, {
      start: 6107,
      length: 1,
      convRule: rule3
  }, {
      start: 6108,
      length: 1,
      convRule: rule45
  }, {
      start: 6109,
      length: 1,
      convRule: rule84
  }, {
      start: 6112,
      length: 10,
      convRule: rule8
  }, {
      start: 6128,
      length: 10,
      convRule: rule17
  }, {
      start: 6144,
      length: 6,
      convRule: rule2
  }, {
      start: 6150,
      length: 1,
      convRule: rule7
  }, {
      start: 6151,
      length: 4,
      convRule: rule2
  }, {
      start: 6155,
      length: 3,
      convRule: rule84
  }, {
      start: 6158,
      length: 1,
      convRule: rule1
  }, {
      start: 6160,
      length: 10,
      convRule: rule8
  }, {
      start: 6176,
      length: 35,
      convRule: rule45
  }, {
      start: 6211,
      length: 1,
      convRule: rule83
  }, {
      start: 6212,
      length: 52,
      convRule: rule45
  }, {
      start: 6272,
      length: 41,
      convRule: rule45
  }, {
      start: 6313,
      length: 1,
      convRule: rule84
  }, {
      start: 6314,
      length: 1,
      convRule: rule45
  }, {
      start: 6320,
      length: 70,
      convRule: rule45
  }, {
      start: 6400,
      length: 29,
      convRule: rule45
  }, {
      start: 6432,
      length: 3,
      convRule: rule84
  }, {
      start: 6435,
      length: 4,
      convRule: rule114
  }, {
      start: 6439,
      length: 2,
      convRule: rule84
  }, {
      start: 6441,
      length: 3,
      convRule: rule114
  }, {
      start: 6448,
      length: 2,
      convRule: rule114
  }, {
      start: 6450,
      length: 1,
      convRule: rule84
  }, {
      start: 6451,
      length: 6,
      convRule: rule114
  }, {
      start: 6457,
      length: 3,
      convRule: rule84
  }, {
      start: 6464,
      length: 1,
      convRule: rule13
  }, {
      start: 6468,
      length: 2,
      convRule: rule2
  }, {
      start: 6470,
      length: 10,
      convRule: rule8
  }, {
      start: 6480,
      length: 30,
      convRule: rule45
  }, {
      start: 6512,
      length: 5,
      convRule: rule45
  }, {
      start: 6528,
      length: 44,
      convRule: rule45
  }, {
      start: 6576,
      length: 17,
      convRule: rule114
  }, {
      start: 6593,
      length: 7,
      convRule: rule45
  }, {
      start: 6600,
      length: 2,
      convRule: rule114
  }, {
      start: 6608,
      length: 10,
      convRule: rule8
  }, {
      start: 6618,
      length: 1,
      convRule: rule17
  }, {
      start: 6622,
      length: 34,
      convRule: rule13
  }, {
      start: 6656,
      length: 23,
      convRule: rule45
  }, {
      start: 6679,
      length: 2,
      convRule: rule84
  }, {
      start: 6681,
      length: 3,
      convRule: rule114
  }, {
      start: 6686,
      length: 2,
      convRule: rule2
  }, {
      start: 6688,
      length: 53,
      convRule: rule45
  }, {
      start: 6741,
      length: 1,
      convRule: rule114
  }, {
      start: 6742,
      length: 1,
      convRule: rule84
  }, {
      start: 6743,
      length: 1,
      convRule: rule114
  }, {
      start: 6744,
      length: 7,
      convRule: rule84
  }, {
      start: 6752,
      length: 1,
      convRule: rule84
  }, {
      start: 6753,
      length: 1,
      convRule: rule114
  }, {
      start: 6754,
      length: 1,
      convRule: rule84
  }, {
      start: 6755,
      length: 2,
      convRule: rule114
  }, {
      start: 6757,
      length: 8,
      convRule: rule84
  }, {
      start: 6765,
      length: 6,
      convRule: rule114
  }, {
      start: 6771,
      length: 10,
      convRule: rule84
  }, {
      start: 6783,
      length: 1,
      convRule: rule84
  }, {
      start: 6784,
      length: 10,
      convRule: rule8
  }, {
      start: 6800,
      length: 10,
      convRule: rule8
  }, {
      start: 6816,
      length: 7,
      convRule: rule2
  }, {
      start: 6823,
      length: 1,
      convRule: rule83
  }, {
      start: 6824,
      length: 6,
      convRule: rule2
  }, {
      start: 6912,
      length: 4,
      convRule: rule84
  }, {
      start: 6916,
      length: 1,
      convRule: rule114
  }, {
      start: 6917,
      length: 47,
      convRule: rule45
  }, {
      start: 6964,
      length: 1,
      convRule: rule84
  }, {
      start: 6965,
      length: 1,
      convRule: rule114
  }, {
      start: 6966,
      length: 5,
      convRule: rule84
  }, {
      start: 6971,
      length: 1,
      convRule: rule114
  }, {
      start: 6972,
      length: 1,
      convRule: rule84
  }, {
      start: 6973,
      length: 5,
      convRule: rule114
  }, {
      start: 6978,
      length: 1,
      convRule: rule84
  }, {
      start: 6979,
      length: 2,
      convRule: rule114
  }, {
      start: 6981,
      length: 7,
      convRule: rule45
  }, {
      start: 6992,
      length: 10,
      convRule: rule8
  }, {
      start: 7002,
      length: 7,
      convRule: rule2
  }, {
      start: 7009,
      length: 10,
      convRule: rule13
  }, {
      start: 7019,
      length: 9,
      convRule: rule84
  }, {
      start: 7028,
      length: 9,
      convRule: rule13
  }, {
      start: 7040,
      length: 2,
      convRule: rule84
  }, {
      start: 7042,
      length: 1,
      convRule: rule114
  }, {
      start: 7043,
      length: 30,
      convRule: rule45
  }, {
      start: 7073,
      length: 1,
      convRule: rule114
  }, {
      start: 7074,
      length: 4,
      convRule: rule84
  }, {
      start: 7078,
      length: 2,
      convRule: rule114
  }, {
      start: 7080,
      length: 2,
      convRule: rule84
  }, {
      start: 7082,
      length: 1,
      convRule: rule114
  }, {
      start: 7086,
      length: 2,
      convRule: rule45
  }, {
      start: 7088,
      length: 10,
      convRule: rule8
  }, {
      start: 7104,
      length: 38,
      convRule: rule45
  }, {
      start: 7142,
      length: 1,
      convRule: rule84
  }, {
      start: 7143,
      length: 1,
      convRule: rule114
  }, {
      start: 7144,
      length: 2,
      convRule: rule84
  }, {
      start: 7146,
      length: 3,
      convRule: rule114
  }, {
      start: 7149,
      length: 1,
      convRule: rule84
  }, {
      start: 7150,
      length: 1,
      convRule: rule114
  }, {
      start: 7151,
      length: 3,
      convRule: rule84
  }, {
      start: 7154,
      length: 2,
      convRule: rule114
  }, {
      start: 7164,
      length: 4,
      convRule: rule2
  }, {
      start: 7168,
      length: 36,
      convRule: rule45
  }, {
      start: 7204,
      length: 8,
      convRule: rule114
  }, {
      start: 7212,
      length: 8,
      convRule: rule84
  }, {
      start: 7220,
      length: 2,
      convRule: rule114
  }, {
      start: 7222,
      length: 2,
      convRule: rule84
  }, {
      start: 7227,
      length: 5,
      convRule: rule2
  }, {
      start: 7232,
      length: 10,
      convRule: rule8
  }, {
      start: 7245,
      length: 3,
      convRule: rule45
  }, {
      start: 7248,
      length: 10,
      convRule: rule8
  }, {
      start: 7258,
      length: 30,
      convRule: rule45
  }, {
      start: 7288,
      length: 6,
      convRule: rule83
  }, {
      start: 7294,
      length: 2,
      convRule: rule2
  }, {
      start: 7376,
      length: 3,
      convRule: rule84
  }, {
      start: 7379,
      length: 1,
      convRule: rule2
  }, {
      start: 7380,
      length: 13,
      convRule: rule84
  }, {
      start: 7393,
      length: 1,
      convRule: rule114
  }, {
      start: 7394,
      length: 7,
      convRule: rule84
  }, {
      start: 7401,
      length: 4,
      convRule: rule45
  }, {
      start: 7405,
      length: 1,
      convRule: rule84
  }, {
      start: 7406,
      length: 4,
      convRule: rule45
  }, {
      start: 7410,
      length: 1,
      convRule: rule114
  }, {
      start: 7424,
      length: 44,
      convRule: rule14
  }, {
      start: 7468,
      length: 54,
      convRule: rule83
  }, {
      start: 7522,
      length: 22,
      convRule: rule14
  }, {
      start: 7544,
      length: 1,
      convRule: rule83
  }, {
      start: 7545,
      length: 1,
      convRule: rule117
  }, {
      start: 7546,
      length: 3,
      convRule: rule14
  }, {
      start: 7549,
      length: 1,
      convRule: rule118
  }, {
      start: 7550,
      length: 29,
      convRule: rule14
  }, {
      start: 7579,
      length: 37,
      convRule: rule83
  }, {
      start: 7616,
      length: 39,
      convRule: rule84
  }, {
      start: 7676,
      length: 4,
      convRule: rule84
  }, {
      start: 7680,
      length: 1,
      convRule: rule21
  }, {
      start: 7681,
      length: 1,
      convRule: rule22
  }, {
      start: 7682,
      length: 1,
      convRule: rule21
  }, {
      start: 7683,
      length: 1,
      convRule: rule22
  }, {
      start: 7684,
      length: 1,
      convRule: rule21
  }, {
      start: 7685,
      length: 1,
      convRule: rule22
  }, {
      start: 7686,
      length: 1,
      convRule: rule21
  }, {
      start: 7687,
      length: 1,
      convRule: rule22
  }, {
      start: 7688,
      length: 1,
      convRule: rule21
  }, {
      start: 7689,
      length: 1,
      convRule: rule22
  }, {
      start: 7690,
      length: 1,
      convRule: rule21
  }, {
      start: 7691,
      length: 1,
      convRule: rule22
  }, {
      start: 7692,
      length: 1,
      convRule: rule21
  }, {
      start: 7693,
      length: 1,
      convRule: rule22
  }, {
      start: 7694,
      length: 1,
      convRule: rule21
  }, {
      start: 7695,
      length: 1,
      convRule: rule22
  }, {
      start: 7696,
      length: 1,
      convRule: rule21
  }, {
      start: 7697,
      length: 1,
      convRule: rule22
  }, {
      start: 7698,
      length: 1,
      convRule: rule21
  }, {
      start: 7699,
      length: 1,
      convRule: rule22
  }, {
      start: 7700,
      length: 1,
      convRule: rule21
  }, {
      start: 7701,
      length: 1,
      convRule: rule22
  }, {
      start: 7702,
      length: 1,
      convRule: rule21
  }, {
      start: 7703,
      length: 1,
      convRule: rule22
  }, {
      start: 7704,
      length: 1,
      convRule: rule21
  }, {
      start: 7705,
      length: 1,
      convRule: rule22
  }, {
      start: 7706,
      length: 1,
      convRule: rule21
  }, {
      start: 7707,
      length: 1,
      convRule: rule22
  }, {
      start: 7708,
      length: 1,
      convRule: rule21
  }, {
      start: 7709,
      length: 1,
      convRule: rule22
  }, {
      start: 7710,
      length: 1,
      convRule: rule21
  }, {
      start: 7711,
      length: 1,
      convRule: rule22
  }, {
      start: 7712,
      length: 1,
      convRule: rule21
  }, {
      start: 7713,
      length: 1,
      convRule: rule22
  }, {
      start: 7714,
      length: 1,
      convRule: rule21
  }, {
      start: 7715,
      length: 1,
      convRule: rule22
  }, {
      start: 7716,
      length: 1,
      convRule: rule21
  }, {
      start: 7717,
      length: 1,
      convRule: rule22
  }, {
      start: 7718,
      length: 1,
      convRule: rule21
  }, {
      start: 7719,
      length: 1,
      convRule: rule22
  }, {
      start: 7720,
      length: 1,
      convRule: rule21
  }, {
      start: 7721,
      length: 1,
      convRule: rule22
  }, {
      start: 7722,
      length: 1,
      convRule: rule21
  }, {
      start: 7723,
      length: 1,
      convRule: rule22
  }, {
      start: 7724,
      length: 1,
      convRule: rule21
  }, {
      start: 7725,
      length: 1,
      convRule: rule22
  }, {
      start: 7726,
      length: 1,
      convRule: rule21
  }, {
      start: 7727,
      length: 1,
      convRule: rule22
  }, {
      start: 7728,
      length: 1,
      convRule: rule21
  }, {
      start: 7729,
      length: 1,
      convRule: rule22
  }, {
      start: 7730,
      length: 1,
      convRule: rule21
  }, {
      start: 7731,
      length: 1,
      convRule: rule22
  }, {
      start: 7732,
      length: 1,
      convRule: rule21
  }, {
      start: 7733,
      length: 1,
      convRule: rule22
  }, {
      start: 7734,
      length: 1,
      convRule: rule21
  }, {
      start: 7735,
      length: 1,
      convRule: rule22
  }, {
      start: 7736,
      length: 1,
      convRule: rule21
  }, {
      start: 7737,
      length: 1,
      convRule: rule22
  }, {
      start: 7738,
      length: 1,
      convRule: rule21
  }, {
      start: 7739,
      length: 1,
      convRule: rule22
  }, {
      start: 7740,
      length: 1,
      convRule: rule21
  }, {
      start: 7741,
      length: 1,
      convRule: rule22
  }, {
      start: 7742,
      length: 1,
      convRule: rule21
  }, {
      start: 7743,
      length: 1,
      convRule: rule22
  }, {
      start: 7744,
      length: 1,
      convRule: rule21
  }, {
      start: 7745,
      length: 1,
      convRule: rule22
  }, {
      start: 7746,
      length: 1,
      convRule: rule21
  }, {
      start: 7747,
      length: 1,
      convRule: rule22
  }, {
      start: 7748,
      length: 1,
      convRule: rule21
  }, {
      start: 7749,
      length: 1,
      convRule: rule22
  }, {
      start: 7750,
      length: 1,
      convRule: rule21
  }, {
      start: 7751,
      length: 1,
      convRule: rule22
  }, {
      start: 7752,
      length: 1,
      convRule: rule21
  }, {
      start: 7753,
      length: 1,
      convRule: rule22
  }, {
      start: 7754,
      length: 1,
      convRule: rule21
  }, {
      start: 7755,
      length: 1,
      convRule: rule22
  }, {
      start: 7756,
      length: 1,
      convRule: rule21
  }, {
      start: 7757,
      length: 1,
      convRule: rule22
  }, {
      start: 7758,
      length: 1,
      convRule: rule21
  }, {
      start: 7759,
      length: 1,
      convRule: rule22
  }, {
      start: 7760,
      length: 1,
      convRule: rule21
  }, {
      start: 7761,
      length: 1,
      convRule: rule22
  }, {
      start: 7762,
      length: 1,
      convRule: rule21
  }, {
      start: 7763,
      length: 1,
      convRule: rule22
  }, {
      start: 7764,
      length: 1,
      convRule: rule21
  }, {
      start: 7765,
      length: 1,
      convRule: rule22
  }, {
      start: 7766,
      length: 1,
      convRule: rule21
  }, {
      start: 7767,
      length: 1,
      convRule: rule22
  }, {
      start: 7768,
      length: 1,
      convRule: rule21
  }, {
      start: 7769,
      length: 1,
      convRule: rule22
  }, {
      start: 7770,
      length: 1,
      convRule: rule21
  }, {
      start: 7771,
      length: 1,
      convRule: rule22
  }, {
      start: 7772,
      length: 1,
      convRule: rule21
  }, {
      start: 7773,
      length: 1,
      convRule: rule22
  }, {
      start: 7774,
      length: 1,
      convRule: rule21
  }, {
      start: 7775,
      length: 1,
      convRule: rule22
  }, {
      start: 7776,
      length: 1,
      convRule: rule21
  }, {
      start: 7777,
      length: 1,
      convRule: rule22
  }, {
      start: 7778,
      length: 1,
      convRule: rule21
  }, {
      start: 7779,
      length: 1,
      convRule: rule22
  }, {
      start: 7780,
      length: 1,
      convRule: rule21
  }, {
      start: 7781,
      length: 1,
      convRule: rule22
  }, {
      start: 7782,
      length: 1,
      convRule: rule21
  }, {
      start: 7783,
      length: 1,
      convRule: rule22
  }, {
      start: 7784,
      length: 1,
      convRule: rule21
  }, {
      start: 7785,
      length: 1,
      convRule: rule22
  }, {
      start: 7786,
      length: 1,
      convRule: rule21
  }, {
      start: 7787,
      length: 1,
      convRule: rule22
  }, {
      start: 7788,
      length: 1,
      convRule: rule21
  }, {
      start: 7789,
      length: 1,
      convRule: rule22
  }, {
      start: 7790,
      length: 1,
      convRule: rule21
  }, {
      start: 7791,
      length: 1,
      convRule: rule22
  }, {
      start: 7792,
      length: 1,
      convRule: rule21
  }, {
      start: 7793,
      length: 1,
      convRule: rule22
  }, {
      start: 7794,
      length: 1,
      convRule: rule21
  }, {
      start: 7795,
      length: 1,
      convRule: rule22
  }, {
      start: 7796,
      length: 1,
      convRule: rule21
  }, {
      start: 7797,
      length: 1,
      convRule: rule22
  }, {
      start: 7798,
      length: 1,
      convRule: rule21
  }, {
      start: 7799,
      length: 1,
      convRule: rule22
  }, {
      start: 7800,
      length: 1,
      convRule: rule21
  }, {
      start: 7801,
      length: 1,
      convRule: rule22
  }, {
      start: 7802,
      length: 1,
      convRule: rule21
  }, {
      start: 7803,
      length: 1,
      convRule: rule22
  }, {
      start: 7804,
      length: 1,
      convRule: rule21
  }, {
      start: 7805,
      length: 1,
      convRule: rule22
  }, {
      start: 7806,
      length: 1,
      convRule: rule21
  }, {
      start: 7807,
      length: 1,
      convRule: rule22
  }, {
      start: 7808,
      length: 1,
      convRule: rule21
  }, {
      start: 7809,
      length: 1,
      convRule: rule22
  }, {
      start: 7810,
      length: 1,
      convRule: rule21
  }, {
      start: 7811,
      length: 1,
      convRule: rule22
  }, {
      start: 7812,
      length: 1,
      convRule: rule21
  }, {
      start: 7813,
      length: 1,
      convRule: rule22
  }, {
      start: 7814,
      length: 1,
      convRule: rule21
  }, {
      start: 7815,
      length: 1,
      convRule: rule22
  }, {
      start: 7816,
      length: 1,
      convRule: rule21
  }, {
      start: 7817,
      length: 1,
      convRule: rule22
  }, {
      start: 7818,
      length: 1,
      convRule: rule21
  }, {
      start: 7819,
      length: 1,
      convRule: rule22
  }, {
      start: 7820,
      length: 1,
      convRule: rule21
  }, {
      start: 7821,
      length: 1,
      convRule: rule22
  }, {
      start: 7822,
      length: 1,
      convRule: rule21
  }, {
      start: 7823,
      length: 1,
      convRule: rule22
  }, {
      start: 7824,
      length: 1,
      convRule: rule21
  }, {
      start: 7825,
      length: 1,
      convRule: rule22
  }, {
      start: 7826,
      length: 1,
      convRule: rule21
  }, {
      start: 7827,
      length: 1,
      convRule: rule22
  }, {
      start: 7828,
      length: 1,
      convRule: rule21
  }, {
      start: 7829,
      length: 1,
      convRule: rule22
  }, {
      start: 7830,
      length: 5,
      convRule: rule14
  }, {
      start: 7835,
      length: 1,
      convRule: rule119
  }, {
      start: 7836,
      length: 2,
      convRule: rule14
  }, {
      start: 7838,
      length: 1,
      convRule: rule120
  }, {
      start: 7839,
      length: 1,
      convRule: rule14
  }, {
      start: 7840,
      length: 1,
      convRule: rule21
  }, {
      start: 7841,
      length: 1,
      convRule: rule22
  }, {
      start: 7842,
      length: 1,
      convRule: rule21
  }, {
      start: 7843,
      length: 1,
      convRule: rule22
  }, {
      start: 7844,
      length: 1,
      convRule: rule21
  }, {
      start: 7845,
      length: 1,
      convRule: rule22
  }, {
      start: 7846,
      length: 1,
      convRule: rule21
  }, {
      start: 7847,
      length: 1,
      convRule: rule22
  }, {
      start: 7848,
      length: 1,
      convRule: rule21
  }, {
      start: 7849,
      length: 1,
      convRule: rule22
  }, {
      start: 7850,
      length: 1,
      convRule: rule21
  }, {
      start: 7851,
      length: 1,
      convRule: rule22
  }, {
      start: 7852,
      length: 1,
      convRule: rule21
  }, {
      start: 7853,
      length: 1,
      convRule: rule22
  }, {
      start: 7854,
      length: 1,
      convRule: rule21
  }, {
      start: 7855,
      length: 1,
      convRule: rule22
  }, {
      start: 7856,
      length: 1,
      convRule: rule21
  }, {
      start: 7857,
      length: 1,
      convRule: rule22
  }, {
      start: 7858,
      length: 1,
      convRule: rule21
  }, {
      start: 7859,
      length: 1,
      convRule: rule22
  }, {
      start: 7860,
      length: 1,
      convRule: rule21
  }, {
      start: 7861,
      length: 1,
      convRule: rule22
  }, {
      start: 7862,
      length: 1,
      convRule: rule21
  }, {
      start: 7863,
      length: 1,
      convRule: rule22
  }, {
      start: 7864,
      length: 1,
      convRule: rule21
  }, {
      start: 7865,
      length: 1,
      convRule: rule22
  }, {
      start: 7866,
      length: 1,
      convRule: rule21
  }, {
      start: 7867,
      length: 1,
      convRule: rule22
  }, {
      start: 7868,
      length: 1,
      convRule: rule21
  }, {
      start: 7869,
      length: 1,
      convRule: rule22
  }, {
      start: 7870,
      length: 1,
      convRule: rule21
  }, {
      start: 7871,
      length: 1,
      convRule: rule22
  }, {
      start: 7872,
      length: 1,
      convRule: rule21
  }, {
      start: 7873,
      length: 1,
      convRule: rule22
  }, {
      start: 7874,
      length: 1,
      convRule: rule21
  }, {
      start: 7875,
      length: 1,
      convRule: rule22
  }, {
      start: 7876,
      length: 1,
      convRule: rule21
  }, {
      start: 7877,
      length: 1,
      convRule: rule22
  }, {
      start: 7878,
      length: 1,
      convRule: rule21
  }, {
      start: 7879,
      length: 1,
      convRule: rule22
  }, {
      start: 7880,
      length: 1,
      convRule: rule21
  }, {
      start: 7881,
      length: 1,
      convRule: rule22
  }, {
      start: 7882,
      length: 1,
      convRule: rule21
  }, {
      start: 7883,
      length: 1,
      convRule: rule22
  }, {
      start: 7884,
      length: 1,
      convRule: rule21
  }, {
      start: 7885,
      length: 1,
      convRule: rule22
  }, {
      start: 7886,
      length: 1,
      convRule: rule21
  }, {
      start: 7887,
      length: 1,
      convRule: rule22
  }, {
      start: 7888,
      length: 1,
      convRule: rule21
  }, {
      start: 7889,
      length: 1,
      convRule: rule22
  }, {
      start: 7890,
      length: 1,
      convRule: rule21
  }, {
      start: 7891,
      length: 1,
      convRule: rule22
  }, {
      start: 7892,
      length: 1,
      convRule: rule21
  }, {
      start: 7893,
      length: 1,
      convRule: rule22
  }, {
      start: 7894,
      length: 1,
      convRule: rule21
  }, {
      start: 7895,
      length: 1,
      convRule: rule22
  }, {
      start: 7896,
      length: 1,
      convRule: rule21
  }, {
      start: 7897,
      length: 1,
      convRule: rule22
  }, {
      start: 7898,
      length: 1,
      convRule: rule21
  }, {
      start: 7899,
      length: 1,
      convRule: rule22
  }, {
      start: 7900,
      length: 1,
      convRule: rule21
  }, {
      start: 7901,
      length: 1,
      convRule: rule22
  }, {
      start: 7902,
      length: 1,
      convRule: rule21
  }, {
      start: 7903,
      length: 1,
      convRule: rule22
  }, {
      start: 7904,
      length: 1,
      convRule: rule21
  }, {
      start: 7905,
      length: 1,
      convRule: rule22
  }, {
      start: 7906,
      length: 1,
      convRule: rule21
  }, {
      start: 7907,
      length: 1,
      convRule: rule22
  }, {
      start: 7908,
      length: 1,
      convRule: rule21
  }, {
      start: 7909,
      length: 1,
      convRule: rule22
  }, {
      start: 7910,
      length: 1,
      convRule: rule21
  }, {
      start: 7911,
      length: 1,
      convRule: rule22
  }, {
      start: 7912,
      length: 1,
      convRule: rule21
  }, {
      start: 7913,
      length: 1,
      convRule: rule22
  }, {
      start: 7914,
      length: 1,
      convRule: rule21
  }, {
      start: 7915,
      length: 1,
      convRule: rule22
  }, {
      start: 7916,
      length: 1,
      convRule: rule21
  }, {
      start: 7917,
      length: 1,
      convRule: rule22
  }, {
      start: 7918,
      length: 1,
      convRule: rule21
  }, {
      start: 7919,
      length: 1,
      convRule: rule22
  }, {
      start: 7920,
      length: 1,
      convRule: rule21
  }, {
      start: 7921,
      length: 1,
      convRule: rule22
  }, {
      start: 7922,
      length: 1,
      convRule: rule21
  }, {
      start: 7923,
      length: 1,
      convRule: rule22
  }, {
      start: 7924,
      length: 1,
      convRule: rule21
  }, {
      start: 7925,
      length: 1,
      convRule: rule22
  }, {
      start: 7926,
      length: 1,
      convRule: rule21
  }, {
      start: 7927,
      length: 1,
      convRule: rule22
  }, {
      start: 7928,
      length: 1,
      convRule: rule21
  }, {
      start: 7929,
      length: 1,
      convRule: rule22
  }, {
      start: 7930,
      length: 1,
      convRule: rule21
  }, {
      start: 7931,
      length: 1,
      convRule: rule22
  }, {
      start: 7932,
      length: 1,
      convRule: rule21
  }, {
      start: 7933,
      length: 1,
      convRule: rule22
  }, {
      start: 7934,
      length: 1,
      convRule: rule21
  }, {
      start: 7935,
      length: 1,
      convRule: rule22
  }, {
      start: 7936,
      length: 8,
      convRule: rule121
  }, {
      start: 7944,
      length: 8,
      convRule: rule122
  }, {
      start: 7952,
      length: 6,
      convRule: rule121
  }, {
      start: 7960,
      length: 6,
      convRule: rule122
  }, {
      start: 7968,
      length: 8,
      convRule: rule121
  }, {
      start: 7976,
      length: 8,
      convRule: rule122
  }, {
      start: 7984,
      length: 8,
      convRule: rule121
  }, {
      start: 7992,
      length: 8,
      convRule: rule122
  }, {
      start: 8000,
      length: 6,
      convRule: rule121
  }, {
      start: 8008,
      length: 6,
      convRule: rule122
  }, {
      start: 8016,
      length: 1,
      convRule: rule14
  }, {
      start: 8017,
      length: 1,
      convRule: rule121
  }, {
      start: 8018,
      length: 1,
      convRule: rule14
  }, {
      start: 8019,
      length: 1,
      convRule: rule121
  }, {
      start: 8020,
      length: 1,
      convRule: rule14
  }, {
      start: 8021,
      length: 1,
      convRule: rule121
  }, {
      start: 8022,
      length: 1,
      convRule: rule14
  }, {
      start: 8023,
      length: 1,
      convRule: rule121
  }, {
      start: 8025,
      length: 1,
      convRule: rule122
  }, {
      start: 8027,
      length: 1,
      convRule: rule122
  }, {
      start: 8029,
      length: 1,
      convRule: rule122
  }, {
      start: 8031,
      length: 1,
      convRule: rule122
  }, {
      start: 8032,
      length: 8,
      convRule: rule121
  }, {
      start: 8040,
      length: 8,
      convRule: rule122
  }, {
      start: 8048,
      length: 2,
      convRule: rule123
  }, {
      start: 8050,
      length: 4,
      convRule: rule124
  }, {
      start: 8054,
      length: 2,
      convRule: rule125
  }, {
      start: 8056,
      length: 2,
      convRule: rule126
  }, {
      start: 8058,
      length: 2,
      convRule: rule127
  }, {
      start: 8060,
      length: 2,
      convRule: rule128
  }, {
      start: 8064,
      length: 8,
      convRule: rule121
  }, {
      start: 8072,
      length: 8,
      convRule: rule129
  }, {
      start: 8080,
      length: 8,
      convRule: rule121
  }, {
      start: 8088,
      length: 8,
      convRule: rule129
  }, {
      start: 8096,
      length: 8,
      convRule: rule121
  }, {
      start: 8104,
      length: 8,
      convRule: rule129
  }, {
      start: 8112,
      length: 2,
      convRule: rule121
  }, {
      start: 8114,
      length: 1,
      convRule: rule14
  }, {
      start: 8115,
      length: 1,
      convRule: rule130
  }, {
      start: 8116,
      length: 1,
      convRule: rule14
  }, {
      start: 8118,
      length: 2,
      convRule: rule14
  }, {
      start: 8120,
      length: 2,
      convRule: rule122
  }, {
      start: 8122,
      length: 2,
      convRule: rule131
  }, {
      start: 8124,
      length: 1,
      convRule: rule132
  }, {
      start: 8125,
      length: 1,
      convRule: rule10
  }, {
      start: 8126,
      length: 1,
      convRule: rule133
  }, {
      start: 8127,
      length: 3,
      convRule: rule10
  }, {
      start: 8130,
      length: 1,
      convRule: rule14
  }, {
      start: 8131,
      length: 1,
      convRule: rule130
  }, {
      start: 8132,
      length: 1,
      convRule: rule14
  }, {
      start: 8134,
      length: 2,
      convRule: rule14
  }, {
      start: 8136,
      length: 4,
      convRule: rule134
  }, {
      start: 8140,
      length: 1,
      convRule: rule132
  }, {
      start: 8141,
      length: 3,
      convRule: rule10
  }, {
      start: 8144,
      length: 2,
      convRule: rule121
  }, {
      start: 8146,
      length: 2,
      convRule: rule14
  }, {
      start: 8150,
      length: 2,
      convRule: rule14
  }, {
      start: 8152,
      length: 2,
      convRule: rule122
  }, {
      start: 8154,
      length: 2,
      convRule: rule135
  }, {
      start: 8157,
      length: 3,
      convRule: rule10
  }, {
      start: 8160,
      length: 2,
      convRule: rule121
  }, {
      start: 8162,
      length: 3,
      convRule: rule14
  }, {
      start: 8165,
      length: 1,
      convRule: rule104
  }, {
      start: 8166,
      length: 2,
      convRule: rule14
  }, {
      start: 8168,
      length: 2,
      convRule: rule122
  }, {
      start: 8170,
      length: 2,
      convRule: rule136
  }, {
      start: 8172,
      length: 1,
      convRule: rule107
  }, {
      start: 8173,
      length: 3,
      convRule: rule10
  }, {
      start: 8178,
      length: 1,
      convRule: rule14
  }, {
      start: 8179,
      length: 1,
      convRule: rule130
  }, {
      start: 8180,
      length: 1,
      convRule: rule14
  }, {
      start: 8182,
      length: 2,
      convRule: rule14
  }, {
      start: 8184,
      length: 2,
      convRule: rule137
  }, {
      start: 8186,
      length: 2,
      convRule: rule138
  }, {
      start: 8188,
      length: 1,
      convRule: rule132
  }, {
      start: 8189,
      length: 2,
      convRule: rule10
  }, {
      start: 8192,
      length: 11,
      convRule: rule1
  }, {
      start: 8203,
      length: 5,
      convRule: rule16
  }, {
      start: 8208,
      length: 6,
      convRule: rule7
  }, {
      start: 8214,
      length: 2,
      convRule: rule2
  }, {
      start: 8216,
      length: 1,
      convRule: rule15
  }, {
      start: 8217,
      length: 1,
      convRule: rule19
  }, {
      start: 8218,
      length: 1,
      convRule: rule4
  }, {
      start: 8219,
      length: 2,
      convRule: rule15
  }, {
      start: 8221,
      length: 1,
      convRule: rule19
  }, {
      start: 8222,
      length: 1,
      convRule: rule4
  }, {
      start: 8223,
      length: 1,
      convRule: rule15
  }, {
      start: 8224,
      length: 8,
      convRule: rule2
  }, {
      start: 8232,
      length: 1,
      convRule: rule139
  }, {
      start: 8233,
      length: 1,
      convRule: rule140
  }, {
      start: 8234,
      length: 5,
      convRule: rule16
  }, {
      start: 8239,
      length: 1,
      convRule: rule1
  }, {
      start: 8240,
      length: 9,
      convRule: rule2
  }, {
      start: 8249,
      length: 1,
      convRule: rule15
  }, {
      start: 8250,
      length: 1,
      convRule: rule19
  }, {
      start: 8251,
      length: 4,
      convRule: rule2
  }, {
      start: 8255,
      length: 2,
      convRule: rule11
  }, {
      start: 8257,
      length: 3,
      convRule: rule2
  }, {
      start: 8260,
      length: 1,
      convRule: rule6
  }, {
      start: 8261,
      length: 1,
      convRule: rule4
  }, {
      start: 8262,
      length: 1,
      convRule: rule5
  }, {
      start: 8263,
      length: 11,
      convRule: rule2
  }, {
      start: 8274,
      length: 1,
      convRule: rule6
  }, {
      start: 8275,
      length: 1,
      convRule: rule2
  }, {
      start: 8276,
      length: 1,
      convRule: rule11
  }, {
      start: 8277,
      length: 10,
      convRule: rule2
  }, {
      start: 8287,
      length: 1,
      convRule: rule1
  }, {
      start: 8288,
      length: 5,
      convRule: rule16
  }, {
      start: 8298,
      length: 6,
      convRule: rule16
  }, {
      start: 8304,
      length: 1,
      convRule: rule17
  }, {
      start: 8305,
      length: 1,
      convRule: rule83
  }, {
      start: 8308,
      length: 6,
      convRule: rule17
  }, {
      start: 8314,
      length: 3,
      convRule: rule6
  }, {
      start: 8317,
      length: 1,
      convRule: rule4
  }, {
      start: 8318,
      length: 1,
      convRule: rule5
  }, {
      start: 8319,
      length: 1,
      convRule: rule83
  }, {
      start: 8320,
      length: 10,
      convRule: rule17
  }, {
      start: 8330,
      length: 3,
      convRule: rule6
  }, {
      start: 8333,
      length: 1,
      convRule: rule4
  }, {
      start: 8334,
      length: 1,
      convRule: rule5
  }, {
      start: 8336,
      length: 13,
      convRule: rule83
  }, {
      start: 8352,
      length: 26,
      convRule: rule3
  }, {
      start: 8400,
      length: 13,
      convRule: rule84
  }, {
      start: 8413,
      length: 4,
      convRule: rule109
  }, {
      start: 8417,
      length: 1,
      convRule: rule84
  }, {
      start: 8418,
      length: 3,
      convRule: rule109
  }, {
      start: 8421,
      length: 12,
      convRule: rule84
  }, {
      start: 8448,
      length: 2,
      convRule: rule13
  }, {
      start: 8450,
      length: 1,
      convRule: rule98
  }, {
      start: 8451,
      length: 4,
      convRule: rule13
  }, {
      start: 8455,
      length: 1,
      convRule: rule98
  }, {
      start: 8456,
      length: 2,
      convRule: rule13
  }, {
      start: 8458,
      length: 1,
      convRule: rule14
  }, {
      start: 8459,
      length: 3,
      convRule: rule98
  }, {
      start: 8462,
      length: 2,
      convRule: rule14
  }, {
      start: 8464,
      length: 3,
      convRule: rule98
  }, {
      start: 8467,
      length: 1,
      convRule: rule14
  }, {
      start: 8468,
      length: 1,
      convRule: rule13
  }, {
      start: 8469,
      length: 1,
      convRule: rule98
  }, {
      start: 8470,
      length: 2,
      convRule: rule13
  }, {
      start: 8472,
      length: 1,
      convRule: rule6
  }, {
      start: 8473,
      length: 5,
      convRule: rule98
  }, {
      start: 8478,
      length: 6,
      convRule: rule13
  }, {
      start: 8484,
      length: 1,
      convRule: rule98
  }, {
      start: 8485,
      length: 1,
      convRule: rule13
  }, {
      start: 8486,
      length: 1,
      convRule: rule141
  }, {
      start: 8487,
      length: 1,
      convRule: rule13
  }, {
      start: 8488,
      length: 1,
      convRule: rule98
  }, {
      start: 8489,
      length: 1,
      convRule: rule13
  }, {
      start: 8490,
      length: 1,
      convRule: rule142
  }, {
      start: 8491,
      length: 1,
      convRule: rule143
  }, {
      start: 8492,
      length: 2,
      convRule: rule98
  }, {
      start: 8494,
      length: 1,
      convRule: rule13
  }, {
      start: 8495,
      length: 1,
      convRule: rule14
  }, {
      start: 8496,
      length: 2,
      convRule: rule98
  }, {
      start: 8498,
      length: 1,
      convRule: rule144
  }, {
      start: 8499,
      length: 1,
      convRule: rule98
  }, {
      start: 8500,
      length: 1,
      convRule: rule14
  }, {
      start: 8501,
      length: 4,
      convRule: rule45
  }, {
      start: 8505,
      length: 1,
      convRule: rule14
  }, {
      start: 8506,
      length: 2,
      convRule: rule13
  }, {
      start: 8508,
      length: 2,
      convRule: rule14
  }, {
      start: 8510,
      length: 2,
      convRule: rule98
  }, {
      start: 8512,
      length: 5,
      convRule: rule6
  }, {
      start: 8517,
      length: 1,
      convRule: rule98
  }, {
      start: 8518,
      length: 4,
      convRule: rule14
  }, {
      start: 8522,
      length: 1,
      convRule: rule13
  }, {
      start: 8523,
      length: 1,
      convRule: rule6
  }, {
      start: 8524,
      length: 2,
      convRule: rule13
  }, {
      start: 8526,
      length: 1,
      convRule: rule145
  }, {
      start: 8527,
      length: 1,
      convRule: rule13
  }, {
      start: 8528,
      length: 16,
      convRule: rule17
  }, {
      start: 8544,
      length: 16,
      convRule: rule146
  }, {
      start: 8560,
      length: 16,
      convRule: rule147
  }, {
      start: 8576,
      length: 3,
      convRule: rule116
  }, {
      start: 8579,
      length: 1,
      convRule: rule21
  }, {
      start: 8580,
      length: 1,
      convRule: rule22
  }, {
      start: 8581,
      length: 4,
      convRule: rule116
  }, {
      start: 8585,
      length: 1,
      convRule: rule17
  }, {
      start: 8592,
      length: 5,
      convRule: rule6
  }, {
      start: 8597,
      length: 5,
      convRule: rule13
  }, {
      start: 8602,
      length: 2,
      convRule: rule6
  }, {
      start: 8604,
      length: 4,
      convRule: rule13
  }, {
      start: 8608,
      length: 1,
      convRule: rule6
  }, {
      start: 8609,
      length: 2,
      convRule: rule13
  }, {
      start: 8611,
      length: 1,
      convRule: rule6
  }, {
      start: 8612,
      length: 2,
      convRule: rule13
  }, {
      start: 8614,
      length: 1,
      convRule: rule6
  }, {
      start: 8615,
      length: 7,
      convRule: rule13
  }, {
      start: 8622,
      length: 1,
      convRule: rule6
  }, {
      start: 8623,
      length: 31,
      convRule: rule13
  }, {
      start: 8654,
      length: 2,
      convRule: rule6
  }, {
      start: 8656,
      length: 2,
      convRule: rule13
  }, {
      start: 8658,
      length: 1,
      convRule: rule6
  }, {
      start: 8659,
      length: 1,
      convRule: rule13
  }, {
      start: 8660,
      length: 1,
      convRule: rule6
  }, {
      start: 8661,
      length: 31,
      convRule: rule13
  }, {
      start: 8692,
      length: 268,
      convRule: rule6
  }, {
      start: 8960,
      length: 8,
      convRule: rule13
  }, {
      start: 8968,
      length: 4,
      convRule: rule6
  }, {
      start: 8972,
      length: 20,
      convRule: rule13
  }, {
      start: 8992,
      length: 2,
      convRule: rule6
  }, {
      start: 8994,
      length: 7,
      convRule: rule13
  }, {
      start: 9001,
      length: 1,
      convRule: rule4
  }, {
      start: 9002,
      length: 1,
      convRule: rule5
  }, {
      start: 9003,
      length: 81,
      convRule: rule13
  }, {
      start: 9084,
      length: 1,
      convRule: rule6
  }, {
      start: 9085,
      length: 30,
      convRule: rule13
  }, {
      start: 9115,
      length: 25,
      convRule: rule6
  }, {
      start: 9140,
      length: 40,
      convRule: rule13
  }, {
      start: 9180,
      length: 6,
      convRule: rule6
  }, {
      start: 9186,
      length: 18,
      convRule: rule13
  }, {
      start: 9216,
      length: 39,
      convRule: rule13
  }, {
      start: 9280,
      length: 11,
      convRule: rule13
  }, {
      start: 9312,
      length: 60,
      convRule: rule17
  }, {
      start: 9372,
      length: 26,
      convRule: rule13
  }, {
      start: 9398,
      length: 26,
      convRule: rule148
  }, {
      start: 9424,
      length: 26,
      convRule: rule149
  }, {
      start: 9450,
      length: 22,
      convRule: rule17
  }, {
      start: 9472,
      length: 183,
      convRule: rule13
  }, {
      start: 9655,
      length: 1,
      convRule: rule6
  }, {
      start: 9656,
      length: 9,
      convRule: rule13
  }, {
      start: 9665,
      length: 1,
      convRule: rule6
  }, {
      start: 9666,
      length: 54,
      convRule: rule13
  }, {
      start: 9720,
      length: 8,
      convRule: rule6
  }, {
      start: 9728,
      length: 111,
      convRule: rule13
  }, {
      start: 9839,
      length: 1,
      convRule: rule6
  }, {
      start: 9840,
      length: 144,
      convRule: rule13
  }, {
      start: 9985,
      length: 103,
      convRule: rule13
  }, {
      start: 10088,
      length: 1,
      convRule: rule4
  }, {
      start: 10089,
      length: 1,
      convRule: rule5
  }, {
      start: 10090,
      length: 1,
      convRule: rule4
  }, {
      start: 10091,
      length: 1,
      convRule: rule5
  }, {
      start: 10092,
      length: 1,
      convRule: rule4
  }, {
      start: 10093,
      length: 1,
      convRule: rule5
  }, {
      start: 10094,
      length: 1,
      convRule: rule4
  }, {
      start: 10095,
      length: 1,
      convRule: rule5
  }, {
      start: 10096,
      length: 1,
      convRule: rule4
  }, {
      start: 10097,
      length: 1,
      convRule: rule5
  }, {
      start: 10098,
      length: 1,
      convRule: rule4
  }, {
      start: 10099,
      length: 1,
      convRule: rule5
  }, {
      start: 10100,
      length: 1,
      convRule: rule4
  }, {
      start: 10101,
      length: 1,
      convRule: rule5
  }, {
      start: 10102,
      length: 30,
      convRule: rule17
  }, {
      start: 10132,
      length: 44,
      convRule: rule13
  }, {
      start: 10176,
      length: 5,
      convRule: rule6
  }, {
      start: 10181,
      length: 1,
      convRule: rule4
  }, {
      start: 10182,
      length: 1,
      convRule: rule5
  }, {
      start: 10183,
      length: 4,
      convRule: rule6
  }, {
      start: 10188,
      length: 1,
      convRule: rule6
  }, {
      start: 10190,
      length: 24,
      convRule: rule6
  }, {
      start: 10214,
      length: 1,
      convRule: rule4
  }, {
      start: 10215,
      length: 1,
      convRule: rule5
  }, {
      start: 10216,
      length: 1,
      convRule: rule4
  }, {
      start: 10217,
      length: 1,
      convRule: rule5
  }, {
      start: 10218,
      length: 1,
      convRule: rule4
  }, {
      start: 10219,
      length: 1,
      convRule: rule5
  }, {
      start: 10220,
      length: 1,
      convRule: rule4
  }, {
      start: 10221,
      length: 1,
      convRule: rule5
  }, {
      start: 10222,
      length: 1,
      convRule: rule4
  }, {
      start: 10223,
      length: 1,
      convRule: rule5
  }, {
      start: 10224,
      length: 16,
      convRule: rule6
  }, {
      start: 10240,
      length: 256,
      convRule: rule13
  }, {
      start: 10496,
      length: 131,
      convRule: rule6
  }, {
      start: 10627,
      length: 1,
      convRule: rule4
  }, {
      start: 10628,
      length: 1,
      convRule: rule5
  }, {
      start: 10629,
      length: 1,
      convRule: rule4
  }, {
      start: 10630,
      length: 1,
      convRule: rule5
  }, {
      start: 10631,
      length: 1,
      convRule: rule4
  }, {
      start: 10632,
      length: 1,
      convRule: rule5
  }, {
      start: 10633,
      length: 1,
      convRule: rule4
  }, {
      start: 10634,
      length: 1,
      convRule: rule5
  }, {
      start: 10635,
      length: 1,
      convRule: rule4
  }, {
      start: 10636,
      length: 1,
      convRule: rule5
  }, {
      start: 10637,
      length: 1,
      convRule: rule4
  }, {
      start: 10638,
      length: 1,
      convRule: rule5
  }, {
      start: 10639,
      length: 1,
      convRule: rule4
  }, {
      start: 10640,
      length: 1,
      convRule: rule5
  }, {
      start: 10641,
      length: 1,
      convRule: rule4
  }, {
      start: 10642,
      length: 1,
      convRule: rule5
  }, {
      start: 10643,
      length: 1,
      convRule: rule4
  }, {
      start: 10644,
      length: 1,
      convRule: rule5
  }, {
      start: 10645,
      length: 1,
      convRule: rule4
  }, {
      start: 10646,
      length: 1,
      convRule: rule5
  }, {
      start: 10647,
      length: 1,
      convRule: rule4
  }, {
      start: 10648,
      length: 1,
      convRule: rule5
  }, {
      start: 10649,
      length: 63,
      convRule: rule6
  }, {
      start: 10712,
      length: 1,
      convRule: rule4
  }, {
      start: 10713,
      length: 1,
      convRule: rule5
  }, {
      start: 10714,
      length: 1,
      convRule: rule4
  }, {
      start: 10715,
      length: 1,
      convRule: rule5
  }, {
      start: 10716,
      length: 32,
      convRule: rule6
  }, {
      start: 10748,
      length: 1,
      convRule: rule4
  }, {
      start: 10749,
      length: 1,
      convRule: rule5
  }, {
      start: 10750,
      length: 258,
      convRule: rule6
  }, {
      start: 11008,
      length: 48,
      convRule: rule13
  }, {
      start: 11056,
      length: 21,
      convRule: rule6
  }, {
      start: 11077,
      length: 2,
      convRule: rule13
  }, {
      start: 11079,
      length: 6,
      convRule: rule6
  }, {
      start: 11088,
      length: 10,
      convRule: rule13
  }, {
      start: 11264,
      length: 47,
      convRule: rule112
  }, {
      start: 11312,
      length: 47,
      convRule: rule113
  }, {
      start: 11360,
      length: 1,
      convRule: rule21
  }, {
      start: 11361,
      length: 1,
      convRule: rule22
  }, {
      start: 11362,
      length: 1,
      convRule: rule150
  }, {
      start: 11363,
      length: 1,
      convRule: rule151
  }, {
      start: 11364,
      length: 1,
      convRule: rule152
  }, {
      start: 11365,
      length: 1,
      convRule: rule153
  }, {
      start: 11366,
      length: 1,
      convRule: rule154
  }, {
      start: 11367,
      length: 1,
      convRule: rule21
  }, {
      start: 11368,
      length: 1,
      convRule: rule22
  }, {
      start: 11369,
      length: 1,
      convRule: rule21
  }, {
      start: 11370,
      length: 1,
      convRule: rule22
  }, {
      start: 11371,
      length: 1,
      convRule: rule21
  }, {
      start: 11372,
      length: 1,
      convRule: rule22
  }, {
      start: 11373,
      length: 1,
      convRule: rule155
  }, {
      start: 11374,
      length: 1,
      convRule: rule156
  }, {
      start: 11375,
      length: 1,
      convRule: rule157
  }, {
      start: 11376,
      length: 1,
      convRule: rule158
  }, {
      start: 11377,
      length: 1,
      convRule: rule14
  }, {
      start: 11378,
      length: 1,
      convRule: rule21
  }, {
      start: 11379,
      length: 1,
      convRule: rule22
  }, {
      start: 11380,
      length: 1,
      convRule: rule14
  }, {
      start: 11381,
      length: 1,
      convRule: rule21
  }, {
      start: 11382,
      length: 1,
      convRule: rule22
  }, {
      start: 11383,
      length: 6,
      convRule: rule14
  }, {
      start: 11389,
      length: 1,
      convRule: rule83
  }, {
      start: 11390,
      length: 2,
      convRule: rule159
  }, {
      start: 11392,
      length: 1,
      convRule: rule21
  }, {
      start: 11393,
      length: 1,
      convRule: rule22
  }, {
      start: 11394,
      length: 1,
      convRule: rule21
  }, {
      start: 11395,
      length: 1,
      convRule: rule22
  }, {
      start: 11396,
      length: 1,
      convRule: rule21
  }, {
      start: 11397,
      length: 1,
      convRule: rule22
  }, {
      start: 11398,
      length: 1,
      convRule: rule21
  }, {
      start: 11399,
      length: 1,
      convRule: rule22
  }, {
      start: 11400,
      length: 1,
      convRule: rule21
  }, {
      start: 11401,
      length: 1,
      convRule: rule22
  }, {
      start: 11402,
      length: 1,
      convRule: rule21
  }, {
      start: 11403,
      length: 1,
      convRule: rule22
  }, {
      start: 11404,
      length: 1,
      convRule: rule21
  }, {
      start: 11405,
      length: 1,
      convRule: rule22
  }, {
      start: 11406,
      length: 1,
      convRule: rule21
  }, {
      start: 11407,
      length: 1,
      convRule: rule22
  }, {
      start: 11408,
      length: 1,
      convRule: rule21
  }, {
      start: 11409,
      length: 1,
      convRule: rule22
  }, {
      start: 11410,
      length: 1,
      convRule: rule21
  }, {
      start: 11411,
      length: 1,
      convRule: rule22
  }, {
      start: 11412,
      length: 1,
      convRule: rule21
  }, {
      start: 11413,
      length: 1,
      convRule: rule22
  }, {
      start: 11414,
      length: 1,
      convRule: rule21
  }, {
      start: 11415,
      length: 1,
      convRule: rule22
  }, {
      start: 11416,
      length: 1,
      convRule: rule21
  }, {
      start: 11417,
      length: 1,
      convRule: rule22
  }, {
      start: 11418,
      length: 1,
      convRule: rule21
  }, {
      start: 11419,
      length: 1,
      convRule: rule22
  }, {
      start: 11420,
      length: 1,
      convRule: rule21
  }, {
      start: 11421,
      length: 1,
      convRule: rule22
  }, {
      start: 11422,
      length: 1,
      convRule: rule21
  }, {
      start: 11423,
      length: 1,
      convRule: rule22
  }, {
      start: 11424,
      length: 1,
      convRule: rule21
  }, {
      start: 11425,
      length: 1,
      convRule: rule22
  }, {
      start: 11426,
      length: 1,
      convRule: rule21
  }, {
      start: 11427,
      length: 1,
      convRule: rule22
  }, {
      start: 11428,
      length: 1,
      convRule: rule21
  }, {
      start: 11429,
      length: 1,
      convRule: rule22
  }, {
      start: 11430,
      length: 1,
      convRule: rule21
  }, {
      start: 11431,
      length: 1,
      convRule: rule22
  }, {
      start: 11432,
      length: 1,
      convRule: rule21
  }, {
      start: 11433,
      length: 1,
      convRule: rule22
  }, {
      start: 11434,
      length: 1,
      convRule: rule21
  }, {
      start: 11435,
      length: 1,
      convRule: rule22
  }, {
      start: 11436,
      length: 1,
      convRule: rule21
  }, {
      start: 11437,
      length: 1,
      convRule: rule22
  }, {
      start: 11438,
      length: 1,
      convRule: rule21
  }, {
      start: 11439,
      length: 1,
      convRule: rule22
  }, {
      start: 11440,
      length: 1,
      convRule: rule21
  }, {
      start: 11441,
      length: 1,
      convRule: rule22
  }, {
      start: 11442,
      length: 1,
      convRule: rule21
  }, {
      start: 11443,
      length: 1,
      convRule: rule22
  }, {
      start: 11444,
      length: 1,
      convRule: rule21
  }, {
      start: 11445,
      length: 1,
      convRule: rule22
  }, {
      start: 11446,
      length: 1,
      convRule: rule21
  }, {
      start: 11447,
      length: 1,
      convRule: rule22
  }, {
      start: 11448,
      length: 1,
      convRule: rule21
  }, {
      start: 11449,
      length: 1,
      convRule: rule22
  }, {
      start: 11450,
      length: 1,
      convRule: rule21
  }, {
      start: 11451,
      length: 1,
      convRule: rule22
  }, {
      start: 11452,
      length: 1,
      convRule: rule21
  }, {
      start: 11453,
      length: 1,
      convRule: rule22
  }, {
      start: 11454,
      length: 1,
      convRule: rule21
  }, {
      start: 11455,
      length: 1,
      convRule: rule22
  }, {
      start: 11456,
      length: 1,
      convRule: rule21
  }, {
      start: 11457,
      length: 1,
      convRule: rule22
  }, {
      start: 11458,
      length: 1,
      convRule: rule21
  }, {
      start: 11459,
      length: 1,
      convRule: rule22
  }, {
      start: 11460,
      length: 1,
      convRule: rule21
  }, {
      start: 11461,
      length: 1,
      convRule: rule22
  }, {
      start: 11462,
      length: 1,
      convRule: rule21
  }, {
      start: 11463,
      length: 1,
      convRule: rule22
  }, {
      start: 11464,
      length: 1,
      convRule: rule21
  }, {
      start: 11465,
      length: 1,
      convRule: rule22
  }, {
      start: 11466,
      length: 1,
      convRule: rule21
  }, {
      start: 11467,
      length: 1,
      convRule: rule22
  }, {
      start: 11468,
      length: 1,
      convRule: rule21
  }, {
      start: 11469,
      length: 1,
      convRule: rule22
  }, {
      start: 11470,
      length: 1,
      convRule: rule21
  }, {
      start: 11471,
      length: 1,
      convRule: rule22
  }, {
      start: 11472,
      length: 1,
      convRule: rule21
  }, {
      start: 11473,
      length: 1,
      convRule: rule22
  }, {
      start: 11474,
      length: 1,
      convRule: rule21
  }, {
      start: 11475,
      length: 1,
      convRule: rule22
  }, {
      start: 11476,
      length: 1,
      convRule: rule21
  }, {
      start: 11477,
      length: 1,
      convRule: rule22
  }, {
      start: 11478,
      length: 1,
      convRule: rule21
  }, {
      start: 11479,
      length: 1,
      convRule: rule22
  }, {
      start: 11480,
      length: 1,
      convRule: rule21
  }, {
      start: 11481,
      length: 1,
      convRule: rule22
  }, {
      start: 11482,
      length: 1,
      convRule: rule21
  }, {
      start: 11483,
      length: 1,
      convRule: rule22
  }, {
      start: 11484,
      length: 1,
      convRule: rule21
  }, {
      start: 11485,
      length: 1,
      convRule: rule22
  }, {
      start: 11486,
      length: 1,
      convRule: rule21
  }, {
      start: 11487,
      length: 1,
      convRule: rule22
  }, {
      start: 11488,
      length: 1,
      convRule: rule21
  }, {
      start: 11489,
      length: 1,
      convRule: rule22
  }, {
      start: 11490,
      length: 1,
      convRule: rule21
  }, {
      start: 11491,
      length: 1,
      convRule: rule22
  }, {
      start: 11492,
      length: 1,
      convRule: rule14
  }, {
      start: 11493,
      length: 6,
      convRule: rule13
  }, {
      start: 11499,
      length: 1,
      convRule: rule21
  }, {
      start: 11500,
      length: 1,
      convRule: rule22
  }, {
      start: 11501,
      length: 1,
      convRule: rule21
  }, {
      start: 11502,
      length: 1,
      convRule: rule22
  }, {
      start: 11503,
      length: 3,
      convRule: rule84
  }, {
      start: 11513,
      length: 4,
      convRule: rule2
  }, {
      start: 11517,
      length: 1,
      convRule: rule17
  }, {
      start: 11518,
      length: 2,
      convRule: rule2
  }, {
      start: 11520,
      length: 38,
      convRule: rule160
  }, {
      start: 11568,
      length: 54,
      convRule: rule45
  }, {
      start: 11631,
      length: 1,
      convRule: rule83
  }, {
      start: 11632,
      length: 1,
      convRule: rule2
  }, {
      start: 11647,
      length: 1,
      convRule: rule84
  }, {
      start: 11648,
      length: 23,
      convRule: rule45
  }, {
      start: 11680,
      length: 7,
      convRule: rule45
  }, {
      start: 11688,
      length: 7,
      convRule: rule45
  }, {
      start: 11696,
      length: 7,
      convRule: rule45
  }, {
      start: 11704,
      length: 7,
      convRule: rule45
  }, {
      start: 11712,
      length: 7,
      convRule: rule45
  }, {
      start: 11720,
      length: 7,
      convRule: rule45
  }, {
      start: 11728,
      length: 7,
      convRule: rule45
  }, {
      start: 11736,
      length: 7,
      convRule: rule45
  }, {
      start: 11744,
      length: 32,
      convRule: rule84
  }, {
      start: 11776,
      length: 2,
      convRule: rule2
  }, {
      start: 11778,
      length: 1,
      convRule: rule15
  }, {
      start: 11779,
      length: 1,
      convRule: rule19
  }, {
      start: 11780,
      length: 1,
      convRule: rule15
  }, {
      start: 11781,
      length: 1,
      convRule: rule19
  }, {
      start: 11782,
      length: 3,
      convRule: rule2
  }, {
      start: 11785,
      length: 1,
      convRule: rule15
  }, {
      start: 11786,
      length: 1,
      convRule: rule19
  }, {
      start: 11787,
      length: 1,
      convRule: rule2
  }, {
      start: 11788,
      length: 1,
      convRule: rule15
  }, {
      start: 11789,
      length: 1,
      convRule: rule19
  }, {
      start: 11790,
      length: 9,
      convRule: rule2
  }, {
      start: 11799,
      length: 1,
      convRule: rule7
  }, {
      start: 11800,
      length: 2,
      convRule: rule2
  }, {
      start: 11802,
      length: 1,
      convRule: rule7
  }, {
      start: 11803,
      length: 1,
      convRule: rule2
  }, {
      start: 11804,
      length: 1,
      convRule: rule15
  }, {
      start: 11805,
      length: 1,
      convRule: rule19
  }, {
      start: 11806,
      length: 2,
      convRule: rule2
  }, {
      start: 11808,
      length: 1,
      convRule: rule15
  }, {
      start: 11809,
      length: 1,
      convRule: rule19
  }, {
      start: 11810,
      length: 1,
      convRule: rule4
  }, {
      start: 11811,
      length: 1,
      convRule: rule5
  }, {
      start: 11812,
      length: 1,
      convRule: rule4
  }, {
      start: 11813,
      length: 1,
      convRule: rule5
  }, {
      start: 11814,
      length: 1,
      convRule: rule4
  }, {
      start: 11815,
      length: 1,
      convRule: rule5
  }, {
      start: 11816,
      length: 1,
      convRule: rule4
  }, {
      start: 11817,
      length: 1,
      convRule: rule5
  }, {
      start: 11818,
      length: 5,
      convRule: rule2
  }, {
      start: 11823,
      length: 1,
      convRule: rule83
  }, {
      start: 11824,
      length: 2,
      convRule: rule2
  }, {
      start: 11904,
      length: 26,
      convRule: rule13
  }, {
      start: 11931,
      length: 89,
      convRule: rule13
  }, {
      start: 12032,
      length: 214,
      convRule: rule13
  }, {
      start: 12272,
      length: 12,
      convRule: rule13
  }, {
      start: 12288,
      length: 1,
      convRule: rule1
  }, {
      start: 12289,
      length: 3,
      convRule: rule2
  }, {
      start: 12292,
      length: 1,
      convRule: rule13
  }, {
      start: 12293,
      length: 1,
      convRule: rule83
  }, {
      start: 12294,
      length: 1,
      convRule: rule45
  }, {
      start: 12295,
      length: 1,
      convRule: rule116
  }, {
      start: 12296,
      length: 1,
      convRule: rule4
  }, {
      start: 12297,
      length: 1,
      convRule: rule5
  }, {
      start: 12298,
      length: 1,
      convRule: rule4
  }, {
      start: 12299,
      length: 1,
      convRule: rule5
  }, {
      start: 12300,
      length: 1,
      convRule: rule4
  }, {
      start: 12301,
      length: 1,
      convRule: rule5
  }, {
      start: 12302,
      length: 1,
      convRule: rule4
  }, {
      start: 12303,
      length: 1,
      convRule: rule5
  }, {
      start: 12304,
      length: 1,
      convRule: rule4
  }, {
      start: 12305,
      length: 1,
      convRule: rule5
  }, {
      start: 12306,
      length: 2,
      convRule: rule13
  }, {
      start: 12308,
      length: 1,
      convRule: rule4
  }, {
      start: 12309,
      length: 1,
      convRule: rule5
  }, {
      start: 12310,
      length: 1,
      convRule: rule4
  }, {
      start: 12311,
      length: 1,
      convRule: rule5
  }, {
      start: 12312,
      length: 1,
      convRule: rule4
  }, {
      start: 12313,
      length: 1,
      convRule: rule5
  }, {
      start: 12314,
      length: 1,
      convRule: rule4
  }, {
      start: 12315,
      length: 1,
      convRule: rule5
  }, {
      start: 12316,
      length: 1,
      convRule: rule7
  }, {
      start: 12317,
      length: 1,
      convRule: rule4
  }, {
      start: 12318,
      length: 2,
      convRule: rule5
  }, {
      start: 12320,
      length: 1,
      convRule: rule13
  }, {
      start: 12321,
      length: 9,
      convRule: rule116
  }, {
      start: 12330,
      length: 6,
      convRule: rule84
  }, {
      start: 12336,
      length: 1,
      convRule: rule7
  }, {
      start: 12337,
      length: 5,
      convRule: rule83
  }, {
      start: 12342,
      length: 2,
      convRule: rule13
  }, {
      start: 12344,
      length: 3,
      convRule: rule116
  }, {
      start: 12347,
      length: 1,
      convRule: rule83
  }, {
      start: 12348,
      length: 1,
      convRule: rule45
  }, {
      start: 12349,
      length: 1,
      convRule: rule2
  }, {
      start: 12350,
      length: 2,
      convRule: rule13
  }, {
      start: 12353,
      length: 86,
      convRule: rule45
  }, {
      start: 12441,
      length: 2,
      convRule: rule84
  }, {
      start: 12443,
      length: 2,
      convRule: rule10
  }, {
      start: 12445,
      length: 2,
      convRule: rule83
  }, {
      start: 12447,
      length: 1,
      convRule: rule45
  }, {
      start: 12448,
      length: 1,
      convRule: rule7
  }, {
      start: 12449,
      length: 90,
      convRule: rule45
  }, {
      start: 12539,
      length: 1,
      convRule: rule2
  }, {
      start: 12540,
      length: 3,
      convRule: rule83
  }, {
      start: 12543,
      length: 1,
      convRule: rule45
  }, {
      start: 12549,
      length: 41,
      convRule: rule45
  }, {
      start: 12593,
      length: 94,
      convRule: rule45
  }, {
      start: 12688,
      length: 2,
      convRule: rule13
  }, {
      start: 12690,
      length: 4,
      convRule: rule17
  }, {
      start: 12694,
      length: 10,
      convRule: rule13
  }, {
      start: 12704,
      length: 27,
      convRule: rule45
  }, {
      start: 12736,
      length: 36,
      convRule: rule13
  }, {
      start: 12784,
      length: 16,
      convRule: rule45
  }, {
      start: 12800,
      length: 31,
      convRule: rule13
  }, {
      start: 12832,
      length: 10,
      convRule: rule17
  }, {
      start: 12842,
      length: 39,
      convRule: rule13
  }, {
      start: 12881,
      length: 15,
      convRule: rule17
  }, {
      start: 12896,
      length: 32,
      convRule: rule13
  }, {
      start: 12928,
      length: 10,
      convRule: rule17
  }, {
      start: 12938,
      length: 39,
      convRule: rule13
  }, {
      start: 12977,
      length: 15,
      convRule: rule17
  }, {
      start: 12992,
      length: 63,
      convRule: rule13
  }, {
      start: 13056,
      length: 256,
      convRule: rule13
  }, {
      start: 13312,
      length: 6582,
      convRule: rule45
  }, {
      start: 19904,
      length: 64,
      convRule: rule13
  }, {
      start: 19968,
      length: 20940,
      convRule: rule45
  }, {
      start: 40960,
      length: 21,
      convRule: rule45
  }, {
      start: 40981,
      length: 1,
      convRule: rule83
  }, {
      start: 40982,
      length: 1143,
      convRule: rule45
  }, {
      start: 42128,
      length: 55,
      convRule: rule13
  }, {
      start: 42192,
      length: 40,
      convRule: rule45
  }, {
      start: 42232,
      length: 6,
      convRule: rule83
  }, {
      start: 42238,
      length: 2,
      convRule: rule2
  }, {
      start: 42240,
      length: 268,
      convRule: rule45
  }, {
      start: 42508,
      length: 1,
      convRule: rule83
  }, {
      start: 42509,
      length: 3,
      convRule: rule2
  }, {
      start: 42512,
      length: 16,
      convRule: rule45
  }, {
      start: 42528,
      length: 10,
      convRule: rule8
  }, {
      start: 42538,
      length: 2,
      convRule: rule45
  }, {
      start: 42560,
      length: 1,
      convRule: rule21
  }, {
      start: 42561,
      length: 1,
      convRule: rule22
  }, {
      start: 42562,
      length: 1,
      convRule: rule21
  }, {
      start: 42563,
      length: 1,
      convRule: rule22
  }, {
      start: 42564,
      length: 1,
      convRule: rule21
  }, {
      start: 42565,
      length: 1,
      convRule: rule22
  }, {
      start: 42566,
      length: 1,
      convRule: rule21
  }, {
      start: 42567,
      length: 1,
      convRule: rule22
  }, {
      start: 42568,
      length: 1,
      convRule: rule21
  }, {
      start: 42569,
      length: 1,
      convRule: rule22
  }, {
      start: 42570,
      length: 1,
      convRule: rule21
  }, {
      start: 42571,
      length: 1,
      convRule: rule22
  }, {
      start: 42572,
      length: 1,
      convRule: rule21
  }, {
      start: 42573,
      length: 1,
      convRule: rule22
  }, {
      start: 42574,
      length: 1,
      convRule: rule21
  }, {
      start: 42575,
      length: 1,
      convRule: rule22
  }, {
      start: 42576,
      length: 1,
      convRule: rule21
  }, {
      start: 42577,
      length: 1,
      convRule: rule22
  }, {
      start: 42578,
      length: 1,
      convRule: rule21
  }, {
      start: 42579,
      length: 1,
      convRule: rule22
  }, {
      start: 42580,
      length: 1,
      convRule: rule21
  }, {
      start: 42581,
      length: 1,
      convRule: rule22
  }, {
      start: 42582,
      length: 1,
      convRule: rule21
  }, {
      start: 42583,
      length: 1,
      convRule: rule22
  }, {
      start: 42584,
      length: 1,
      convRule: rule21
  }, {
      start: 42585,
      length: 1,
      convRule: rule22
  }, {
      start: 42586,
      length: 1,
      convRule: rule21
  }, {
      start: 42587,
      length: 1,
      convRule: rule22
  }, {
      start: 42588,
      length: 1,
      convRule: rule21
  }, {
      start: 42589,
      length: 1,
      convRule: rule22
  }, {
      start: 42590,
      length: 1,
      convRule: rule21
  }, {
      start: 42591,
      length: 1,
      convRule: rule22
  }, {
      start: 42592,
      length: 1,
      convRule: rule21
  }, {
      start: 42593,
      length: 1,
      convRule: rule22
  }, {
      start: 42594,
      length: 1,
      convRule: rule21
  }, {
      start: 42595,
      length: 1,
      convRule: rule22
  }, {
      start: 42596,
      length: 1,
      convRule: rule21
  }, {
      start: 42597,
      length: 1,
      convRule: rule22
  }, {
      start: 42598,
      length: 1,
      convRule: rule21
  }, {
      start: 42599,
      length: 1,
      convRule: rule22
  }, {
      start: 42600,
      length: 1,
      convRule: rule21
  }, {
      start: 42601,
      length: 1,
      convRule: rule22
  }, {
      start: 42602,
      length: 1,
      convRule: rule21
  }, {
      start: 42603,
      length: 1,
      convRule: rule22
  }, {
      start: 42604,
      length: 1,
      convRule: rule21
  }, {
      start: 42605,
      length: 1,
      convRule: rule22
  }, {
      start: 42606,
      length: 1,
      convRule: rule45
  }, {
      start: 42607,
      length: 1,
      convRule: rule84
  }, {
      start: 42608,
      length: 3,
      convRule: rule109
  }, {
      start: 42611,
      length: 1,
      convRule: rule2
  }, {
      start: 42620,
      length: 2,
      convRule: rule84
  }, {
      start: 42622,
      length: 1,
      convRule: rule2
  }, {
      start: 42623,
      length: 1,
      convRule: rule83
  }, {
      start: 42624,
      length: 1,
      convRule: rule21
  }, {
      start: 42625,
      length: 1,
      convRule: rule22
  }, {
      start: 42626,
      length: 1,
      convRule: rule21
  }, {
      start: 42627,
      length: 1,
      convRule: rule22
  }, {
      start: 42628,
      length: 1,
      convRule: rule21
  }, {
      start: 42629,
      length: 1,
      convRule: rule22
  }, {
      start: 42630,
      length: 1,
      convRule: rule21
  }, {
      start: 42631,
      length: 1,
      convRule: rule22
  }, {
      start: 42632,
      length: 1,
      convRule: rule21
  }, {
      start: 42633,
      length: 1,
      convRule: rule22
  }, {
      start: 42634,
      length: 1,
      convRule: rule21
  }, {
      start: 42635,
      length: 1,
      convRule: rule22
  }, {
      start: 42636,
      length: 1,
      convRule: rule21
  }, {
      start: 42637,
      length: 1,
      convRule: rule22
  }, {
      start: 42638,
      length: 1,
      convRule: rule21
  }, {
      start: 42639,
      length: 1,
      convRule: rule22
  }, {
      start: 42640,
      length: 1,
      convRule: rule21
  }, {
      start: 42641,
      length: 1,
      convRule: rule22
  }, {
      start: 42642,
      length: 1,
      convRule: rule21
  }, {
      start: 42643,
      length: 1,
      convRule: rule22
  }, {
      start: 42644,
      length: 1,
      convRule: rule21
  }, {
      start: 42645,
      length: 1,
      convRule: rule22
  }, {
      start: 42646,
      length: 1,
      convRule: rule21
  }, {
      start: 42647,
      length: 1,
      convRule: rule22
  }, {
      start: 42656,
      length: 70,
      convRule: rule45
  }, {
      start: 42726,
      length: 10,
      convRule: rule116
  }, {
      start: 42736,
      length: 2,
      convRule: rule84
  }, {
      start: 42738,
      length: 6,
      convRule: rule2
  }, {
      start: 42752,
      length: 23,
      convRule: rule10
  }, {
      start: 42775,
      length: 9,
      convRule: rule83
  }, {
      start: 42784,
      length: 2,
      convRule: rule10
  }, {
      start: 42786,
      length: 1,
      convRule: rule21
  }, {
      start: 42787,
      length: 1,
      convRule: rule22
  }, {
      start: 42788,
      length: 1,
      convRule: rule21
  }, {
      start: 42789,
      length: 1,
      convRule: rule22
  }, {
      start: 42790,
      length: 1,
      convRule: rule21
  }, {
      start: 42791,
      length: 1,
      convRule: rule22
  }, {
      start: 42792,
      length: 1,
      convRule: rule21
  }, {
      start: 42793,
      length: 1,
      convRule: rule22
  }, {
      start: 42794,
      length: 1,
      convRule: rule21
  }, {
      start: 42795,
      length: 1,
      convRule: rule22
  }, {
      start: 42796,
      length: 1,
      convRule: rule21
  }, {
      start: 42797,
      length: 1,
      convRule: rule22
  }, {
      start: 42798,
      length: 1,
      convRule: rule21
  }, {
      start: 42799,
      length: 1,
      convRule: rule22
  }, {
      start: 42800,
      length: 2,
      convRule: rule14
  }, {
      start: 42802,
      length: 1,
      convRule: rule21
  }, {
      start: 42803,
      length: 1,
      convRule: rule22
  }, {
      start: 42804,
      length: 1,
      convRule: rule21
  }, {
      start: 42805,
      length: 1,
      convRule: rule22
  }, {
      start: 42806,
      length: 1,
      convRule: rule21
  }, {
      start: 42807,
      length: 1,
      convRule: rule22
  }, {
      start: 42808,
      length: 1,
      convRule: rule21
  }, {
      start: 42809,
      length: 1,
      convRule: rule22
  }, {
      start: 42810,
      length: 1,
      convRule: rule21
  }, {
      start: 42811,
      length: 1,
      convRule: rule22
  }, {
      start: 42812,
      length: 1,
      convRule: rule21
  }, {
      start: 42813,
      length: 1,
      convRule: rule22
  }, {
      start: 42814,
      length: 1,
      convRule: rule21
  }, {
      start: 42815,
      length: 1,
      convRule: rule22
  }, {
      start: 42816,
      length: 1,
      convRule: rule21
  }, {
      start: 42817,
      length: 1,
      convRule: rule22
  }, {
      start: 42818,
      length: 1,
      convRule: rule21
  }, {
      start: 42819,
      length: 1,
      convRule: rule22
  }, {
      start: 42820,
      length: 1,
      convRule: rule21
  }, {
      start: 42821,
      length: 1,
      convRule: rule22
  }, {
      start: 42822,
      length: 1,
      convRule: rule21
  }, {
      start: 42823,
      length: 1,
      convRule: rule22
  }, {
      start: 42824,
      length: 1,
      convRule: rule21
  }, {
      start: 42825,
      length: 1,
      convRule: rule22
  }, {
      start: 42826,
      length: 1,
      convRule: rule21
  }, {
      start: 42827,
      length: 1,
      convRule: rule22
  }, {
      start: 42828,
      length: 1,
      convRule: rule21
  }, {
      start: 42829,
      length: 1,
      convRule: rule22
  }, {
      start: 42830,
      length: 1,
      convRule: rule21
  }, {
      start: 42831,
      length: 1,
      convRule: rule22
  }, {
      start: 42832,
      length: 1,
      convRule: rule21
  }, {
      start: 42833,
      length: 1,
      convRule: rule22
  }, {
      start: 42834,
      length: 1,
      convRule: rule21
  }, {
      start: 42835,
      length: 1,
      convRule: rule22
  }, {
      start: 42836,
      length: 1,
      convRule: rule21
  }, {
      start: 42837,
      length: 1,
      convRule: rule22
  }, {
      start: 42838,
      length: 1,
      convRule: rule21
  }, {
      start: 42839,
      length: 1,
      convRule: rule22
  }, {
      start: 42840,
      length: 1,
      convRule: rule21
  }, {
      start: 42841,
      length: 1,
      convRule: rule22
  }, {
      start: 42842,
      length: 1,
      convRule: rule21
  }, {
      start: 42843,
      length: 1,
      convRule: rule22
  }, {
      start: 42844,
      length: 1,
      convRule: rule21
  }, {
      start: 42845,
      length: 1,
      convRule: rule22
  }, {
      start: 42846,
      length: 1,
      convRule: rule21
  }, {
      start: 42847,
      length: 1,
      convRule: rule22
  }, {
      start: 42848,
      length: 1,
      convRule: rule21
  }, {
      start: 42849,
      length: 1,
      convRule: rule22
  }, {
      start: 42850,
      length: 1,
      convRule: rule21
  }, {
      start: 42851,
      length: 1,
      convRule: rule22
  }, {
      start: 42852,
      length: 1,
      convRule: rule21
  }, {
      start: 42853,
      length: 1,
      convRule: rule22
  }, {
      start: 42854,
      length: 1,
      convRule: rule21
  }, {
      start: 42855,
      length: 1,
      convRule: rule22
  }, {
      start: 42856,
      length: 1,
      convRule: rule21
  }, {
      start: 42857,
      length: 1,
      convRule: rule22
  }, {
      start: 42858,
      length: 1,
      convRule: rule21
  }, {
      start: 42859,
      length: 1,
      convRule: rule22
  }, {
      start: 42860,
      length: 1,
      convRule: rule21
  }, {
      start: 42861,
      length: 1,
      convRule: rule22
  }, {
      start: 42862,
      length: 1,
      convRule: rule21
  }, {
      start: 42863,
      length: 1,
      convRule: rule22
  }, {
      start: 42864,
      length: 1,
      convRule: rule83
  }, {
      start: 42865,
      length: 8,
      convRule: rule14
  }, {
      start: 42873,
      length: 1,
      convRule: rule21
  }, {
      start: 42874,
      length: 1,
      convRule: rule22
  }, {
      start: 42875,
      length: 1,
      convRule: rule21
  }, {
      start: 42876,
      length: 1,
      convRule: rule22
  }, {
      start: 42877,
      length: 1,
      convRule: rule161
  }, {
      start: 42878,
      length: 1,
      convRule: rule21
  }, {
      start: 42879,
      length: 1,
      convRule: rule22
  }, {
      start: 42880,
      length: 1,
      convRule: rule21
  }, {
      start: 42881,
      length: 1,
      convRule: rule22
  }, {
      start: 42882,
      length: 1,
      convRule: rule21
  }, {
      start: 42883,
      length: 1,
      convRule: rule22
  }, {
      start: 42884,
      length: 1,
      convRule: rule21
  }, {
      start: 42885,
      length: 1,
      convRule: rule22
  }, {
      start: 42886,
      length: 1,
      convRule: rule21
  }, {
      start: 42887,
      length: 1,
      convRule: rule22
  }, {
      start: 42888,
      length: 1,
      convRule: rule83
  }, {
      start: 42889,
      length: 2,
      convRule: rule10
  }, {
      start: 42891,
      length: 1,
      convRule: rule21
  }, {
      start: 42892,
      length: 1,
      convRule: rule22
  }, {
      start: 42893,
      length: 1,
      convRule: rule162
  }, {
      start: 42894,
      length: 1,
      convRule: rule14
  }, {
      start: 42896,
      length: 1,
      convRule: rule21
  }, {
      start: 42897,
      length: 1,
      convRule: rule22
  }, {
      start: 42912,
      length: 1,
      convRule: rule21
  }, {
      start: 42913,
      length: 1,
      convRule: rule22
  }, {
      start: 42914,
      length: 1,
      convRule: rule21
  }, {
      start: 42915,
      length: 1,
      convRule: rule22
  }, {
      start: 42916,
      length: 1,
      convRule: rule21
  }, {
      start: 42917,
      length: 1,
      convRule: rule22
  }, {
      start: 42918,
      length: 1,
      convRule: rule21
  }, {
      start: 42919,
      length: 1,
      convRule: rule22
  }, {
      start: 42920,
      length: 1,
      convRule: rule21
  }, {
      start: 42921,
      length: 1,
      convRule: rule22
  }, {
      start: 43002,
      length: 1,
      convRule: rule14
  }, {
      start: 43003,
      length: 7,
      convRule: rule45
  }, {
      start: 43010,
      length: 1,
      convRule: rule84
  }, {
      start: 43011,
      length: 3,
      convRule: rule45
  }, {
      start: 43014,
      length: 1,
      convRule: rule84
  }, {
      start: 43015,
      length: 4,
      convRule: rule45
  }, {
      start: 43019,
      length: 1,
      convRule: rule84
  }, {
      start: 43020,
      length: 23,
      convRule: rule45
  }, {
      start: 43043,
      length: 2,
      convRule: rule114
  }, {
      start: 43045,
      length: 2,
      convRule: rule84
  }, {
      start: 43047,
      length: 1,
      convRule: rule114
  }, {
      start: 43048,
      length: 4,
      convRule: rule13
  }, {
      start: 43056,
      length: 6,
      convRule: rule17
  }, {
      start: 43062,
      length: 2,
      convRule: rule13
  }, {
      start: 43064,
      length: 1,
      convRule: rule3
  }, {
      start: 43065,
      length: 1,
      convRule: rule13
  }, {
      start: 43072,
      length: 52,
      convRule: rule45
  }, {
      start: 43124,
      length: 4,
      convRule: rule2
  }, {
      start: 43136,
      length: 2,
      convRule: rule114
  }, {
      start: 43138,
      length: 50,
      convRule: rule45
  }, {
      start: 43188,
      length: 16,
      convRule: rule114
  }, {
      start: 43204,
      length: 1,
      convRule: rule84
  }, {
      start: 43214,
      length: 2,
      convRule: rule2
  }, {
      start: 43216,
      length: 10,
      convRule: rule8
  }, {
      start: 43232,
      length: 18,
      convRule: rule84
  }, {
      start: 43250,
      length: 6,
      convRule: rule45
  }, {
      start: 43256,
      length: 3,
      convRule: rule2
  }, {
      start: 43259,
      length: 1,
      convRule: rule45
  }, {
      start: 43264,
      length: 10,
      convRule: rule8
  }, {
      start: 43274,
      length: 28,
      convRule: rule45
  }, {
      start: 43302,
      length: 8,
      convRule: rule84
  }, {
      start: 43310,
      length: 2,
      convRule: rule2
  }, {
      start: 43312,
      length: 23,
      convRule: rule45
  }, {
      start: 43335,
      length: 11,
      convRule: rule84
  }, {
      start: 43346,
      length: 2,
      convRule: rule114
  }, {
      start: 43359,
      length: 1,
      convRule: rule2
  }, {
      start: 43360,
      length: 29,
      convRule: rule45
  }, {
      start: 43392,
      length: 3,
      convRule: rule84
  }, {
      start: 43395,
      length: 1,
      convRule: rule114
  }, {
      start: 43396,
      length: 47,
      convRule: rule45
  }, {
      start: 43443,
      length: 1,
      convRule: rule84
  }, {
      start: 43444,
      length: 2,
      convRule: rule114
  }, {
      start: 43446,
      length: 4,
      convRule: rule84
  }, {
      start: 43450,
      length: 2,
      convRule: rule114
  }, {
      start: 43452,
      length: 1,
      convRule: rule84
  }, {
      start: 43453,
      length: 4,
      convRule: rule114
  }, {
      start: 43457,
      length: 13,
      convRule: rule2
  }, {
      start: 43471,
      length: 1,
      convRule: rule83
  }, {
      start: 43472,
      length: 10,
      convRule: rule8
  }, {
      start: 43486,
      length: 2,
      convRule: rule2
  }, {
      start: 43520,
      length: 41,
      convRule: rule45
  }, {
      start: 43561,
      length: 6,
      convRule: rule84
  }, {
      start: 43567,
      length: 2,
      convRule: rule114
  }, {
      start: 43569,
      length: 2,
      convRule: rule84
  }, {
      start: 43571,
      length: 2,
      convRule: rule114
  }, {
      start: 43573,
      length: 2,
      convRule: rule84
  }, {
      start: 43584,
      length: 3,
      convRule: rule45
  }, {
      start: 43587,
      length: 1,
      convRule: rule84
  }, {
      start: 43588,
      length: 8,
      convRule: rule45
  }, {
      start: 43596,
      length: 1,
      convRule: rule84
  }, {
      start: 43597,
      length: 1,
      convRule: rule114
  }, {
      start: 43600,
      length: 10,
      convRule: rule8
  }, {
      start: 43612,
      length: 4,
      convRule: rule2
  }, {
      start: 43616,
      length: 16,
      convRule: rule45
  }, {
      start: 43632,
      length: 1,
      convRule: rule83
  }, {
      start: 43633,
      length: 6,
      convRule: rule45
  }, {
      start: 43639,
      length: 3,
      convRule: rule13
  }, {
      start: 43642,
      length: 1,
      convRule: rule45
  }, {
      start: 43643,
      length: 1,
      convRule: rule114
  }, {
      start: 43648,
      length: 48,
      convRule: rule45
  }, {
      start: 43696,
      length: 1,
      convRule: rule84
  }, {
      start: 43697,
      length: 1,
      convRule: rule45
  }, {
      start: 43698,
      length: 3,
      convRule: rule84
  }, {
      start: 43701,
      length: 2,
      convRule: rule45
  }, {
      start: 43703,
      length: 2,
      convRule: rule84
  }, {
      start: 43705,
      length: 5,
      convRule: rule45
  }, {
      start: 43710,
      length: 2,
      convRule: rule84
  }, {
      start: 43712,
      length: 1,
      convRule: rule45
  }, {
      start: 43713,
      length: 1,
      convRule: rule84
  }, {
      start: 43714,
      length: 1,
      convRule: rule45
  }, {
      start: 43739,
      length: 2,
      convRule: rule45
  }, {
      start: 43741,
      length: 1,
      convRule: rule83
  }, {
      start: 43742,
      length: 2,
      convRule: rule2
  }, {
      start: 43777,
      length: 6,
      convRule: rule45
  }, {
      start: 43785,
      length: 6,
      convRule: rule45
  }, {
      start: 43793,
      length: 6,
      convRule: rule45
  }, {
      start: 43808,
      length: 7,
      convRule: rule45
  }, {
      start: 43816,
      length: 7,
      convRule: rule45
  }, {
      start: 43968,
      length: 35,
      convRule: rule45
  }, {
      start: 44003,
      length: 2,
      convRule: rule114
  }, {
      start: 44005,
      length: 1,
      convRule: rule84
  }, {
      start: 44006,
      length: 2,
      convRule: rule114
  }, {
      start: 44008,
      length: 1,
      convRule: rule84
  }, {
      start: 44009,
      length: 2,
      convRule: rule114
  }, {
      start: 44011,
      length: 1,
      convRule: rule2
  }, {
      start: 44012,
      length: 1,
      convRule: rule114
  }, {
      start: 44013,
      length: 1,
      convRule: rule84
  }, {
      start: 44016,
      length: 10,
      convRule: rule8
  }, {
      start: 44032,
      length: 11172,
      convRule: rule45
  }, {
      start: 55216,
      length: 23,
      convRule: rule45
  }, {
      start: 55243,
      length: 49,
      convRule: rule45
  }, {
      start: 55296,
      length: 896,
      convRule: rule163
  }, {
      start: 56192,
      length: 128,
      convRule: rule163
  }, {
      start: 56320,
      length: 1024,
      convRule: rule163
  }, {
      start: 57344,
      length: 6400,
      convRule: rule164
  }, {
      start: 63744,
      length: 302,
      convRule: rule45
  }, {
      start: 64048,
      length: 62,
      convRule: rule45
  }, {
      start: 64112,
      length: 106,
      convRule: rule45
  }, {
      start: 64256,
      length: 7,
      convRule: rule14
  }, {
      start: 64275,
      length: 5,
      convRule: rule14
  }, {
      start: 64285,
      length: 1,
      convRule: rule45
  }, {
      start: 64286,
      length: 1,
      convRule: rule84
  }, {
      start: 64287,
      length: 10,
      convRule: rule45
  }, {
      start: 64297,
      length: 1,
      convRule: rule6
  }, {
      start: 64298,
      length: 13,
      convRule: rule45
  }, {
      start: 64312,
      length: 5,
      convRule: rule45
  }, {
      start: 64318,
      length: 1,
      convRule: rule45
  }, {
      start: 64320,
      length: 2,
      convRule: rule45
  }, {
      start: 64323,
      length: 2,
      convRule: rule45
  }, {
      start: 64326,
      length: 108,
      convRule: rule45
  }, {
      start: 64434,
      length: 16,
      convRule: rule10
  }, {
      start: 64467,
      length: 363,
      convRule: rule45
  }, {
      start: 64830,
      length: 1,
      convRule: rule4
  }, {
      start: 64831,
      length: 1,
      convRule: rule5
  }, {
      start: 64848,
      length: 64,
      convRule: rule45
  }, {
      start: 64914,
      length: 54,
      convRule: rule45
  }, {
      start: 65008,
      length: 12,
      convRule: rule45
  }, {
      start: 65020,
      length: 1,
      convRule: rule3
  }, {
      start: 65021,
      length: 1,
      convRule: rule13
  }, {
      start: 65024,
      length: 16,
      convRule: rule84
  }, {
      start: 65040,
      length: 7,
      convRule: rule2
  }, {
      start: 65047,
      length: 1,
      convRule: rule4
  }, {
      start: 65048,
      length: 1,
      convRule: rule5
  }, {
      start: 65049,
      length: 1,
      convRule: rule2
  }, {
      start: 65056,
      length: 7,
      convRule: rule84
  }, {
      start: 65072,
      length: 1,
      convRule: rule2
  }, {
      start: 65073,
      length: 2,
      convRule: rule7
  }, {
      start: 65075,
      length: 2,
      convRule: rule11
  }, {
      start: 65077,
      length: 1,
      convRule: rule4
  }, {
      start: 65078,
      length: 1,
      convRule: rule5
  }, {
      start: 65079,
      length: 1,
      convRule: rule4
  }, {
      start: 65080,
      length: 1,
      convRule: rule5
  }, {
      start: 65081,
      length: 1,
      convRule: rule4
  }, {
      start: 65082,
      length: 1,
      convRule: rule5
  }, {
      start: 65083,
      length: 1,
      convRule: rule4
  }, {
      start: 65084,
      length: 1,
      convRule: rule5
  }, {
      start: 65085,
      length: 1,
      convRule: rule4
  }, {
      start: 65086,
      length: 1,
      convRule: rule5
  }, {
      start: 65087,
      length: 1,
      convRule: rule4
  }, {
      start: 65088,
      length: 1,
      convRule: rule5
  }, {
      start: 65089,
      length: 1,
      convRule: rule4
  }, {
      start: 65090,
      length: 1,
      convRule: rule5
  }, {
      start: 65091,
      length: 1,
      convRule: rule4
  }, {
      start: 65092,
      length: 1,
      convRule: rule5
  }, {
      start: 65093,
      length: 2,
      convRule: rule2
  }, {
      start: 65095,
      length: 1,
      convRule: rule4
  }, {
      start: 65096,
      length: 1,
      convRule: rule5
  }, {
      start: 65097,
      length: 4,
      convRule: rule2
  }, {
      start: 65101,
      length: 3,
      convRule: rule11
  }, {
      start: 65104,
      length: 3,
      convRule: rule2
  }, {
      start: 65108,
      length: 4,
      convRule: rule2
  }, {
      start: 65112,
      length: 1,
      convRule: rule7
  }, {
      start: 65113,
      length: 1,
      convRule: rule4
  }, {
      start: 65114,
      length: 1,
      convRule: rule5
  }, {
      start: 65115,
      length: 1,
      convRule: rule4
  }, {
      start: 65116,
      length: 1,
      convRule: rule5
  }, {
      start: 65117,
      length: 1,
      convRule: rule4
  }, {
      start: 65118,
      length: 1,
      convRule: rule5
  }, {
      start: 65119,
      length: 3,
      convRule: rule2
  }, {
      start: 65122,
      length: 1,
      convRule: rule6
  }, {
      start: 65123,
      length: 1,
      convRule: rule7
  }, {
      start: 65124,
      length: 3,
      convRule: rule6
  }, {
      start: 65128,
      length: 1,
      convRule: rule2
  }, {
      start: 65129,
      length: 1,
      convRule: rule3
  }, {
      start: 65130,
      length: 2,
      convRule: rule2
  }, {
      start: 65136,
      length: 5,
      convRule: rule45
  }, {
      start: 65142,
      length: 135,
      convRule: rule45
  }, {
      start: 65279,
      length: 1,
      convRule: rule16
  }, {
      start: 65281,
      length: 3,
      convRule: rule2
  }, {
      start: 65284,
      length: 1,
      convRule: rule3
  }, {
      start: 65285,
      length: 3,
      convRule: rule2
  }, {
      start: 65288,
      length: 1,
      convRule: rule4
  }, {
      start: 65289,
      length: 1,
      convRule: rule5
  }, {
      start: 65290,
      length: 1,
      convRule: rule2
  }, {
      start: 65291,
      length: 1,
      convRule: rule6
  }, {
      start: 65292,
      length: 1,
      convRule: rule2
  }, {
      start: 65293,
      length: 1,
      convRule: rule7
  }, {
      start: 65294,
      length: 2,
      convRule: rule2
  }, {
      start: 65296,
      length: 10,
      convRule: rule8
  }, {
      start: 65306,
      length: 2,
      convRule: rule2
  }, {
      start: 65308,
      length: 3,
      convRule: rule6
  }, {
      start: 65311,
      length: 2,
      convRule: rule2
  }, {
      start: 65313,
      length: 26,
      convRule: rule9
  }, {
      start: 65339,
      length: 1,
      convRule: rule4
  }, {
      start: 65340,
      length: 1,
      convRule: rule2
  }, {
      start: 65341,
      length: 1,
      convRule: rule5
  }, {
      start: 65342,
      length: 1,
      convRule: rule10
  }, {
      start: 65343,
      length: 1,
      convRule: rule11
  }, {
      start: 65344,
      length: 1,
      convRule: rule10
  }, {
      start: 65345,
      length: 26,
      convRule: rule12
  }, {
      start: 65371,
      length: 1,
      convRule: rule4
  }, {
      start: 65372,
      length: 1,
      convRule: rule6
  }, {
      start: 65373,
      length: 1,
      convRule: rule5
  }, {
      start: 65374,
      length: 1,
      convRule: rule6
  }, {
      start: 65375,
      length: 1,
      convRule: rule4
  }, {
      start: 65376,
      length: 1,
      convRule: rule5
  }, {
      start: 65377,
      length: 1,
      convRule: rule2
  }, {
      start: 65378,
      length: 1,
      convRule: rule4
  }, {
      start: 65379,
      length: 1,
      convRule: rule5
  }, {
      start: 65380,
      length: 2,
      convRule: rule2
  }, {
      start: 65382,
      length: 10,
      convRule: rule45
  }, {
      start: 65392,
      length: 1,
      convRule: rule83
  }, {
      start: 65393,
      length: 45,
      convRule: rule45
  }, {
      start: 65438,
      length: 2,
      convRule: rule83
  }, {
      start: 65440,
      length: 31,
      convRule: rule45
  }, {
      start: 65474,
      length: 6,
      convRule: rule45
  }, {
      start: 65482,
      length: 6,
      convRule: rule45
  }, {
      start: 65490,
      length: 6,
      convRule: rule45
  }, {
      start: 65498,
      length: 3,
      convRule: rule45
  }, {
      start: 65504,
      length: 2,
      convRule: rule3
  }, {
      start: 65506,
      length: 1,
      convRule: rule6
  }, {
      start: 65507,
      length: 1,
      convRule: rule10
  }, {
      start: 65508,
      length: 1,
      convRule: rule13
  }, {
      start: 65509,
      length: 2,
      convRule: rule3
  }, {
      start: 65512,
      length: 1,
      convRule: rule13
  }, {
      start: 65513,
      length: 4,
      convRule: rule6
  }, {
      start: 65517,
      length: 2,
      convRule: rule13
  }, {
      start: 65529,
      length: 3,
      convRule: rule16
  }, {
      start: 65532,
      length: 2,
      convRule: rule13
  }, {
      start: 65536,
      length: 12,
      convRule: rule45
  }, {
      start: 65549,
      length: 26,
      convRule: rule45
  }, {
      start: 65576,
      length: 19,
      convRule: rule45
  }, {
      start: 65596,
      length: 2,
      convRule: rule45
  }, {
      start: 65599,
      length: 15,
      convRule: rule45
  }, {
      start: 65616,
      length: 14,
      convRule: rule45
  }, {
      start: 65664,
      length: 123,
      convRule: rule45
  }, {
      start: 65792,
      length: 2,
      convRule: rule2
  }, {
      start: 65794,
      length: 1,
      convRule: rule13
  }, {
      start: 65799,
      length: 45,
      convRule: rule17
  }, {
      start: 65847,
      length: 9,
      convRule: rule13
  }, {
      start: 65856,
      length: 53,
      convRule: rule116
  }, {
      start: 65909,
      length: 4,
      convRule: rule17
  }, {
      start: 65913,
      length: 17,
      convRule: rule13
  }, {
      start: 65930,
      length: 1,
      convRule: rule17
  }, {
      start: 65936,
      length: 12,
      convRule: rule13
  }, {
      start: 66000,
      length: 45,
      convRule: rule13
  }, {
      start: 66045,
      length: 1,
      convRule: rule84
  }, {
      start: 66176,
      length: 29,
      convRule: rule45
  }, {
      start: 66208,
      length: 49,
      convRule: rule45
  }, {
      start: 66304,
      length: 31,
      convRule: rule45
  }, {
      start: 66336,
      length: 4,
      convRule: rule17
  }, {
      start: 66352,
      length: 17,
      convRule: rule45
  }, {
      start: 66369,
      length: 1,
      convRule: rule116
  }, {
      start: 66370,
      length: 8,
      convRule: rule45
  }, {
      start: 66378,
      length: 1,
      convRule: rule116
  }, {
      start: 66432,
      length: 30,
      convRule: rule45
  }, {
      start: 66463,
      length: 1,
      convRule: rule2
  }, {
      start: 66464,
      length: 36,
      convRule: rule45
  }, {
      start: 66504,
      length: 8,
      convRule: rule45
  }, {
      start: 66512,
      length: 1,
      convRule: rule2
  }, {
      start: 66513,
      length: 5,
      convRule: rule116
  }, {
      start: 66560,
      length: 40,
      convRule: rule165
  }, {
      start: 66600,
      length: 40,
      convRule: rule166
  }, {
      start: 66640,
      length: 78,
      convRule: rule45
  }, {
      start: 66720,
      length: 10,
      convRule: rule8
  }, {
      start: 67584,
      length: 6,
      convRule: rule45
  }, {
      start: 67592,
      length: 1,
      convRule: rule45
  }, {
      start: 67594,
      length: 44,
      convRule: rule45
  }, {
      start: 67639,
      length: 2,
      convRule: rule45
  }, {
      start: 67644,
      length: 1,
      convRule: rule45
  }, {
      start: 67647,
      length: 23,
      convRule: rule45
  }, {
      start: 67671,
      length: 1,
      convRule: rule2
  }, {
      start: 67672,
      length: 8,
      convRule: rule17
  }, {
      start: 67840,
      length: 22,
      convRule: rule45
  }, {
      start: 67862,
      length: 6,
      convRule: rule17
  }, {
      start: 67871,
      length: 1,
      convRule: rule2
  }, {
      start: 67872,
      length: 26,
      convRule: rule45
  }, {
      start: 67903,
      length: 1,
      convRule: rule2
  }, {
      start: 68096,
      length: 1,
      convRule: rule45
  }, {
      start: 68097,
      length: 3,
      convRule: rule84
  }, {
      start: 68101,
      length: 2,
      convRule: rule84
  }, {
      start: 68108,
      length: 4,
      convRule: rule84
  }, {
      start: 68112,
      length: 4,
      convRule: rule45
  }, {
      start: 68117,
      length: 3,
      convRule: rule45
  }, {
      start: 68121,
      length: 27,
      convRule: rule45
  }, {
      start: 68152,
      length: 3,
      convRule: rule84
  }, {
      start: 68159,
      length: 1,
      convRule: rule84
  }, {
      start: 68160,
      length: 8,
      convRule: rule17
  }, {
      start: 68176,
      length: 9,
      convRule: rule2
  }, {
      start: 68192,
      length: 29,
      convRule: rule45
  }, {
      start: 68221,
      length: 2,
      convRule: rule17
  }, {
      start: 68223,
      length: 1,
      convRule: rule2
  }, {
      start: 68352,
      length: 54,
      convRule: rule45
  }, {
      start: 68409,
      length: 7,
      convRule: rule2
  }, {
      start: 68416,
      length: 22,
      convRule: rule45
  }, {
      start: 68440,
      length: 8,
      convRule: rule17
  }, {
      start: 68448,
      length: 19,
      convRule: rule45
  }, {
      start: 68472,
      length: 8,
      convRule: rule17
  }, {
      start: 68608,
      length: 73,
      convRule: rule45
  }, {
      start: 69216,
      length: 31,
      convRule: rule17
  }, {
      start: 69632,
      length: 1,
      convRule: rule114
  }, {
      start: 69633,
      length: 1,
      convRule: rule84
  }, {
      start: 69634,
      length: 1,
      convRule: rule114
  }, {
      start: 69635,
      length: 53,
      convRule: rule45
  }, {
      start: 69688,
      length: 15,
      convRule: rule84
  }, {
      start: 69703,
      length: 7,
      convRule: rule2
  }, {
      start: 69714,
      length: 20,
      convRule: rule17
  }, {
      start: 69734,
      length: 10,
      convRule: rule8
  }, {
      start: 69760,
      length: 2,
      convRule: rule84
  }, {
      start: 69762,
      length: 1,
      convRule: rule114
  }, {
      start: 69763,
      length: 45,
      convRule: rule45
  }, {
      start: 69808,
      length: 3,
      convRule: rule114
  }, {
      start: 69811,
      length: 4,
      convRule: rule84
  }, {
      start: 69815,
      length: 2,
      convRule: rule114
  }, {
      start: 69817,
      length: 2,
      convRule: rule84
  }, {
      start: 69819,
      length: 2,
      convRule: rule2
  }, {
      start: 69821,
      length: 1,
      convRule: rule16
  }, {
      start: 69822,
      length: 4,
      convRule: rule2
  }, {
      start: 73728,
      length: 879,
      convRule: rule45
  }, {
      start: 74752,
      length: 99,
      convRule: rule116
  }, {
      start: 74864,
      length: 4,
      convRule: rule2
  }, {
      start: 77824,
      length: 1071,
      convRule: rule45
  }, {
      start: 92160,
      length: 569,
      convRule: rule45
  }, {
      start: 110592,
      length: 2,
      convRule: rule45
  }, {
      start: 118784,
      length: 246,
      convRule: rule13
  }, {
      start: 119040,
      length: 39,
      convRule: rule13
  }, {
      start: 119081,
      length: 60,
      convRule: rule13
  }, {
      start: 119141,
      length: 2,
      convRule: rule114
  }, {
      start: 119143,
      length: 3,
      convRule: rule84
  }, {
      start: 119146,
      length: 3,
      convRule: rule13
  }, {
      start: 119149,
      length: 6,
      convRule: rule114
  }, {
      start: 119155,
      length: 8,
      convRule: rule16
  }, {
      start: 119163,
      length: 8,
      convRule: rule84
  }, {
      start: 119171,
      length: 2,
      convRule: rule13
  }, {
      start: 119173,
      length: 7,
      convRule: rule84
  }, {
      start: 119180,
      length: 30,
      convRule: rule13
  }, {
      start: 119210,
      length: 4,
      convRule: rule84
  }, {
      start: 119214,
      length: 48,
      convRule: rule13
  }, {
      start: 119296,
      length: 66,
      convRule: rule13
  }, {
      start: 119362,
      length: 3,
      convRule: rule84
  }, {
      start: 119365,
      length: 1,
      convRule: rule13
  }, {
      start: 119552,
      length: 87,
      convRule: rule13
  }, {
      start: 119648,
      length: 18,
      convRule: rule17
  }, {
      start: 119808,
      length: 26,
      convRule: rule98
  }, {
      start: 119834,
      length: 26,
      convRule: rule14
  }, {
      start: 119860,
      length: 26,
      convRule: rule98
  }, {
      start: 119886,
      length: 7,
      convRule: rule14
  }, {
      start: 119894,
      length: 18,
      convRule: rule14
  }, {
      start: 119912,
      length: 26,
      convRule: rule98
  }, {
      start: 119938,
      length: 26,
      convRule: rule14
  }, {
      start: 119964,
      length: 1,
      convRule: rule98
  }, {
      start: 119966,
      length: 2,
      convRule: rule98
  }, {
      start: 119970,
      length: 1,
      convRule: rule98
  }, {
      start: 119973,
      length: 2,
      convRule: rule98
  }, {
      start: 119977,
      length: 4,
      convRule: rule98
  }, {
      start: 119982,
      length: 8,
      convRule: rule98
  }, {
      start: 119990,
      length: 4,
      convRule: rule14
  }, {
      start: 119995,
      length: 1,
      convRule: rule14
  }, {
      start: 119997,
      length: 7,
      convRule: rule14
  }, {
      start: 120005,
      length: 11,
      convRule: rule14
  }, {
      start: 120016,
      length: 26,
      convRule: rule98
  }, {
      start: 120042,
      length: 26,
      convRule: rule14
  }, {
      start: 120068,
      length: 2,
      convRule: rule98
  }, {
      start: 120071,
      length: 4,
      convRule: rule98
  }, {
      start: 120077,
      length: 8,
      convRule: rule98
  }, {
      start: 120086,
      length: 7,
      convRule: rule98
  }, {
      start: 120094,
      length: 26,
      convRule: rule14
  }, {
      start: 120120,
      length: 2,
      convRule: rule98
  }, {
      start: 120123,
      length: 4,
      convRule: rule98
  }, {
      start: 120128,
      length: 5,
      convRule: rule98
  }, {
      start: 120134,
      length: 1,
      convRule: rule98
  }, {
      start: 120138,
      length: 7,
      convRule: rule98
  }, {
      start: 120146,
      length: 26,
      convRule: rule14
  }, {
      start: 120172,
      length: 26,
      convRule: rule98
  }, {
      start: 120198,
      length: 26,
      convRule: rule14
  }, {
      start: 120224,
      length: 26,
      convRule: rule98
  }, {
      start: 120250,
      length: 26,
      convRule: rule14
  }, {
      start: 120276,
      length: 26,
      convRule: rule98
  }, {
      start: 120302,
      length: 26,
      convRule: rule14
  }, {
      start: 120328,
      length: 26,
      convRule: rule98
  }, {
      start: 120354,
      length: 26,
      convRule: rule14
  }, {
      start: 120380,
      length: 26,
      convRule: rule98
  }, {
      start: 120406,
      length: 26,
      convRule: rule14
  }, {
      start: 120432,
      length: 26,
      convRule: rule98
  }, {
      start: 120458,
      length: 28,
      convRule: rule14
  }, {
      start: 120488,
      length: 25,
      convRule: rule98
  }, {
      start: 120513,
      length: 1,
      convRule: rule6
  }, {
      start: 120514,
      length: 25,
      convRule: rule14
  }, {
      start: 120539,
      length: 1,
      convRule: rule6
  }, {
      start: 120540,
      length: 6,
      convRule: rule14
  }, {
      start: 120546,
      length: 25,
      convRule: rule98
  }, {
      start: 120571,
      length: 1,
      convRule: rule6
  }, {
      start: 120572,
      length: 25,
      convRule: rule14
  }, {
      start: 120597,
      length: 1,
      convRule: rule6
  }, {
      start: 120598,
      length: 6,
      convRule: rule14
  }, {
      start: 120604,
      length: 25,
      convRule: rule98
  }, {
      start: 120629,
      length: 1,
      convRule: rule6
  }, {
      start: 120630,
      length: 25,
      convRule: rule14
  }, {
      start: 120655,
      length: 1,
      convRule: rule6
  }, {
      start: 120656,
      length: 6,
      convRule: rule14
  }, {
      start: 120662,
      length: 25,
      convRule: rule98
  }, {
      start: 120687,
      length: 1,
      convRule: rule6
  }, {
      start: 120688,
      length: 25,
      convRule: rule14
  }, {
      start: 120713,
      length: 1,
      convRule: rule6
  }, {
      start: 120714,
      length: 6,
      convRule: rule14
  }, {
      start: 120720,
      length: 25,
      convRule: rule98
  }, {
      start: 120745,
      length: 1,
      convRule: rule6
  }, {
      start: 120746,
      length: 25,
      convRule: rule14
  }, {
      start: 120771,
      length: 1,
      convRule: rule6
  }, {
      start: 120772,
      length: 6,
      convRule: rule14
  }, {
      start: 120778,
      length: 1,
      convRule: rule98
  }, {
      start: 120779,
      length: 1,
      convRule: rule14
  }, {
      start: 120782,
      length: 50,
      convRule: rule8
  }, {
      start: 126976,
      length: 44,
      convRule: rule13
  }, {
      start: 127024,
      length: 100,
      convRule: rule13
  }, {
      start: 127136,
      length: 15,
      convRule: rule13
  }, {
      start: 127153,
      length: 14,
      convRule: rule13
  }, {
      start: 127169,
      length: 15,
      convRule: rule13
  }, {
      start: 127185,
      length: 15,
      convRule: rule13
  }, {
      start: 127232,
      length: 11,
      convRule: rule17
  }, {
      start: 127248,
      length: 31,
      convRule: rule13
  }, {
      start: 127280,
      length: 58,
      convRule: rule13
  }, {
      start: 127344,
      length: 43,
      convRule: rule13
  }, {
      start: 127462,
      length: 29,
      convRule: rule13
  }, {
      start: 127504,
      length: 43,
      convRule: rule13
  }, {
      start: 127552,
      length: 9,
      convRule: rule13
  }, {
      start: 127568,
      length: 2,
      convRule: rule13
  }, {
      start: 127744,
      length: 33,
      convRule: rule13
  }, {
      start: 127792,
      length: 6,
      convRule: rule13
  }, {
      start: 127799,
      length: 70,
      convRule: rule13
  }, {
      start: 127872,
      length: 20,
      convRule: rule13
  }, {
      start: 127904,
      length: 37,
      convRule: rule13
  }, {
      start: 127942,
      length: 5,
      convRule: rule13
  }, {
      start: 127968,
      length: 17,
      convRule: rule13
  }, {
      start: 128000,
      length: 63,
      convRule: rule13
  }, {
      start: 128064,
      length: 1,
      convRule: rule13
  }, {
      start: 128066,
      length: 182,
      convRule: rule13
  }, {
      start: 128249,
      length: 4,
      convRule: rule13
  }, {
      start: 128256,
      length: 62,
      convRule: rule13
  }, {
      start: 128336,
      length: 24,
      convRule: rule13
  }, {
      start: 128507,
      length: 5,
      convRule: rule13
  }, {
      start: 128513,
      length: 16,
      convRule: rule13
  }, {
      start: 128530,
      length: 3,
      convRule: rule13
  }, {
      start: 128534,
      length: 1,
      convRule: rule13
  }, {
      start: 128536,
      length: 1,
      convRule: rule13
  }, {
      start: 128538,
      length: 1,
      convRule: rule13
  }, {
      start: 128540,
      length: 3,
      convRule: rule13
  }, {
      start: 128544,
      length: 6,
      convRule: rule13
  }, {
      start: 128552,
      length: 4,
      convRule: rule13
  }, {
      start: 128557,
      length: 1,
      convRule: rule13
  }, {
      start: 128560,
      length: 4,
      convRule: rule13
  }, {
      start: 128565,
      length: 12,
      convRule: rule13
  }, {
      start: 128581,
      length: 11,
      convRule: rule13
  }, {
      start: 128640,
      length: 70,
      convRule: rule13
  }, {
      start: 128768,
      length: 116,
      convRule: rule13
  }, {
      start: 131072,
      length: 42711,
      convRule: rule45
  }, {
      start: 173824,
      length: 4149,
      convRule: rule45
  }, {
      start: 177984,
      length: 222,
      convRule: rule45
  }, {
      start: 194560,
      length: 542,
      convRule: rule45
  }, {
      start: 917505,
      length: 1,
      convRule: rule16
  }, {
      start: 917536,
      length: 96,
      convRule: rule16
  }, {
      start: 917760,
      length: 240,
      convRule: rule84
  }, {
      start: 983040,
      length: 65534,
      convRule: rule164
  }, {
      start: 1048576,
      length: 65534,
      convRule: rule164
  } ];
  var checkAttr = function (categories) {
      return function ($$char) {
          var numOfBlocks = (function () {
              var $28 = $$char < 256;
              if ($28) {
                  return numLat1Blocks;
              };
              return numBlocks;
          })();
          var maybeConversionRule = getRule(allchars)($$char)(numOfBlocks);
          if (maybeConversionRule instanceof Data_Maybe.Nothing) {
              return false;
          };
          if (maybeConversionRule instanceof Data_Maybe.Just) {
              return Data_Maybe.isJust(Data_Array.elemIndex(Data_Eq.eqInt)(maybeConversionRule.value0.category)(categories));
          };
          throw new Error("Failed pattern match at Data.Char.Unicode.Internal (line 4800, column 8 - line 4802, column 92): " + [ maybeConversionRule.constructor.name ]);
      };
  };
  var uIswalnum = checkAttr([ gencatLT, gencatLU, gencatLL, gencatLM, gencatLO, gencatMC, gencatME, gencatMN, gencatNO, gencatND, gencatNL ]);
  var uIswalpha = checkAttr([ gencatLL, gencatLU, gencatLT, gencatLM, gencatLO ]);                                                                                                                                                                                    
  var uIswupper = checkAttr([ gencatLU, gencatLT ]);
  exports["uIswupper"] = uIswupper;
  exports["uIswalpha"] = uIswalpha;
  exports["uIswalnum"] = uIswalnum;
  exports["uIswspace"] = uIswspace;
  exports["uTowupper"] = uTowupper;
  exports["uTowlower"] = uTowlower;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Data.Char.Unicode"] = $PS["Data.Char.Unicode"] || {};
  var exports = $PS["Data.Char.Unicode"];
  var $foreign = $PS["Data.Char.Unicode"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Char = $PS["Data.Char"];
  var Data_Char_Unicode_Internal = $PS["Data.Char.Unicode.Internal"];
  var Data_Maybe = $PS["Data.Maybe"];
  var toUpper = $foreign.withCharCode(Data_Char_Unicode_Internal.uTowupper);
  var toLower = $foreign.withCharCode(Data_Char_Unicode_Internal.uTowlower);
  var isUpper = function ($50) {
      return Data_Char_Unicode_Internal.uIswupper(Data_Char.toCharCode($50));
  };
  var isSpace = function (c) {
      var uc = Data_Char.toCharCode(c);
      var $14 = uc <= 823;
      if ($14) {
          return uc === 32 || (uc >= 9 && uc <= 13 || uc === 160);
      };
      return Data_Char_Unicode_Internal.uIswspace(Data_Char.toCharCode(c));
  };
  var isOctDigit = function (c) {
      var diff = Data_Char.toCharCode(c) - Data_Char.toCharCode("0") | 0;
      return diff <= 7 && diff >= 0;
  };
  var isDigit = function (c) {
      var diff = Data_Char.toCharCode(c) - Data_Char.toCharCode("0") | 0;
      return diff <= 9 && diff >= 0;
  };
  var isHexDigit = function (c) {
      return isDigit(c) || ((function () {
          var diff = Data_Char.toCharCode(c) - Data_Char.toCharCode("A") | 0;
          return diff <= 5 && diff >= 0;
      })() || (function () {
          var diff = Data_Char.toCharCode(c) - Data_Char.toCharCode("a") | 0;
          return diff <= 5 && diff >= 0;
      })());
  };
  var isAlphaNum = function ($54) {
      return Data_Char_Unicode_Internal.uIswalnum(Data_Char.toCharCode($54));
  };
  var isAlpha = function ($55) {
      return Data_Char_Unicode_Internal.uIswalpha(Data_Char.toCharCode($55));
  }; 
  var digitToInt = function (c) {
      var hexUpper = Data_Char.toCharCode(c) - Data_Char.toCharCode("A") | 0;
      var hexLower = Data_Char.toCharCode(c) - Data_Char.toCharCode("a") | 0;
      var dec = Data_Char.toCharCode(c) - Data_Char.toCharCode("0") | 0;
      var result = (function () {
          if (dec <= 9 && dec >= 0) {
              return new Data_Maybe.Just(dec);
          };
          if (hexLower <= 5 && hexLower >= 0) {
              return Data_Maybe.Just.create(hexLower + 10 | 0);
          };
          if (hexUpper <= 5 && hexUpper >= 0) {
              return Data_Maybe.Just.create(hexUpper + 10 | 0);
          };
          if (Data_Boolean.otherwise) {
              return Data_Maybe.Nothing.value;
          };
          throw new Error("Failed pattern match at Data.Char.Unicode (line 547, column 5 - line 547, column 24): " + [  ]);
      })();
      return result;
  };
  exports["isUpper"] = isUpper;
  exports["isAlpha"] = isAlpha;
  exports["isAlphaNum"] = isAlphaNum;
  exports["isDigit"] = isDigit;
  exports["isOctDigit"] = isOctDigit;
  exports["isHexDigit"] = isHexDigit;
  exports["isSpace"] = isSpace;
  exports["digitToInt"] = digitToInt;
  exports["toLower"] = toLower;
  exports["toUpper"] = toUpper;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Text.Parsing.Parser.Token"] = $PS["Text.Parsing.Parser.Token"] || {};
  var exports = $PS["Text.Parsing.Parser.Token"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Control_Lazy = $PS["Control.Lazy"];
  var Data_Array = $PS["Data.Array"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Char = $PS["Data.Char"];
  var Data_Char_Unicode = $PS["Data.Char.Unicode"];
  var Data_Either = $PS["Data.Either"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Int = $PS["Data.Int"];
  var Data_List = $PS["Data.List"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Data_Ring = $PS["Data.Ring"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Show = $PS["Data.Show"];
  var Data_String_CodeUnits = $PS["Data.String.CodeUnits"];
  var Data_String_Common = $PS["Data.String.Common"];
  var Data_Unfoldable = $PS["Data.Unfoldable"];
  var Data_Unit = $PS["Data.Unit"];
  var $$Math = $PS["Math"];
  var Text_Parsing_Parser = $PS["Text.Parsing.Parser"];
  var Text_Parsing_Parser_Combinators = $PS["Text.Parsing.Parser.Combinators"];
  var Text_Parsing_Parser_String = $PS["Text.Parsing.Parser.String"];
  var upper = function (dictMonad) {
      return Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(Text_Parsing_Parser_String.satisfy(Text_Parsing_Parser_String.stringLikeString)(dictMonad)(Data_Char_Unicode.isUpper))("uppercase letter");
  };
  var unGenLanguageDef = function (v) {
      return v;
  };
  var theReservedNames = function (dictMonad) {
      return function (v) {
          if (v.caseSensitive) {
              return Data_Array.sort(Data_Ord.ordString)(v.reservedNames);
          };
          if (Data_Boolean.otherwise) {
              return Data_Array.sort(Data_Ord.ordString)(Data_Functor.map(Data_Functor.functorArray)(Data_String_Common.toLower)(v.reservedNames));
          };
          throw new Error("Failed pattern match at Text.Parsing.Parser.Token (line 722, column 1 - line 722, column 82): " + [ v.constructor.name ]);
      };
  };
  var space = function (dictMonad) {
      return Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(Text_Parsing_Parser_String.satisfy(Text_Parsing_Parser_String.stringLikeString)(dictMonad)(Data_Char_Unicode.isSpace))("space");
  };
  var simpleSpace = function (dictMonad) {
      return Text_Parsing_Parser_Combinators.skipMany1(dictMonad)(Text_Parsing_Parser_String.satisfy(Text_Parsing_Parser_String.stringLikeString)(dictMonad)(Data_Char_Unicode.isSpace));
  };
  var oneLineComment = function (dictMonad) {
      return function (v) {
          return Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(dictMonad))(Text_Parsing_Parser_Combinators["try"](dictMonad)(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(dictMonad)(v.commentLine)))(Text_Parsing_Parser_Combinators.skipMany(dictMonad)(Text_Parsing_Parser_String.satisfy(Text_Parsing_Parser_String.stringLikeString)(dictMonad)(function (v1) {
              return v1 !== "\x0a";
          })));
      };
  };
  var octDigit = function (dictMonad) {
      return Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(Text_Parsing_Parser_String.satisfy(Text_Parsing_Parser_String.stringLikeString)(dictMonad)(Data_Char_Unicode.isOctDigit))("oct digit");
  };
  var letter = function (dictMonad) {
      return Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(Text_Parsing_Parser_String.satisfy(Text_Parsing_Parser_String.stringLikeString)(dictMonad)(Data_Char_Unicode.isAlpha))("letter");
  };
  var isReserved = function ($copy_names) {
      return function ($copy_name) {
          var $tco_var_names = $copy_names;
          var $tco_done = false;
          var $tco_result;
          function $tco_loop(names, name) {
              var v = Data_Array.uncons(names);
              if (v instanceof Data_Maybe.Nothing) {
                  $tco_done = true;
                  return false;
              };
              if (v instanceof Data_Maybe.Just) {
                  var v1 = Data_Ord.compare(Data_Ord.ordString)(v.value0.head)(name);
                  if (v1 instanceof Data_Ordering.LT) {
                      $tco_var_names = v.value0.tail;
                      $copy_name = name;
                      return;
                  };
                  if (v1 instanceof Data_Ordering.EQ) {
                      $tco_done = true;
                      return true;
                  };
                  if (v1 instanceof Data_Ordering.GT) {
                      $tco_done = true;
                      return false;
                  };
                  throw new Error("Failed pattern match at Text.Parsing.Parser.Token (line 717, column 39 - line 720, column 53): " + [ v1.constructor.name ]);
              };
              throw new Error("Failed pattern match at Text.Parsing.Parser.Token (line 715, column 5 - line 720, column 53): " + [ v.constructor.name ]);
          };
          while (!$tco_done) {
              $tco_result = $tco_loop($tco_var_names, $copy_name);
          };
          return $tco_result;
      };
  };
  var isReservedName = function (dictMonad) {
      return function (v) {
          return function (name) {
              var caseName = (function () {
                  if (v.caseSensitive) {
                      return name;
                  };
                  if (Data_Boolean.otherwise) {
                      return Data_String_Common.toLower(name);
                  };
                  throw new Error("Failed pattern match at Text.Parsing.Parser.Token (line 710, column 5 - line 711, column 57): " + [  ]);
              })();
              return isReserved(theReservedNames(dictMonad)(v))(caseName);
          };
      };
  };
  var inCommentSingle = function (dictMonad) {
      return function (v) {
          var startEnd = Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_String_CodeUnits.toCharArray(v.commentEnd))(Data_String_CodeUnits.toCharArray(v.commentStart));
          return Control_Lazy.fix(Text_Parsing_Parser.lazyParserT)(function (p) {
              return Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Data_Functor["void"](Text_Parsing_Parser.functorParserT(((dictMonad.Bind1()).Apply0()).Functor0()))(Text_Parsing_Parser_Combinators["try"](dictMonad)(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(dictMonad)(v.commentEnd))))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(dictMonad))(Text_Parsing_Parser_Combinators.skipMany1(dictMonad)(Text_Parsing_Parser_String.noneOf(Text_Parsing_Parser_String.stringLikeString)(dictMonad)(startEnd)))(p)))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(dictMonad))(Text_Parsing_Parser_String.oneOf(Text_Parsing_Parser_String.stringLikeString)(dictMonad)(startEnd))(p)))("end of comment");
          });
      };
  };
  var multiLineComment = function (dictMonad) {
      return function (v) {
          return Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(dictMonad))(Text_Parsing_Parser_Combinators["try"](dictMonad)(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(dictMonad)(v.commentStart)))(inComment(dictMonad)(v));
      };
  };
  var inCommentMulti = function (dictMonad) {
      return function (v) {
          var startEnd = Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_String_CodeUnits.toCharArray(v.commentEnd))(Data_String_CodeUnits.toCharArray(v.commentStart));
          return Control_Lazy.fix(Text_Parsing_Parser.lazyParserT)(function (p) {
              return Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Data_Functor["void"](Text_Parsing_Parser.functorParserT(((dictMonad.Bind1()).Apply0()).Functor0()))(Text_Parsing_Parser_Combinators["try"](dictMonad)(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(dictMonad)(v.commentEnd))))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(dictMonad))(multiLineComment(dictMonad)(v))(p)))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(dictMonad))(Text_Parsing_Parser_Combinators.skipMany1(dictMonad)(Text_Parsing_Parser_String.noneOf(Text_Parsing_Parser_String.stringLikeString)(dictMonad)(startEnd)))(p)))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(dictMonad))(Text_Parsing_Parser_String.oneOf(Text_Parsing_Parser_String.stringLikeString)(dictMonad)(startEnd))(p)))("end of comment");
          });
      };
  };
  var inComment = function (dictMonad) {
      return function (v) {
          if (v.nestedComments) {
              return inCommentMulti(dictMonad)(v);
          };
          return inCommentSingle(dictMonad)(v);
      };
  };
  var whiteSpace$prime = function (dictMonad) {
      return function (v) {
          if (Data_String_Common["null"](v.commentLine) && Data_String_Common["null"](v.commentStart)) {
              return Text_Parsing_Parser_Combinators.skipMany(dictMonad)(Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(simpleSpace(dictMonad))(""));
          };
          if (Data_String_Common["null"](v.commentLine)) {
              return Text_Parsing_Parser_Combinators.skipMany(dictMonad)(Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(simpleSpace(dictMonad))(multiLineComment(dictMonad)(v)))(""));
          };
          if (Data_String_Common["null"](v.commentStart)) {
              return Text_Parsing_Parser_Combinators.skipMany(dictMonad)(Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(simpleSpace(dictMonad))(oneLineComment(dictMonad)(v)))(""));
          };
          if (Data_Boolean.otherwise) {
              return Text_Parsing_Parser_Combinators.skipMany(dictMonad)(Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(simpleSpace(dictMonad))(oneLineComment(dictMonad)(v)))(multiLineComment(dictMonad)(v)))(""));
          };
          throw new Error("Failed pattern match at Text.Parsing.Parser.Token (line 731, column 1 - line 731, column 86): " + [ v.constructor.name ]);
      };
  };
  var hexDigit = function (dictMonad) {
      return Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(Text_Parsing_Parser_String.satisfy(Text_Parsing_Parser_String.stringLikeString)(dictMonad)(Data_Char_Unicode.isHexDigit))("hex digit");
  };
  var digit = function (dictMonad) {
      return Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(Text_Parsing_Parser_String.satisfy(Text_Parsing_Parser_String.stringLikeString)(dictMonad)(Data_Char_Unicode.isDigit))("digit");
  };
  var makeTokenParser = function (dictMonad) {
      return function (v) {
          var stringLetter = Text_Parsing_Parser_String.satisfy(Text_Parsing_Parser_String.stringLikeString)(dictMonad)(function (c) {
              return c !== "\"" && (c !== "\\" && c > "\x1a");
          });
          var sign = function (dictRing) {
              return Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Data_Functor.voidLeft(Text_Parsing_Parser.functorParserT(((dictMonad.Bind1()).Apply0()).Functor0()))(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(dictMonad)("-"))(Data_Ring.negate(dictRing)))(Data_Functor.voidLeft(Text_Parsing_Parser.functorParserT(((dictMonad.Bind1()).Apply0()).Functor0()))(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(dictMonad)("+"))(Control_Category.identity(Control_Category.categoryFn))))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(Control_Category.identity(Control_Category.categoryFn)));
          };
          var oper = (function () {
              var go = Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(v.opStart)(function (c) {
                  return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Data_Array.many(Text_Parsing_Parser.alternativeParserT(dictMonad))(Text_Parsing_Parser.lazyParserT)(v.opLetter))(function (cs) {
                      return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(Data_String_CodeUnits.singleton(c) + Data_String_CodeUnits.fromCharArray(cs));
                  });
              });
              return Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(go)("operator");
          })();
          var number = function (base) {
              return function (baseDigit) {
                  var folder = function (v1) {
                      return function (v2) {
                          if (v1 instanceof Data_Maybe.Nothing) {
                              return Data_Maybe.Nothing.value;
                          };
                          if (v1 instanceof Data_Maybe.Just) {
                              return Data_Functor.map(Data_Maybe.functorMaybe)(function (v3) {
                                  return (base * v1.value0 | 0) + v3 | 0;
                              })(Data_Char_Unicode.digitToInt(v2));
                          };
                          throw new Error("Failed pattern match at Text.Parsing.Parser.Token (line 600, column 9 - line 600, column 49): " + [ v1.constructor.name, v2.constructor.name ]);
                      };
                  };
                  return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Data_Array.some(Text_Parsing_Parser.alternativeParserT(dictMonad))(Text_Parsing_Parser.lazyParserT)(baseDigit))(function (digits) {
                      return Data_Maybe.maybe(Text_Parsing_Parser.fail(dictMonad)("not digits"))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad)))(Data_Foldable.foldl(Data_Foldable.foldableArray)(folder)(new Data_Maybe.Just(0))(digits));
                  });
              };
          };
          var octal = Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(dictMonad))(Text_Parsing_Parser_String.oneOf(Text_Parsing_Parser_String.stringLikeString)(dictMonad)([ "o", "O" ]))(number(8)(octDigit(dictMonad)));
          var lexeme = function (p) {
              return Control_Apply.applyFirst(Text_Parsing_Parser.applyParserT(dictMonad))(p)(whiteSpace$prime(dictMonad)(v));
          };
          var reservedOp = function (name) {
              var go = Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(dictMonad)(name))(function () {
                  return Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(Text_Parsing_Parser_Combinators.notFollowedBy(dictMonad)(v.opLetter))("end of " + name);
              });
              return lexeme(Text_Parsing_Parser_Combinators["try"](dictMonad)(go));
          };
          var symbol = function (name) {
              return Data_Functor.voidLeft(Text_Parsing_Parser.functorParserT(((dictMonad.Bind1()).Apply0()).Functor0()))(lexeme(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(dictMonad)(name)))(name);
          };
          var parens = function (p) {
              return Text_Parsing_Parser_Combinators.between(dictMonad)(symbol("("))(symbol(")"))(p);
          };
          var semi = symbol(";");
          var semiSep = function (p) {
              return Text_Parsing_Parser_Combinators.sepBy(dictMonad)(p)(semi);
          };
          var semiSep1 = function (p) {
              return Text_Parsing_Parser_Combinators.sepBy1(dictMonad)(p)(semi);
          };
          var isReservedOp = function (name) {
              return isReserved(Data_Array.sort(Data_Ord.ordString)(v.reservedOpNames))(name);
          };
          var operator = (function () {
              var go = Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(oper)(function (name) {
                  var $82 = isReservedOp(name);
                  if ($82) {
                      return Text_Parsing_Parser.fail(dictMonad)("reserved operator " + name);
                  };
                  return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(name);
              });
              return lexeme(Text_Parsing_Parser_Combinators["try"](dictMonad)(go));
          })();
          var ident = (function () {
              var go = Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(v.identStart)(function (c) {
                  return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Data_Array.many(Text_Parsing_Parser.alternativeParserT(dictMonad))(Text_Parsing_Parser.lazyParserT)(v.identLetter))(function (cs) {
                      return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(Data_String_CodeUnits.singleton(c) + Data_String_CodeUnits.fromCharArray(cs));
                  });
              });
              return Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(go)("identifier");
          })();
          var identifier = (function () {
              var go = Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(ident)(function (name) {
                  var $83 = isReservedName(dictMonad)(v)(name);
                  if ($83) {
                      return Text_Parsing_Parser.fail(dictMonad)("reserved word " + Data_Show.show(Data_Show.showString)(name));
                  };
                  return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(name);
              });
              return lexeme(Text_Parsing_Parser_Combinators["try"](dictMonad)(go));
          })();
          var hexadecimal = Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(dictMonad))(Text_Parsing_Parser_String.oneOf(Text_Parsing_Parser_String.stringLikeString)(dictMonad)([ "x", "X" ]))(number(16)(hexDigit(dictMonad)));
          var fraction = (function () {
              var op = function (v1) {
                  return function (v2) {
                      if (v2 instanceof Data_Maybe.Nothing) {
                          return Data_Maybe.Nothing.value;
                      };
                      if (v2 instanceof Data_Maybe.Just) {
                          return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Char_Unicode.digitToInt(v1))(function (int$prime) {
                              return Control_Applicative.pure(Data_Maybe.applicativeMaybe)((v2.value0 + Data_Int.toNumber(int$prime)) / 10.0);
                          });
                      };
                      throw new Error("Failed pattern match at Text.Parsing.Parser.Token (line 550, column 9 - line 550, column 51): " + [ v1.constructor.name, v2.constructor.name ]);
                  };
              };
              return Text_Parsing_Parser_Combinators.asErrorMessage(dictMonad)("fraction")(Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(dictMonad)("."))(function () {
                  return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(Data_Array.some(Text_Parsing_Parser.alternativeParserT(dictMonad))(Text_Parsing_Parser.lazyParserT)(digit(dictMonad)))("fraction"))(function (digits) {
                      return Data_Maybe.maybe(Text_Parsing_Parser.fail(dictMonad)("not digit"))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad)))(Data_Foldable.foldr(Data_Foldable.foldableArray)(op)(new Data_Maybe.Just(0.0))(digits));
                  });
              }));
          })();
          var escapeGap = Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(dictMonad))(Data_Array.some(Text_Parsing_Parser.alternativeParserT(dictMonad))(Text_Parsing_Parser.lazyParserT)(space(dictMonad)))(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(dictMonad)("\\")))("end of string gap");
          var escapeEmpty = Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(dictMonad)("&");
          var escMap = Data_Array.zip([ "a", "b", "f", "n", "r", "t", "v", "\\", "\"", "'" ])([ "\x07", "\x08", "\x0c", "\x0a", "\x0d", "\x09", "\x0b", "\\", "\"", "'" ]);
          var dot = symbol(".");
          var decimal = number(10)(digit(dictMonad));
          var exponent$prime = (function () {
              var power = function (e) {
                  if (e < 0) {
                      return 1.0 / power(-e | 0);
                  };
                  if (Data_Boolean.otherwise) {
                      return $$Math.pow(10.0)(Data_Int.toNumber(e));
                  };
                  throw new Error("Failed pattern match at Text.Parsing.Parser.Token (line 563, column 9 - line 563, column 31): " + [ e.constructor.name ]);
              };
              return Text_Parsing_Parser_Combinators.asErrorMessage(dictMonad)("exponent")(Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Text_Parsing_Parser_String.oneOf(Text_Parsing_Parser_String.stringLikeString)(dictMonad)([ "e", "E" ]))(function () {
                  return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(sign(Data_Ring.ringInt))(function (f) {
                      return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(decimal)("exponent"))(function (e) {
                          return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(power(f(e)));
                      });
                  });
              }));
          })();
          var fractExponent = function (n) {
              var justExponent = Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(exponent$prime)(function (expo) {
                  return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(Data_Int.toNumber(n) * expo);
              });
              var fractExponent$prime = Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(fraction)(function (fract) {
                  return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Text_Parsing_Parser_Combinators.option(dictMonad)(1.0)(exponent$prime))(function (expo) {
                      return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))((Data_Int.toNumber(n) + fract) * expo);
                  });
              });
              return Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(fractExponent$prime)(justExponent);
          };
          var fractFloat = function (n) {
              return Data_Functor.map(Text_Parsing_Parser.functorParserT(((dictMonad.Bind1()).Apply0()).Functor0()))(Data_Either.Right.create)(fractExponent(n));
          };
          var decimalFloat = Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(decimal)(function (n) {
              return Text_Parsing_Parser_Combinators.option(dictMonad)(new Data_Either.Left(n))(fractFloat(n));
          });
          var zeroNumFloat = Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Data_Functor.map(Text_Parsing_Parser.functorParserT(((dictMonad.Bind1()).Apply0()).Functor0()))(Data_Either.Left.create)(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(hexadecimal)(octal)))(decimalFloat))(fractFloat(0)))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(new Data_Either.Left(0)));
          var natFloat = Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(dictMonad))(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(dictMonad)("0"))(zeroNumFloat))(decimalFloat);
          var naturalOrFloat = Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(lexeme(natFloat))("number");
          var floating = Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(decimal)(fractExponent);
          var $$float = Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(lexeme(floating))("float");
          var zeroNumber = Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(dictMonad))(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(dictMonad)("0"))(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(hexadecimal)(octal))(decimal))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(0))))("");
          var nat = Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(zeroNumber)(decimal);
          var $$int = Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(lexeme(sign(Data_Ring.ringInt)))(function (f) {
              return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(nat)(function (n) {
                  return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(f(n));
              });
          });
          var integer = Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(lexeme($$int))("integer");
          var natural = Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(lexeme(nat))("natural");
          var comma = symbol(",");
          var commaSep = function (p) {
              return Text_Parsing_Parser_Combinators.sepBy(dictMonad)(p)(comma);
          };
          var commaSep1 = function (p) {
              return Text_Parsing_Parser_Combinators.sepBy1(dictMonad)(p)(comma);
          };
          var colon = symbol(":");
          var charNum = Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(decimal)(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(dictMonad))(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(dictMonad)("o"))(number(8)(octDigit(dictMonad)))))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(dictMonad))(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(dictMonad)("x"))(number(16)(hexDigit(dictMonad)))))(function (code) {
              var $88 = code > 1114111;
              if ($88) {
                  return Text_Parsing_Parser.fail(dictMonad)("invalid escape sequence");
              };
              var v1 = Data_Char.fromCharCode(code);
              if (v1 instanceof Data_Maybe.Just) {
                  return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(v1.value0);
              };
              if (v1 instanceof Data_Maybe.Nothing) {
                  return Text_Parsing_Parser.fail(dictMonad)("invalid character code (should not happen)");
              };
              throw new Error("Failed pattern match at Text.Parsing.Parser.Token (line 448, column 17 - line 450, column 81): " + [ v1.constructor.name ]);
          });
          var charLetter = Text_Parsing_Parser_String.satisfy(Text_Parsing_Parser_String.stringLikeString)(dictMonad)(function (c) {
              return c !== "'" && (c !== "\\" && c > "\x1a");
          });
          var charEsc = (function () {
              var parseEsc = function (v1) {
                  return Data_Functor.voidLeft(Text_Parsing_Parser.functorParserT(((dictMonad.Bind1()).Apply0()).Functor0()))(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(dictMonad)(v1.value0))(v1.value1);
              };
              return Text_Parsing_Parser_Combinators.choice(Data_Foldable.foldableArray)(dictMonad)(Data_Functor.map(Data_Functor.functorArray)(parseEsc)(escMap));
          })();
          var charControl = Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(dictMonad)("^"))(function () {
              return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(upper(dictMonad))(function (code) {
                  var v1 = Data_Char.fromCharCode((Data_Char.toCharCode(code) - Data_Char.toCharCode("A") | 0) + 1 | 0);
                  if (v1 instanceof Data_Maybe.Just) {
                      return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(v1.value0);
                  };
                  if (v1 instanceof Data_Maybe.Nothing) {
                      return Text_Parsing_Parser.fail(dictMonad)("invalid character code (should not happen)");
                  };
                  throw new Error("Failed pattern match at Text.Parsing.Parser.Token (line 437, column 9 - line 439, column 73): " + [ v1.constructor.name ]);
              });
          });
          var caseString = function (name) {
              if (v.caseSensitive) {
                  return Data_Functor.voidLeft(Text_Parsing_Parser.functorParserT(((dictMonad.Bind1()).Apply0()).Functor0()))(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(dictMonad)(name))(name);
              };
              if (Data_Boolean.otherwise) {
                  var msg = Data_Show.show(Data_Show.showString)(name);
                  var caseChar = function (c) {
                      if (Data_Char_Unicode.isAlpha(c)) {
                          return Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(dictMonad)(Data_Char_Unicode.toLower(c)))(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(dictMonad)(Data_Char_Unicode.toUpper(c)));
                      };
                      if (Data_Boolean.otherwise) {
                          return Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(dictMonad)(c);
                      };
                      throw new Error("Failed pattern match at Text.Parsing.Parser.Token (line 658, column 9 - line 658, column 50): " + [ c.constructor.name ]);
                  };
                  var walk = function (name$prime) {
                      var v1 = Data_String_CodeUnits.uncons(name$prime);
                      if (v1 instanceof Data_Maybe.Nothing) {
                          return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(Data_Unit.unit);
                      };
                      if (v1 instanceof Data_Maybe.Just) {
                          return Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(dictMonad))(Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(caseChar(v1.value0.head))(msg))(walk(v1.value0.tail));
                      };
                      throw new Error("Failed pattern match at Text.Parsing.Parser.Token (line 654, column 22 - line 656, column 86): " + [ v1.constructor.name ]);
                  };
                  return Data_Functor.voidLeft(Text_Parsing_Parser.functorParserT(((dictMonad.Bind1()).Apply0()).Functor0()))(walk(name))(name);
              };
              throw new Error("Failed pattern match at Text.Parsing.Parser.Token (line 649, column 5 - line 649, column 52): " + [ name.constructor.name ]);
          };
          var reserved = function (name) {
              var go = Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(dictMonad))(caseString(name))(Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(Text_Parsing_Parser_Combinators.notFollowedBy(dictMonad)(v.identLetter))("end of " + name));
              return lexeme(Text_Parsing_Parser_Combinators["try"](dictMonad)(go));
          };
          var brackets = function (p) {
              return Text_Parsing_Parser_Combinators.between(dictMonad)(symbol("["))(symbol("]"))(p);
          };
          var braces = function (p) {
              return Text_Parsing_Parser_Combinators.between(dictMonad)(symbol("{"))(symbol("}"))(p);
          };
          var ascii3codes = [ "NUL", "SOH", "STX", "ETX", "EOT", "ENQ", "ACK", "BEL", "DLE", "DC1", "DC2", "DC3", "DC4", "NAK", "SYN", "ETB", "CAN", "SUB", "ESC", "DEL" ];
          var ascii3 = [ "\x00", "\x01", "\x02", "\x03", "\x04", "\x05", "\x06", "\x07", "\x10", "\x11", "\x12", "\x13", "\x14", "\x15", "\x16", "\x17", "\x18", "\x1a", "\x1b", "\x7f" ];
          var ascii2codes = [ "BS", "HT", "LF", "VT", "FF", "CR", "SO", "SI", "EM", "FS", "GS", "RS", "US", "SP" ];
          var ascii2 = [ "\x08", "\x09", "\x0a", "\x0b", "\x0c", "\x0d", "\x0e", "\x0f", "\x19", "\x1c", "\x1d", "\x1e", "\x1f", " " ];
          var asciiMap = Data_Array.zip(Data_Semigroup.append(Data_Semigroup.semigroupArray)(ascii3codes)(ascii2codes))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(ascii3)(ascii2));
          var charAscii = (function () {
              var parseAscii = function (v1) {
                  return Text_Parsing_Parser_Combinators["try"](dictMonad)(Data_Functor.voidLeft(Text_Parsing_Parser.functorParserT(((dictMonad.Bind1()).Apply0()).Functor0()))(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(dictMonad)(v1.value0))(v1.value1));
              };
              return Text_Parsing_Parser_Combinators.choice(Data_Foldable.foldableArray)(dictMonad)(Data_Functor.map(Data_Functor.functorArray)(parseAscii)(asciiMap));
          })();
          var escapeCode = Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(charEsc)(charNum))(charAscii))(charControl))("escape code");
          var charEscape = Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(dictMonad))(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(dictMonad)("\\"))(escapeCode);
          var characterChar = Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(charLetter)(charEscape))("literal character");
          var charLiteral = (function () {
              var go = Text_Parsing_Parser_Combinators.between(dictMonad)(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(dictMonad)("'"))(Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(dictMonad)("'"))("end of character"))(characterChar);
              return Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(lexeme(go))("character");
          })();
          var stringEscape = Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(dictMonad)("\\"))(function () {
              return Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Data_Functor.voidLeft(Text_Parsing_Parser.functorParserT(((dictMonad.Bind1()).Apply0()).Functor0()))(escapeGap)(Data_Maybe.Nothing.value))(Data_Functor.voidLeft(Text_Parsing_Parser.functorParserT(((dictMonad.Bind1()).Apply0()).Functor0()))(escapeEmpty)(Data_Maybe.Nothing.value)))(Data_Functor.map(Text_Parsing_Parser.functorParserT(((dictMonad.Bind1()).Apply0()).Functor0()))(Data_Maybe.Just.create)(escapeCode));
          });
          var stringChar = Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Data_Functor.map(Text_Parsing_Parser.functorParserT(((dictMonad.Bind1()).Apply0()).Functor0()))(Data_Maybe.Just.create)(stringLetter))(stringEscape))("string character");
          var stringLiteral = (function () {
              var folder = function (v1) {
                  return function (chars) {
                      if (v1 instanceof Data_Maybe.Nothing) {
                          return chars;
                      };
                      if (v1 instanceof Data_Maybe.Just) {
                          return new Data_List_Types.Cons(v1.value0, chars);
                      };
                      throw new Error("Failed pattern match at Text.Parsing.Parser.Token (line 404, column 9 - line 404, column 55): " + [ v1.constructor.name, chars.constructor.name ]);
                  };
              };
              var go = Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Text_Parsing_Parser_Combinators.between(dictMonad)(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(dictMonad)("\""))(Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(dictMonad)("\""))("end of string"))(Data_List.many(Text_Parsing_Parser.alternativeParserT(dictMonad))(Text_Parsing_Parser.lazyParserT)(stringChar)))(function (maybeChars) {
                  return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(Data_String_CodeUnits.fromCharArray(Data_List.toUnfoldable(Data_Unfoldable.unfoldableArray)(Data_Foldable.foldr(Data_List_Types.foldableList)(folder)(Data_List_Types.Nil.value)(maybeChars))));
              });
              return lexeme(Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(go)("literal string"));
          })();
          var angles = function (p) {
              return Text_Parsing_Parser_Combinators.between(dictMonad)(symbol("<"))(symbol(">"))(p);
          };
          return {
              identifier: identifier,
              reserved: reserved,
              operator: operator,
              reservedOp: reservedOp,
              charLiteral: charLiteral,
              stringLiteral: stringLiteral,
              natural: natural,
              integer: integer,
              "float": $$float,
              naturalOrFloat: naturalOrFloat,
              decimal: decimal,
              hexadecimal: hexadecimal,
              octal: octal,
              symbol: symbol,
              lexeme: lexeme,
              whiteSpace: whiteSpace$prime(dictMonad)(v),
              parens: parens,
              braces: braces,
              angles: angles,
              brackets: brackets,
              semi: semi,
              comma: comma,
              colon: colon,
              dot: dot,
              semiSep: semiSep,
              semiSep1: semiSep1,
              commaSep: commaSep,
              commaSep1: commaSep1
          };
      };
  };
  var alphaNum = function (dictMonad) {
      return Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(Text_Parsing_Parser_String.satisfy(Text_Parsing_Parser_String.stringLikeString)(dictMonad)(Data_Char_Unicode.isAlphaNum))("letter or digit");
  };
  exports["unGenLanguageDef"] = unGenLanguageDef;
  exports["makeTokenParser"] = makeTokenParser;
  exports["letter"] = letter;
  exports["alphaNum"] = alphaNum;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Text.Parsing.Parser.Language"] = $PS["Text.Parsing.Parser.Language"] || {};
  var exports = $PS["Text.Parsing.Parser.Language"];
  var Control_Alt = $PS["Control.Alt"];
  var Data_Identity = $PS["Data.Identity"];
  var Text_Parsing_Parser = $PS["Text.Parsing.Parser"];
  var Text_Parsing_Parser_String = $PS["Text.Parsing.Parser.String"];
  var Text_Parsing_Parser_Token = $PS["Text.Parsing.Parser.Token"];                
  var emptyDef = (function () {
      var op$prime = function (dictMonad) {
          return Text_Parsing_Parser_String.oneOf(Text_Parsing_Parser_String.stringLikeString)(dictMonad)([ ":", "!", "#", "$", "%", "&", "*", "+", ".", "/", "<", "=", ">", "?", "@", "\\", "^", "|", "-", "~" ]);
      };
      return {
          commentStart: "",
          commentEnd: "",
          commentLine: "",
          nestedComments: true,
          identStart: Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Token.letter(Data_Identity.monadIdentity))(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)("_")),
          identLetter: Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Token.alphaNum(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.oneOf(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)([ "_", "'" ])),
          opStart: op$prime(Data_Identity.monadIdentity),
          opLetter: op$prime(Data_Identity.monadIdentity),
          reservedOpNames: [  ],
          reservedNames: [  ],
          caseSensitive: true
      };
  })();
  exports["emptyDef"] = emptyDef;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["BotScriptParser"] = $PS["BotScriptParser"] || {};
  var exports = $PS["BotScriptParser"];
  var BotScript = $PS["BotScript"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Lazy = $PS["Control.Lazy"];
  var Data_Array = $PS["Data.Array"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Identity = $PS["Data.Identity"];
  var Data_Int = $PS["Data.Int"];
  var Data_List = $PS["Data.List"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Text_Parsing_Parser = $PS["Text.Parsing.Parser"];
  var Text_Parsing_Parser_Combinators = $PS["Text.Parsing.Parser.Combinators"];
  var Text_Parsing_Parser_Expr = $PS["Text.Parsing.Parser.Expr"];
  var Text_Parsing_Parser_Language = $PS["Text.Parsing.Parser.Language"];
  var Text_Parsing_Parser_String = $PS["Text.Parsing.Parser.String"];
  var Text_Parsing_Parser_Token = $PS["Text.Parsing.Parser.Token"];                
  var parse = function (p) {
      return function (str) {
          return Text_Parsing_Parser.runParser(str)(p);
      };
  };
  var expr$primeaction = [ "title", "descr", "print", "order" ];
  var event$primetypes = [ "join", "left", "play", "over", "milk", "talk", "priv" ];
  var customStyle = (function () {
      var v = Text_Parsing_Parser_Token.unGenLanguageDef(Text_Parsing_Parser_Language.emptyDef);
      return {
          commentStart: "/*",
          commentEnd: "*/",
          commentLine: "//",
          nestedComments: true,
          identStart: Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Token.letter(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.oneOf(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)([ "_", "$" ])),
          identLetter: Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Token.alphaNum(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.oneOf(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)([ "_", "$" ])),
          opStart: v.opStart,
          opLetter: v.opLetter,
          reservedNames: [ "state", "true", "false", "event", "delay", "going", "title", "descr", "print", "order" ],
          reservedOpNames: [ ":", "," ],
          caseSensitive: false
      };
  })();
  var tokParser = Text_Parsing_Parser_Token.makeTokenParser(Data_Identity.monadIdentity)(customStyle);
  var whiteSpace = tokParser.whiteSpace;
  var parens = function (p) {
      return Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(whiteSpace)(tokParser.parens(p));
  };
  var parseIdentifier = Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(whiteSpace)(tokParser.identifier);
  var parseNumber = Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(whiteSpace)(Text_Parsing_Parser_Combinators["try"](Data_Identity.monadIdentity)(tokParser["float"])))(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_Int.toNumber)(tokParser.integer));
  var parseStringLiteral = Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(whiteSpace)(tokParser.stringLiteral);
  var reserved = function (xs) {
      return Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(whiteSpace)(tokParser.reserved(xs));
  };
  var parseBoolean = Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(whiteSpace)(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(reserved("true"))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(true))))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(reserved("false"))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(false)));
  var parsePattern = Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(parseIdentifier)(function ($$var) {
      return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Combinators.optionMaybe(Data_Identity.monadIdentity)(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(reserved(":"))(parseStringLiteral)))(function (maybe) {
          if (maybe instanceof Data_Maybe.Just) {
              return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(new Data_Tuple.Tuple($$var, maybe.value0));
          };
          if (maybe instanceof Data_Maybe.Nothing) {
              return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(new Data_Tuple.Tuple($$var, ""));
          };
          throw new Error("Failed pattern match at BotScriptParser (line 92, column 5 - line 94, column 37): " + [ maybe.constructor.name ]);
      });
  });
  var parseRules = Control_Lazy.fix(Text_Parsing_Parser.lazyParserT)(function (self) {
      return parens(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_Array.fromFoldable(Data_List_Types.foldableList))(Text_Parsing_Parser_Combinators.sepBy(Data_Identity.monadIdentity)(parsePattern)(reserved(","))));
  });
  var symbol = function (xs) {
      return Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(whiteSpace)(tokParser.symbol(xs));
  };
  var parseEtype = Text_Parsing_Parser_Combinators.choice(Data_Foldable.foldableArray)(Data_Identity.monadIdentity)(Data_Functor.map(Data_Functor.functorArray)(function (n) {
      return symbol(n);
  })(event$primetypes));
  var brackets = function (p) {
      return Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(whiteSpace)(tokParser.brackets(p));
  };
  var braces = function (p) {
      return Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(whiteSpace)(tokParser.braces(p));
  };
  var bin$primeop$primetab = [ [ new Text_Parsing_Parser_Expr.Prefix(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(BotScript.Una.create)(symbol("-"))) ], [ new Text_Parsing_Parser_Expr.Prefix(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(BotScript.Una.create)(symbol("!"))) ], [ new Text_Parsing_Parser_Expr.Infix(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(BotScript.Bin.create)(symbol("<")), Text_Parsing_Parser_Expr.AssocLeft.value) ], [ new Text_Parsing_Parser_Expr.Infix(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(BotScript.Bin.create)(symbol("<=")), Text_Parsing_Parser_Expr.AssocLeft.value) ], [ new Text_Parsing_Parser_Expr.Infix(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(BotScript.Bin.create)(symbol(">")), Text_Parsing_Parser_Expr.AssocLeft.value) ], [ new Text_Parsing_Parser_Expr.Infix(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(BotScript.Bin.create)(symbol(">=")), Text_Parsing_Parser_Expr.AssocLeft.value) ], [ new Text_Parsing_Parser_Expr.Infix(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(BotScript.Bin.create)(symbol("in")), Text_Parsing_Parser_Expr.AssocLeft.value) ], [ new Text_Parsing_Parser_Expr.Infix(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(BotScript.Bin.create)(symbol("==")), Text_Parsing_Parser_Expr.AssocLeft.value) ], [ new Text_Parsing_Parser_Expr.Infix(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(BotScript.Bin.create)(symbol("!=")), Text_Parsing_Parser_Expr.AssocLeft.value) ], [ new Text_Parsing_Parser_Expr.Infix(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(BotScript.Bin.create)(symbol("===")), Text_Parsing_Parser_Expr.AssocLeft.value) ], [ new Text_Parsing_Parser_Expr.Infix(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(BotScript.Bin.create)(symbol("!==")), Text_Parsing_Parser_Expr.AssocLeft.value) ], [ new Text_Parsing_Parser_Expr.Infix(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(BotScript.Bin.create)(symbol("/")), Text_Parsing_Parser_Expr.AssocLeft.value) ], [ new Text_Parsing_Parser_Expr.Infix(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(BotScript.Bin.create)(symbol("*")), Text_Parsing_Parser_Expr.AssocLeft.value) ], [ new Text_Parsing_Parser_Expr.Infix(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(BotScript.Bin.create)(symbol("-")), Text_Parsing_Parser_Expr.AssocLeft.value) ], [ new Text_Parsing_Parser_Expr.Infix(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(BotScript.Bin.create)(symbol("+")), Text_Parsing_Parser_Expr.AssocLeft.value) ], [ new Text_Parsing_Parser_Expr.Infix(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(BotScript.Bin.create)(symbol("&&")), Text_Parsing_Parser_Expr.AssocRight.value) ], [ new Text_Parsing_Parser_Expr.Infix(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(BotScript.Bin.create)(symbol("||")), Text_Parsing_Parser_Expr.AssocRight.value) ] ];
  var parseVar = Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(parseIdentifier)(function (name) {
      return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Data_Array.many(Text_Parsing_Parser.alternativeParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser.lazyParserT)(brackets(parseExpr)))(function (subs) {
          return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(new BotScript.Var(name, subs));
      });
  });
  var parseTerm = function (p) {
      return Text_Parsing_Parser_Combinators.choice(Data_Foldable.foldableArray)(Data_Identity.monadIdentity)([ parseArray, Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(BotScript.Str.create)(parseStringLiteral), Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(BotScript.Num.create)(parseNumber), Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(BotScript.Tfv.create)(parseBoolean), Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(BotScript.Ref.create)(parseVar), parens(p) ]);
  };
  var parseExpr = Control_Lazy.fix(Text_Parsing_Parser.lazyParserT)(function (self) {
      return Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(whiteSpace)(Text_Parsing_Parser_Expr.buildExprParser(Data_Identity.monadIdentity)(bin$primeop$primetab)(parseTerm(self))))(Text_Parsing_Parser.fail(Data_Identity.monadIdentity)("Expected Expression"));
  });
  var parseArray = Control_Lazy.fix(Text_Parsing_Parser.lazyParserT)(function (self) {
      return brackets(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))((function () {
          var $21 = Data_Array.fromFoldable(Data_List_Types.foldableList);
          return function ($22) {
              return BotScript.Arr.create($21($22));
          };
      })())(Text_Parsing_Parser_Combinators.sepBy(Data_Identity.monadIdentity)(parseExpr)(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)(","))));
  });
  var parseArgument = Control_Lazy.fix(Text_Parsing_Parser.lazyParserT)(function (self) {
      return Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(parens(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_Array.fromFoldable(Data_List_Types.foldableList))(Text_Parsing_Parser_Combinators.sepBy(Data_Identity.monadIdentity)(parseExpr)(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)(",")))))(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_Function.flip(Data_Array.cons)([  ]))(parseExpr));
  });
  var testBind = Text_Parsing_Parser_Combinators["try"](Data_Identity.monadIdentity)(Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(parseVar)(function ($$var) {
      return Control_Bind.discard(Control_Bind.discardUnit)(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(whiteSpace)(function () {
          return Control_Bind.discard(Control_Bind.discardUnit)(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(reserved("="))(function () {
              return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))($$var);
          });
      });
  }));
  var parseBinding = Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(testBind)(function ($$var) {
      return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(parseExpr)(Text_Parsing_Parser.fail(Data_Identity.monadIdentity)("Expected Binding Expression")))(function (expr) {
          return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(new BotScript.Renew($$var, expr));
      });
  });
  var parseAction = Control_Lazy.fix(Text_Parsing_Parser.lazyParserT)(function (self) {
      return Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Combinators.choice(Data_Foldable.foldableArray)(Data_Identity.monadIdentity)(Data_Functor.map(Data_Functor.functorArray)(function (n) {
          return Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(BotScript.Invok.create(n))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(reserved(n))(parseArgument));
      })(expr$primeaction)))(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(BotScript.Delay.create)(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(reserved("delay"))(parseExpr))))(Control_Bind.discard(Control_Bind.discardUnit)(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(reserved("invok"))(function () {
          return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(parseIdentifier)(function (name) {
              return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(parseArgument)(function (args) {
                  return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(new BotScript.Invok(name, args));
              });
          });
      })))(Control_Bind.discard(Control_Bind.discardUnit)(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(reserved("event"))(function () {
          return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(parseEtype)(function (name) {
              return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(parseRules)(function (rules) {
                  return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(parseAction)(function (action) {
                      return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(new BotScript.Event(name, rules, action));
                  });
              });
          });
      })))(braces(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(BotScript.Group.create)(Data_List.many(Text_Parsing_Parser.alternativeParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser.lazyParserT)(self)))))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(reserved("going"))(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(BotScript.Going.create)(parseIdentifier))))(parseBinding);
  });
  var parseState = Control_Bind.discard(Control_Bind.discardUnit)(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(reserved("state"))(function () {
      return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(parseIdentifier)(Text_Parsing_Parser.fail(Data_Identity.monadIdentity)("Expected State Name")))(function (name) {
          return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(parseAction)(function (action) {
              return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(new BotScript.BotState(name, action));
          });
      });
  });
  var testParseStates = Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Data_Array.some(Text_Parsing_Parser.alternativeParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser.lazyParserT)(parseState))(function (states) {
      return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(new Data_Tuple.Tuple(true, states));
  }))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(new Data_Tuple.Tuple(false, [  ])));
  var testParseActions = Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Data_Array.some(Text_Parsing_Parser.alternativeParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser.lazyParserT)(parseAction))(function (actions) {
      return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(new Data_Tuple.Tuple(true, actions));
  }))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(new Data_Tuple.Tuple(false, [  ])));
  var parseScript$prime = Control_Bind.discard(Control_Bind.discardUnit)(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(whiteSpace)(function () {
      return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(testParseStates)(function (v) {
          return Control_Bind.discard(Control_Bind.discardUnit)(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(whiteSpace)(function () {
              return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(testParseActions)(function (v1) {
                  var $13 = v.value0 || v1.value0;
                  if ($13) {
                      return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(new Data_Tuple.Tuple(v.value1, v1.value1));
                  };
                  return Text_Parsing_Parser.fail(Data_Identity.monadIdentity)("Expected State or Action");
              });
          });
      });
  });
  var parseScript = Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Data_Array.some(Text_Parsing_Parser.alternativeParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser.lazyParserT)(parseScript$prime))(function (xs) {
      return Control_Bind.discard(Control_Bind.discardUnit)(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.eof(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity))(function () {
          return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))((function () {
              var v = Data_Array.unzip(xs);
              return new BotScript.BotScript(Data_List.fromFoldable(Data_Foldable.foldableArray)(Data_Array.concat(v.value1)), Data_Array.concat(v.value0));
          })());
      });
  });
  exports["parseScript"] = parseScript;
  exports["parse"] = parse;
})(PS);
(function(exports) {
  exports.evalBin = toExpr => op => lval => rval => {
    [lval, rval] = [lval, rval].map((x)=>x['value0']);
    if(op == "/")
      return toExpr(lval / rval);
    else if(op == '*')
      return toExpr(lval * rval);
    else if(op == '+')
      return toExpr(lval + rval);
    else if(op == '-')
      return toExpr(lval - rval);
    else if(op == '>')
      return toExpr(lval > rval);
    else if(op == '>=')
      return toExpr(lval >= rval);
    else if(op == '<')
      return toExpr(lval < rval);
    else if(op == '<=')
      return toExpr(lval <= rval);
    else if(op == '==')
      return toExpr(lval == rval);
    else if(op == '!=')
      return toExpr(lval != rval);
    else if(op == '===')
      return toExpr(lval === rval);
    else if(op == '!==')
      return toExpr(lval !== rval);
    else if(op == '&&')
      return toExpr(lval && rval);
    else if(op == '||')
      return toExpr(lval || rval);
  }

  exports.evalUna = toExpr => op => val => {
    val = val['value0'];
    if(op == "!")
      return toExpr(!val);
    else if(op == '-')
      return toExpr(-val);
  }
})(PS["BotScriptVM"] = PS["BotScriptVM"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Control.Monad.Rec.Class"] = $PS["Control.Monad.Rec.Class"] || {};
  var exports = $PS["Control.Monad.Rec.Class"];      
  var Loop = (function () {
      function Loop(value0) {
          this.value0 = value0;
      };
      Loop.create = function (value0) {
          return new Loop(value0);
      };
      return Loop;
  })();
  var Done = (function () {
      function Done(value0) {
          this.value0 = value0;
      };
      Done.create = function (value0) {
          return new Done(value0);
      };
      return Done;
  })();
  var MonadRec = function (Monad0, tailRecM) {
      this.Monad0 = Monad0;
      this.tailRecM = tailRecM;
  };
  var tailRecM = function (dict) {
      return dict.tailRecM;
  };
  exports["Loop"] = Loop;
  exports["Done"] = Done;
  exports["MonadRec"] = MonadRec;
  exports["tailRecM"] = tailRecM;
})(PS);
(function(exports) {
  exports.invok = sym => args => () => {
    //builtins_test[sym].apply(null, args.map((x)=>x['value0']))
    if(builtins[sym])
      builtins[sym].apply(null, args.map((x)=>x['value0']))
    else
      external[sym].apply(null, args.map((x)=>x['value0']))
    console.log(`Invok ${sym} ${JSON.stringify(args.map((x)=>x['value0']))}`);
  }               
  exports.events = {}

  function padArray(array, length, fill){
    return length > array.length ?
      array.concat(Array(length - array.length).fill(fill)):
      array;
  }

  exports.listen = state => type => args => next => () => {
    //builtins[sym].apply(null, args.map((x)=>x['value0']))
    exports.events[state] = exports.events[state] || [];

    [user_regex, cont_regex] = padArray(args);

    exports.events[state].push([
      type, user_regex, cont_regex, next
    ])

    console.log(`Event ${type} ${JSON.stringify(args)}`);
  }

  function event_action(event, config, req){
    var rule = exports.events[""] || []

    if(exports.cur.length)
      rule = rule.concat(exports.events[exports.cur] || [])

    rules.map(([type, user_trip_regex, cont_regex, action])=> {
      if(((Array.isArray(type) && type.includes(event)) || type == event)
        && match_user(req.user, req.trip, user_trip_regex)
        && ((req.text === 'unknown' || req.text === undefined)
            || req.text.match(new RegExp(cont_regex)))){
          action([req.user, req.text]);
          //argfmt(arglist, req.user, req.text, req.url, (args)=>{
          //  return actions[action].apply(config, args);
          //});
      }
    });
  }

  builtins = {
    'title': function(msg){
      sendTab({ fn: publish_message, args: { msg: msg} });
    },
    'descr': function(msg){
      sendTab({ fn: publish_message, args: { msg: msg} });
    },
    'print': function(msg){
      sendTab({ fn: publish_message, args: { msg: msg} });
    },
    'order': function(keyword, p1, p2){
      var idx = undefined, source = undefined;
      if(p1){ if(p1 in api) source = p1; else idx = p1; }
      if(p2){ if(p2 in api) source = p2; else idx = p2; }
      console.log(`play music[${source}][${idx}]: ${keyword}`);
      setTimeout(()=> play_search(
        get_music.bind(null, keyword, source),
        (msg) => sendTab({
          fn: publish_message,
          args: { msg: msg }
        }), idx
      ), 1000);
    }
  }

  builtins_test = {
    'title': function(msg){
      console.log(`title ${msg}`);
    },
    'descr': function(msg){
      console.log(`descr ${msg}`);
    },
    'print': function(msg){
      console.log(`print ${msg}`);
    },
    'order': function(keyword, p1, p2){
      console.log(`order ${keyword} ${p1} ${p2}`);
    }
  }
})(PS["DrrrBot"] = PS["DrrrBot"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["DrrrBot"] = $PS["DrrrBot"] || {};
  var exports = $PS["DrrrBot"];
  var $foreign = $PS["DrrrBot"];
  exports["invok"] = $foreign.invok;
  exports["listen"] = $foreign.listen;
})(PS);
(function(exports) {
  "use strict";

  exports.pureE = function (a) {
    return function () {
      return a;
    };
  };

  exports.bindE = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };
})(PS["Effect"] = PS["Effect"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Effect"] = $PS["Effect"] || {};
  var exports = $PS["Effect"];
  var $foreign = $PS["Effect"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Data_Functor = $PS["Data.Functor"];                    
  var monadEffect = new Control_Monad.Monad(function () {
      return applicativeEffect;
  }, function () {
      return bindEffect;
  });
  var bindEffect = new Control_Bind.Bind(function () {
      return applyEffect;
  }, $foreign.bindE);
  var applyEffect = new Control_Apply.Apply(function () {
      return functorEffect;
  }, Control_Monad.ap(monadEffect));
  var applicativeEffect = new Control_Applicative.Applicative(function () {
      return applyEffect;
  }, $foreign.pureE);
  var functorEffect = new Data_Functor.Functor(Control_Applicative.liftA1(applicativeEffect));
  exports["functorEffect"] = functorEffect;
})(PS);
(function(exports) {
  /* globals setImmediate, clearImmediate, setTimeout, clearTimeout */
  /* jshint -W083, -W098, -W003 */
  "use strict";

  var Aff = function () {
    // A unique value for empty.
    var EMPTY = {};

    /*

  An awkward approximation. We elide evidence we would otherwise need in PS for
  efficiency sake.

  data Aff eff a
    = Pure a
    | Throw Error
    | Catch (Aff eff a) (Error -> Aff eff a)
    | Sync (Eff eff a)
    | Async ((Either Error a -> Eff eff Unit) -> Eff eff (Canceler eff))
    | forall b. Bind (Aff eff b) (b -> Aff eff a)
    | forall b. Bracket (Aff eff b) (BracketConditions eff b) (b -> Aff eff a)
    | forall b. Fork Boolean (Aff eff b) ?(Fiber eff b -> a)
    | Sequential (ParAff aff a)

  */  
    var PURE    = "Pure";
    var THROW   = "Throw";
    var CATCH   = "Catch";
    var SYNC    = "Sync";
    var ASYNC   = "Async";
    var BIND    = "Bind";
    var BRACKET = "Bracket";
    var FORK    = "Fork";
    var SEQ     = "Sequential";

    /*

  data ParAff eff a
    = forall b. Map (b -> a) (ParAff eff b)
    | forall b. Apply (ParAff eff (b -> a)) (ParAff eff b)
    | Alt (ParAff eff a) (ParAff eff a)
    | ?Par (Aff eff a)

  */  
    var MAP   = "Map";
    var APPLY = "Apply";
    var ALT   = "Alt";

    // Various constructors used in interpretation
    var CONS      = "Cons";      // Cons-list, for stacks
    var RESUME    = "Resume";    // Continue indiscriminately
    var RELEASE   = "Release";   // Continue with bracket finalizers
    var FINALIZER = "Finalizer"; // A non-interruptible effect
    var FINALIZED = "Finalized"; // Marker for finalization
    var FORKED    = "Forked";    // Reference to a forked fiber, with resumption stack
    var FIBER     = "Fiber";     // Actual fiber reference
    var THUNK     = "Thunk";     // Primed effect, ready to invoke

    function Aff(tag, _1, _2, _3) {
      this.tag = tag;
      this._1  = _1;
      this._2  = _2;
      this._3  = _3;
    }

    function AffCtr(tag) {
      var fn = function (_1, _2, _3) {
        return new Aff(tag, _1, _2, _3);
      };
      fn.tag = tag;
      return fn;
    }

    function nonCanceler(error) {
      return new Aff(PURE, void 0);
    }

    function runEff(eff) {
      try {
        eff();
      } catch (error) {
        setTimeout(function () {
          throw error;
        }, 0);
      }
    }

    function runSync(left, right, eff) {
      try {
        return right(eff());
      } catch (error) {
        return left(error);
      }
    }

    function runAsync(left, eff, k) {
      try {
        return eff(k)();
      } catch (error) {
        k(left(error))();
        return nonCanceler;
      }
    }

    var Scheduler = function () {
      var limit    = 1024;
      var size     = 0;
      var ix       = 0;
      var queue    = new Array(limit);
      var draining = false;

      function drain() {
        var thunk;
        draining = true;
        while (size !== 0) {
          size--;
          thunk     = queue[ix];
          queue[ix] = void 0;
          ix        = (ix + 1) % limit;
          thunk();
        }
        draining = false;
      }

      return {
        isDraining: function () {
          return draining;
        },
        enqueue: function (cb) {
          var i, tmp;
          if (size === limit) {
            tmp = draining;
            drain();
            draining = tmp;
          }

          queue[(ix + size) % limit] = cb;
          size++;

          if (!draining) {
            drain();
          }
        }
      };
    }();

    function Supervisor(util) {
      var fibers  = {};
      var fiberId = 0;
      var count   = 0;

      return {
        register: function (fiber) {
          var fid = fiberId++;
          fiber.onComplete({
            rethrow: true,
            handler: function (result) {
              return function () {
                count--;
                delete fibers[fid];
              };
            }
          })();
          fibers[fid] = fiber;
          count++;
        },
        isEmpty: function () {
          return count === 0;
        },
        killAll: function (killError, cb) {
          return function () {
            if (count === 0) {
              return cb();
            }

            var killCount = 0;
            var kills     = {};

            function kill(fid) {
              kills[fid] = fibers[fid].kill(killError, function (result) {
                return function () {
                  delete kills[fid];
                  killCount--;
                  if (util.isLeft(result) && util.fromLeft(result)) {
                    setTimeout(function () {
                      throw util.fromLeft(result);
                    }, 0);
                  }
                  if (killCount === 0) {
                    cb();
                  }
                };
              })();
            }

            for (var k in fibers) {
              if (fibers.hasOwnProperty(k)) {
                killCount++;
                kill(k);
              }
            }

            fibers  = {};
            fiberId = 0;
            count   = 0;

            return function (error) {
              return new Aff(SYNC, function () {
                for (var k in kills) {
                  if (kills.hasOwnProperty(k)) {
                    kills[k]();
                  }
                }
              });
            };
          };
        }
      };
    }

    // Fiber state machine
    var SUSPENDED   = 0; // Suspended, pending a join.
    var CONTINUE    = 1; // Interpret the next instruction.
    var STEP_BIND   = 2; // Apply the next bind.
    var STEP_RESULT = 3; // Handle potential failure from a result.
    var PENDING     = 4; // An async effect is running.
    var RETURN      = 5; // The current stack has returned.
    var COMPLETED   = 6; // The entire fiber has completed.

    function Fiber(util, supervisor, aff) {
      // Monotonically increasing tick, increased on each asynchronous turn.
      var runTick = 0;

      // The current branch of the state machine.
      var status = SUSPENDED;

      // The current point of interest for the state machine branch.
      var step      = aff;  // Successful step
      var fail      = null; // Failure step
      var interrupt = null; // Asynchronous interrupt

      // Stack of continuations for the current fiber.
      var bhead = null;
      var btail = null;

      // Stack of attempts and finalizers for error recovery. Every `Cons` is also
      // tagged with current `interrupt` state. We use this to track which items
      // should be ignored or evaluated as a result of a kill.
      var attempts = null;

      // A special state is needed for Bracket, because it cannot be killed. When
      // we enter a bracket acquisition or finalizer, we increment the counter,
      // and then decrement once complete.
      var bracketCount = 0;

      // Each join gets a new id so they can be revoked.
      var joinId  = 0;
      var joins   = null;
      var rethrow = true;

      // Each invocation of `run` requires a tick. When an asynchronous effect is
      // resolved, we must check that the local tick coincides with the fiber
      // tick before resuming. This prevents multiple async continuations from
      // accidentally resuming the same fiber. A common example may be invoking
      // the provided callback in `makeAff` more than once, but it may also be an
      // async effect resuming after the fiber was already cancelled.
      function run(localRunTick) {
        var tmp, result, attempt;
        while (true) {
          tmp       = null;
          result    = null;
          attempt   = null;

          switch (status) {
          case STEP_BIND:
            status = CONTINUE;
            try {
              step   = bhead(step);
              if (btail === null) {
                bhead = null;
              } else {
                bhead = btail._1;
                btail = btail._2;
              }
            } catch (e) {
              status = RETURN;
              fail   = util.left(e);
              step   = null;
            }
            break;

          case STEP_RESULT:
            if (util.isLeft(step)) {
              status = RETURN;
              fail   = step;
              step   = null;
            } else if (bhead === null) {
              status = RETURN;
            } else {
              status = STEP_BIND;
              step   = util.fromRight(step);
            }
            break;

          case CONTINUE:
            switch (step.tag) {
            case BIND:
              if (bhead) {
                btail = new Aff(CONS, bhead, btail);
              }
              bhead  = step._2;
              status = CONTINUE;
              step   = step._1;
              break;

            case PURE:
              if (bhead === null) {
                status = RETURN;
                step   = util.right(step._1);
              } else {
                status = STEP_BIND;
                step   = step._1;
              }
              break;

            case SYNC:
              status = STEP_RESULT;
              step   = runSync(util.left, util.right, step._1);
              break;

            case ASYNC:
              status = PENDING;
              step   = runAsync(util.left, step._1, function (result) {
                return function () {
                  if (runTick !== localRunTick) {
                    return;
                  }
                  runTick++;
                  Scheduler.enqueue(function () {
                    // It's possible to interrupt the fiber between enqueuing and
                    // resuming, so we need to check that the runTick is still
                    // valid.
                    if (runTick !== localRunTick + 1) {
                      return;
                    }
                    status = STEP_RESULT;
                    step   = result;
                    run(runTick);
                  });
                };
              });
              return;

            case THROW:
              status = RETURN;
              fail   = util.left(step._1);
              step   = null;
              break;

            // Enqueue the Catch so that we can call the error handler later on
            // in case of an exception.
            case CATCH:
              if (bhead === null) {
                attempts = new Aff(CONS, step, attempts, interrupt);
              } else {
                attempts = new Aff(CONS, step, new Aff(CONS, new Aff(RESUME, bhead, btail), attempts, interrupt), interrupt);
              }
              bhead    = null;
              btail    = null;
              status   = CONTINUE;
              step     = step._1;
              break;

            // Enqueue the Bracket so that we can call the appropriate handlers
            // after resource acquisition.
            case BRACKET:
              bracketCount++;
              if (bhead === null) {
                attempts = new Aff(CONS, step, attempts, interrupt);
              } else {
                attempts = new Aff(CONS, step, new Aff(CONS, new Aff(RESUME, bhead, btail), attempts, interrupt), interrupt);
              }
              bhead  = null;
              btail  = null;
              status = CONTINUE;
              step   = step._1;
              break;

            case FORK:
              status = STEP_RESULT;
              tmp    = Fiber(util, supervisor, step._2);
              if (supervisor) {
                supervisor.register(tmp);
              }
              if (step._1) {
                tmp.run();
              }
              step = util.right(tmp);
              break;

            case SEQ:
              status = CONTINUE;
              step   = sequential(util, supervisor, step._1);
              break;
            }
            break;

          case RETURN:
            bhead = null;
            btail = null;
            // If the current stack has returned, and we have no other stacks to
            // resume or finalizers to run, the fiber has halted and we can
            // invoke all join callbacks. Otherwise we need to resume.
            if (attempts === null) {
              status = COMPLETED;
              step   = interrupt || fail || step;
            } else {
              // The interrupt status for the enqueued item.
              tmp      = attempts._3;
              attempt  = attempts._1;
              attempts = attempts._2;

              switch (attempt.tag) {
              // We cannot recover from an unmasked interrupt. Otherwise we should
              // continue stepping, or run the exception handler if an exception
              // was raised.
              case CATCH:
                // We should compare the interrupt status as well because we
                // only want it to apply if there has been an interrupt since
                // enqueuing the catch.
                if (interrupt && interrupt !== tmp && bracketCount === 0) {
                  status = RETURN;
                } else if (fail) {
                  status = CONTINUE;
                  step   = attempt._2(util.fromLeft(fail));
                  fail   = null;
                }
                break;

              // We cannot resume from an unmasked interrupt or exception.
              case RESUME:
                // As with Catch, we only want to ignore in the case of an
                // interrupt since enqueing the item.
                if (interrupt && interrupt !== tmp && bracketCount === 0 || fail) {
                  status = RETURN;
                } else {
                  bhead  = attempt._1;
                  btail  = attempt._2;
                  status = STEP_BIND;
                  step   = util.fromRight(step);
                }
                break;

              // If we have a bracket, we should enqueue the handlers,
              // and continue with the success branch only if the fiber has
              // not been interrupted. If the bracket acquisition failed, we
              // should not run either.
              case BRACKET:
                bracketCount--;
                if (fail === null) {
                  result   = util.fromRight(step);
                  // We need to enqueue the Release with the same interrupt
                  // status as the Bracket that is initiating it.
                  attempts = new Aff(CONS, new Aff(RELEASE, attempt._2, result), attempts, tmp);
                  // We should only coninue as long as the interrupt status has not changed or
                  // we are currently within a non-interruptable finalizer.
                  if (interrupt === tmp || bracketCount > 0) {
                    status = CONTINUE;
                    step   = attempt._3(result);
                  }
                }
                break;

              // Enqueue the appropriate handler. We increase the bracket count
              // because it should not be cancelled.
              case RELEASE:
                attempts = new Aff(CONS, new Aff(FINALIZED, step, fail), attempts, interrupt);
                status   = CONTINUE;
                // It has only been killed if the interrupt status has changed
                // since we enqueued the item, and the bracket count is 0. If the
                // bracket count is non-zero then we are in a masked state so it's
                // impossible to be killed.
                if (interrupt && interrupt !== tmp && bracketCount === 0) {
                  step = attempt._1.killed(util.fromLeft(interrupt))(attempt._2);
                } else if (fail) {
                  step = attempt._1.failed(util.fromLeft(fail))(attempt._2);
                } else {
                  step = attempt._1.completed(util.fromRight(step))(attempt._2);
                }
                fail = null;
                bracketCount++;
                break;

              case FINALIZER:
                bracketCount++;
                attempts = new Aff(CONS, new Aff(FINALIZED, step, fail), attempts, interrupt);
                status   = CONTINUE;
                step     = attempt._1;
                break;

              case FINALIZED:
                bracketCount--;
                status = RETURN;
                step   = attempt._1;
                fail   = attempt._2;
                break;
              }
            }
            break;

          case COMPLETED:
            for (var k in joins) {
              if (joins.hasOwnProperty(k)) {
                rethrow = rethrow && joins[k].rethrow;
                runEff(joins[k].handler(step));
              }
            }
            joins = null;
            // If we have an interrupt and a fail, then the thread threw while
            // running finalizers. This should always rethrow in a fresh stack.
            if (interrupt && fail) {
              setTimeout(function () {
                throw util.fromLeft(fail);
              }, 0);
            // If we have an unhandled exception, and no other fiber has joined
            // then we need to throw the exception in a fresh stack.
            } else if (util.isLeft(step) && rethrow) {
              setTimeout(function () {
                // Guard on reathrow because a completely synchronous fiber can
                // still have an observer which was added after-the-fact.
                if (rethrow) {
                  throw util.fromLeft(step);
                }
              }, 0);
            }
            return;
          case SUSPENDED:
            status = CONTINUE;
            break;
          case PENDING: return;
          }
        }
      }

      function onComplete(join) {
        return function () {
          if (status === COMPLETED) {
            rethrow = rethrow && join.rethrow;
            join.handler(step)();
            return function () {};
          }

          var jid    = joinId++;
          joins      = joins || {};
          joins[jid] = join;

          return function() {
            if (joins !== null) {
              delete joins[jid];
            }
          };
        };
      }

      function kill(error, cb) {
        return function () {
          if (status === COMPLETED) {
            cb(util.right(void 0))();
            return function () {};
          }

          var canceler = onComplete({
            rethrow: false,
            handler: function (/* unused */) {
              return cb(util.right(void 0));
            }
          })();

          switch (status) {
          case SUSPENDED:
            interrupt = util.left(error);
            status    = COMPLETED;
            step      = interrupt;
            run(runTick);
            break;
          case PENDING:
            if (interrupt === null) {
              interrupt = util.left(error);
            }
            if (bracketCount === 0) {
              if (status === PENDING) {
                attempts = new Aff(CONS, new Aff(FINALIZER, step(error)), attempts, interrupt);
              }
              status   = RETURN;
              step     = null;
              fail     = null;
              run(++runTick);
            }
            break;
          default:
            if (interrupt === null) {
              interrupt = util.left(error);
            }
            if (bracketCount === 0) {
              status = RETURN;
              step   = null;
              fail   = null;
            }
          }

          return canceler;
        };
      }

      function join(cb) {
        return function () {
          var canceler = onComplete({
            rethrow: false,
            handler: cb
          })();
          if (status === SUSPENDED) {
            run(runTick);
          }
          return canceler;
        };
      }

      return {
        kill: kill,
        join: join,
        onComplete: onComplete,
        isSuspended: function () {
          return status === SUSPENDED;
        },
        run: function () {
          if (status === SUSPENDED) {
            if (!Scheduler.isDraining()) {
              Scheduler.enqueue(function () {
                run(runTick);
              });
            } else {
              run(runTick);
            }
          }
        }
      };
    }

    function runPar(util, supervisor, par, cb) {
      // Table of all forked fibers.
      var fiberId   = 0;
      var fibers    = {};

      // Table of currently running cancelers, as a product of `Alt` behavior.
      var killId    = 0;
      var kills     = {};

      // Error used for early cancelation on Alt branches.
      var early     = new Error("[ParAff] Early exit");

      // Error used to kill the entire tree.
      var interrupt = null;

      // The root pointer of the tree.
      var root      = EMPTY;

      // Walks a tree, invoking all the cancelers. Returns the table of pending
      // cancellation fibers.
      function kill(error, par, cb) {
        var step  = par;
        var head  = null;
        var tail  = null;
        var count = 0;
        var kills = {};
        var tmp, kid;

        loop: while (true) {
          tmp = null;

          switch (step.tag) {
          case FORKED:
            if (step._3 === EMPTY) {
              tmp = fibers[step._1];
              kills[count++] = tmp.kill(error, function (result) {
                return function () {
                  count--;
                  if (count === 0) {
                    cb(result)();
                  }
                };
              });
            }
            // Terminal case.
            if (head === null) {
              break loop;
            }
            // Go down the right side of the tree.
            step = head._2;
            if (tail === null) {
              head = null;
            } else {
              head = tail._1;
              tail = tail._2;
            }
            break;
          case MAP:
            step = step._2;
            break;
          case APPLY:
          case ALT:
            if (head) {
              tail = new Aff(CONS, head, tail);
            }
            head = step;
            step = step._1;
            break;
          }
        }

        if (count === 0) {
          cb(util.right(void 0))();
        } else {
          // Run the cancelation effects. We alias `count` because it's mutable.
          kid = 0;
          tmp = count;
          for (; kid < tmp; kid++) {
            kills[kid] = kills[kid]();
          }
        }

        return kills;
      }

      // When a fiber resolves, we need to bubble back up the tree with the
      // result, computing the applicative nodes.
      function join(result, head, tail) {
        var fail, step, lhs, rhs, tmp, kid;

        if (util.isLeft(result)) {
          fail = result;
          step = null;
        } else {
          step = result;
          fail = null;
        }

        loop: while (true) {
          lhs = null;
          rhs = null;
          tmp = null;
          kid = null;

          // We should never continue if the entire tree has been interrupted.
          if (interrupt !== null) {
            return;
          }

          // We've made it all the way to the root of the tree, which means
          // the tree has fully evaluated.
          if (head === null) {
            cb(fail || step)();
            return;
          }

          // The tree has already been computed, so we shouldn't try to do it
          // again. This should never happen.
          // TODO: Remove this?
          if (head._3 !== EMPTY) {
            return;
          }

          switch (head.tag) {
          case MAP:
            if (fail === null) {
              head._3 = util.right(head._1(util.fromRight(step)));
              step    = head._3;
            } else {
              head._3 = fail;
            }
            break;
          case APPLY:
            lhs = head._1._3;
            rhs = head._2._3;
            // If we have a failure we should kill the other side because we
            // can't possible yield a result anymore.
            if (fail) {
              head._3 = fail;
              tmp     = true;
              kid     = killId++;

              kills[kid] = kill(early, fail === lhs ? head._2 : head._1, function (/* unused */) {
                return function () {
                  delete kills[kid];
                  if (tmp) {
                    tmp = false;
                  } else if (tail === null) {
                    join(fail, null, null);
                  } else {
                    join(fail, tail._1, tail._2);
                  }
                };
              });

              if (tmp) {
                tmp = false;
                return;
              }
            } else if (lhs === EMPTY || rhs === EMPTY) {
              // We can only proceed if both sides have resolved.
              return;
            } else {
              step    = util.right(util.fromRight(lhs)(util.fromRight(rhs)));
              head._3 = step;
            }
            break;
          case ALT:
            lhs = head._1._3;
            rhs = head._2._3;
            // We can only proceed if both have resolved or we have a success
            if (lhs === EMPTY && util.isLeft(rhs) || rhs === EMPTY && util.isLeft(lhs)) {
              return;
            }
            // If both sides resolve with an error, we should continue with the
            // first error
            if (lhs !== EMPTY && util.isLeft(lhs) && rhs !== EMPTY && util.isLeft(rhs)) {
              fail    = step === lhs ? rhs : lhs;
              step    = null;
              head._3 = fail;
            } else {
              head._3 = step;
              tmp     = true;
              kid     = killId++;
              // Once a side has resolved, we need to cancel the side that is still
              // pending before we can continue.
              kills[kid] = kill(early, step === lhs ? head._2 : head._1, function (/* unused */) {
                return function () {
                  delete kills[kid];
                  if (tmp) {
                    tmp = false;
                  } else if (tail === null) {
                    join(step, null, null);
                  } else {
                    join(step, tail._1, tail._2);
                  }
                };
              });

              if (tmp) {
                tmp = false;
                return;
              }
            }
            break;
          }

          if (tail === null) {
            head = null;
          } else {
            head = tail._1;
            tail = tail._2;
          }
        }
      }

      function resolve(fiber) {
        return function (result) {
          return function () {
            delete fibers[fiber._1];
            fiber._3 = result;
            join(result, fiber._2._1, fiber._2._2);
          };
        };
      }

      // Walks the applicative tree, substituting non-applicative nodes with
      // `FORKED` nodes. In this tree, all applicative nodes use the `_3` slot
      // as a mutable slot for memoization. In an unresolved state, the `_3`
      // slot is `EMPTY`. In the cases of `ALT` and `APPLY`, we always walk
      // the left side first, because both operations are left-associative. As
      // we `RETURN` from those branches, we then walk the right side.
      function run() {
        var status = CONTINUE;
        var step   = par;
        var head   = null;
        var tail   = null;
        var tmp, fid;

        loop: while (true) {
          tmp = null;
          fid = null;

          switch (status) {
          case CONTINUE:
            switch (step.tag) {
            case MAP:
              if (head) {
                tail = new Aff(CONS, head, tail);
              }
              head = new Aff(MAP, step._1, EMPTY, EMPTY);
              step = step._2;
              break;
            case APPLY:
              if (head) {
                tail = new Aff(CONS, head, tail);
              }
              head = new Aff(APPLY, EMPTY, step._2, EMPTY);
              step = step._1;
              break;
            case ALT:
              if (head) {
                tail = new Aff(CONS, head, tail);
              }
              head = new Aff(ALT, EMPTY, step._2, EMPTY);
              step = step._1;
              break;
            default:
              // When we hit a leaf value, we suspend the stack in the `FORKED`.
              // When the fiber resolves, it can bubble back up the tree.
              fid    = fiberId++;
              status = RETURN;
              tmp    = step;
              step   = new Aff(FORKED, fid, new Aff(CONS, head, tail), EMPTY);
              tmp    = Fiber(util, supervisor, tmp);
              tmp.onComplete({
                rethrow: false,
                handler: resolve(step)
              })();
              fibers[fid] = tmp;
              if (supervisor) {
                supervisor.register(tmp);
              }
            }
            break;
          case RETURN:
            // Terminal case, we are back at the root.
            if (head === null) {
              break loop;
            }
            // If we are done with the right side, we need to continue down the
            // left. Otherwise we should continue up the stack.
            if (head._1 === EMPTY) {
              head._1 = step;
              status  = CONTINUE;
              step    = head._2;
              head._2 = EMPTY;
            } else {
              head._2 = step;
              step    = head;
              if (tail === null) {
                head  = null;
              } else {
                head  = tail._1;
                tail  = tail._2;
              }
            }
          }
        }

        // Keep a reference to the tree root so it can be cancelled.
        root = step;

        for (fid = 0; fid < fiberId; fid++) {
          fibers[fid].run();
        }
      }

      // Cancels the entire tree. If there are already subtrees being canceled,
      // we need to first cancel those joins. We will then add fresh joins for
      // all pending branches including those that were in the process of being
      // canceled.
      function cancel(error, cb) {
        interrupt = util.left(error);
        var innerKills;
        for (var kid in kills) {
          if (kills.hasOwnProperty(kid)) {
            innerKills = kills[kid];
            for (kid in innerKills) {
              if (innerKills.hasOwnProperty(kid)) {
                innerKills[kid]();
              }
            }
          }
        }

        kills = null;
        var newKills = kill(error, root, cb);

        return function (killError) {
          return new Aff(ASYNC, function (killCb) {
            return function () {
              for (var kid in newKills) {
                if (newKills.hasOwnProperty(kid)) {
                  newKills[kid]();
                }
              }
              return nonCanceler;
            };
          });
        };
      }

      run();

      return function (killError) {
        return new Aff(ASYNC, function (killCb) {
          return function () {
            return cancel(killError, killCb);
          };
        });
      };
    }

    function sequential(util, supervisor, par) {
      return new Aff(ASYNC, function (cb) {
        return function () {
          return runPar(util, supervisor, par, cb);
        };
      });
    }

    Aff.EMPTY       = EMPTY;
    Aff.Pure        = AffCtr(PURE);
    Aff.Throw       = AffCtr(THROW);
    Aff.Catch       = AffCtr(CATCH);
    Aff.Sync        = AffCtr(SYNC);
    Aff.Async       = AffCtr(ASYNC);
    Aff.Bind        = AffCtr(BIND);
    Aff.Bracket     = AffCtr(BRACKET);
    Aff.Fork        = AffCtr(FORK);
    Aff.Seq         = AffCtr(SEQ);
    Aff.ParMap      = AffCtr(MAP);
    Aff.ParApply    = AffCtr(APPLY);
    Aff.ParAlt      = AffCtr(ALT);
    Aff.Fiber       = Fiber;
    Aff.Supervisor  = Supervisor;
    Aff.Scheduler   = Scheduler;
    Aff.nonCanceler = nonCanceler;

    return Aff;
  }();

  exports._pure = Aff.Pure;

  exports._map = function (f) {
    return function (aff) {
      if (aff.tag === Aff.Pure.tag) {
        return Aff.Pure(f(aff._1));
      } else {
        return Aff.Bind(aff, function (value) {
          return Aff.Pure(f(value));
        });
      }
    };
  };

  exports._bind = function (aff) {
    return function (k) {
      return Aff.Bind(aff, k);
    };
  };

  exports._liftEffect = Aff.Sync;

  exports._makeFiber = function (util, aff) {
    return function () {
      return Aff.Fiber(util, null, aff);
    };
  };

  exports._delay = function () {
    function setDelay(n, k) {
      if (n === 0 && typeof setImmediate !== "undefined") {
        return setImmediate(k);
      } else {
        return setTimeout(k, n);
      }
    }

    function clearDelay(n, t) {
      if (n === 0 && typeof clearImmediate !== "undefined") {
        return clearImmediate(t);
      } else {
        return clearTimeout(t);
      }
    }

    return function (right, ms) {
      return Aff.Async(function (cb) {
        return function () {
          var timer = setDelay(ms, cb(right()));
          return function () {
            return Aff.Sync(function () {
              return right(clearDelay(ms, timer));
            });
          };
        };
      });
    };
  }();
})(PS["Effect.Aff"] = PS["Effect.Aff"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Effect.Class"] = $PS["Effect.Class"] || {};
  var exports = $PS["Effect.Class"];         
  var MonadEffect = function (Monad0, liftEffect) {
      this.Monad0 = Monad0;
      this.liftEffect = liftEffect;
  };                                                         
  var liftEffect = function (dict) {
      return dict.liftEffect;
  };
  exports["liftEffect"] = liftEffect;
  exports["MonadEffect"] = MonadEffect;
})(PS);
(function(exports) {
  "use strict";

  // module Partial.Unsafe

  exports.unsafePartial = function (f) {
    return f();
  };
})(PS["Partial.Unsafe"] = PS["Partial.Unsafe"] || {});
(function(exports) {
  "use strict";

  // module Partial

  exports.crashWith = function () {
    return function (msg) {
      throw new Error(msg);
    };
  };
})(PS["Partial"] = PS["Partial"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Partial"] = $PS["Partial"] || {};
  var exports = $PS["Partial"];
  var $foreign = $PS["Partial"];
  exports["crashWith"] = $foreign.crashWith;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Partial.Unsafe"] = $PS["Partial.Unsafe"] || {};
  var exports = $PS["Partial.Unsafe"];
  var $foreign = $PS["Partial.Unsafe"];
  var Partial = $PS["Partial"];
  var unsafeCrashWith = function (msg) {
      return $foreign.unsafePartial(function (dictPartial) {
          return Partial.crashWith()(msg);
      });
  };
  exports["unsafeCrashWith"] = unsafeCrashWith;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Effect.Aff"] = $PS["Effect.Aff"] || {};
  var exports = $PS["Effect.Aff"];
  var $foreign = $PS["Effect.Aff"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Control_Monad_Rec_Class = $PS["Control.Monad.Rec.Class"];
  var Data_Either = $PS["Data.Either"];
  var Data_Functor = $PS["Data.Functor"];
  var Effect_Class = $PS["Effect.Class"];
  var Partial_Unsafe = $PS["Partial.Unsafe"];                          
  var functorAff = new Data_Functor.Functor($foreign["_map"]);
  var ffiUtil = (function () {
      var unsafeFromRight = function (v) {
          if (v instanceof Data_Either.Right) {
              return v.value0;
          };
          if (v instanceof Data_Either.Left) {
              return Partial_Unsafe.unsafeCrashWith("unsafeFromRight: Left");
          };
          throw new Error("Failed pattern match at Effect.Aff (line 400, column 21 - line 402, column 54): " + [ v.constructor.name ]);
      };
      var unsafeFromLeft = function (v) {
          if (v instanceof Data_Either.Left) {
              return v.value0;
          };
          if (v instanceof Data_Either.Right) {
              return Partial_Unsafe.unsafeCrashWith("unsafeFromLeft: Right");
          };
          throw new Error("Failed pattern match at Effect.Aff (line 395, column 20 - line 397, column 54): " + [ v.constructor.name ]);
      };
      var isLeft = function (v) {
          if (v instanceof Data_Either.Left) {
              return true;
          };
          if (v instanceof Data_Either.Right) {
              return false;
          };
          throw new Error("Failed pattern match at Effect.Aff (line 390, column 12 - line 392, column 20): " + [ v.constructor.name ]);
      };
      return {
          isLeft: isLeft,
          fromLeft: unsafeFromLeft,
          fromRight: unsafeFromRight,
          left: Data_Either.Left.create,
          right: Data_Either.Right.create
      };
  })();
  var makeFiber = function (aff) {
      return $foreign["_makeFiber"](ffiUtil, aff);
  };
  var launchAff = function (aff) {
      return function __do() {
          var fiber = makeFiber(aff)();
          fiber.run();
          return fiber;
      };
  };                                 
  var delay = function (v) {
      return $foreign["_delay"](Data_Either.Right.create, v);
  };
  var monadAff = new Control_Monad.Monad(function () {
      return applicativeAff;
  }, function () {
      return bindAff;
  });
  var bindAff = new Control_Bind.Bind(function () {
      return applyAff;
  }, $foreign["_bind"]);
  var applyAff = new Control_Apply.Apply(function () {
      return functorAff;
  }, Control_Monad.ap(monadAff));
  var applicativeAff = new Control_Applicative.Applicative(function () {
      return applyAff;
  }, $foreign["_pure"]);
  var monadEffectAff = new Effect_Class.MonadEffect(function () {
      return monadAff;
  }, $foreign["_liftEffect"]);
  var monadRecAff = new Control_Monad_Rec_Class.MonadRec(function () {
      return monadAff;
  }, function (k) {
      var go = function (a) {
          return Control_Bind.bind(bindAff)(k(a))(function (res) {
              if (res instanceof Control_Monad_Rec_Class.Done) {
                  return Control_Applicative.pure(applicativeAff)(res.value0);
              };
              if (res instanceof Control_Monad_Rec_Class.Loop) {
                  return go(res.value0);
              };
              throw new Error("Failed pattern match at Effect.Aff (line 100, column 7 - line 102, column 22): " + [ res.constructor.name ]);
          });
      };
      return go;
  });
  exports["launchAff"] = launchAff;
  exports["delay"] = delay;
  exports["applicativeAff"] = applicativeAff;
  exports["bindAff"] = bindAff;
  exports["monadRecAff"] = monadRecAff;
  exports["monadEffectAff"] = monadEffectAff;
})(PS);
(function(exports) {
  "use strict";

  exports.log = function (s) {
    return function () {
      console.log(s);
      return {};
    };
  };
})(PS["Effect.Console"] = PS["Effect.Console"] || {});
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Effect.Console"] = $PS["Effect.Console"] || {};
  var exports = $PS["Effect.Console"];
  var $foreign = $PS["Effect.Console"];
  var Data_Show = $PS["Data.Show"];
  var logShow = function (dictShow) {
      return function (a) {
          return $foreign.log(Data_Show.show(dictShow)(a));
      };
  };
  exports["logShow"] = logShow;
  exports["log"] = $foreign.log;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["BotScriptVM"] = $PS["BotScriptVM"] || {};
  var exports = $PS["BotScriptVM"];
  var $foreign = $PS["BotScriptVM"];
  var BotScript = $PS["BotScript"];
  var BotScriptEnv = $PS["BotScriptEnv"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Rec_Class = $PS["Control.Monad.Rec.Class"];
  var Data_Array = $PS["Data.Array"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Show = $PS["Data.Show"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unit = $PS["Data.Unit"];
  var DrrrBot = $PS["DrrrBot"];
  var Effect = $PS["Effect"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Effect_Class = $PS["Effect.Class"];
  var Effect_Console = $PS["Effect.Console"];                
  var evalExpr = function (env) {
      return function (v) {
          if (v instanceof BotScript.Arr) {
              return BotScript.Arr.create(Data_Functor.map(Data_Functor.functorArray)(evalExpr(env))(v.value0));
          };
          if (v instanceof BotScript.Bin) {
              var erv = evalExpr(env)(v.value2);
              var elv = evalExpr(env)(v.value1);
              return $foreign.evalBin(BotScript.toExpr)(v.value0)(elv)(erv);
          };
          if (v instanceof BotScript.Una) {
              var ev = evalExpr(env)(v.value1);
              return $foreign.evalUna(BotScript.toExpr)(v.value0)(ev);
          };
          if (v instanceof BotScript.Ref) {
              var ev$primeidxs = Data_Functor.map(Data_Functor.functorArray)(evalExpr(env))(v.value0.value1);
              var v1 = BotScriptEnv.assocVar(v.value0.value0)(env);
              if (v1 instanceof Data_Maybe.Just) {
                  return v1.value0;
              };
              if (v1 instanceof Data_Maybe.Nothing) {
                  return BotScript.Null.value;
              };
              throw new Error("Failed pattern match at BotScriptVM (line 129, column 5 - line 131, column 24): " + [ v1.constructor.name ]);
          };
          return v;
      };
  };
  var bind$primeevent$primevars = function (args) {
      return function (rules) {
          return function (enviorn) {
              return Data_Foldable.foldr(Data_Foldable.foldableArray)(function (v) {
                  return function (acc) {
                      return BotScriptEnv.insert(acc)(v.value0.value0)(new BotScript.Str(v.value1));
                  };
              })(enviorn)(Data_Array.zip(rules)(args));
          };
      };
  };
  var runActions = function (v) {
      if (v.as instanceof Data_List_Types.Nil) {
          return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Console.log("wrong")))(function () {
              return Control_Applicative.pure(Effect_Aff.applicativeAff)(new Control_Monad_Rec_Class.Done(Data_Unit.unit));
          });
      };
      if (v.as instanceof Data_List_Types.Cons && (v.as.value0 instanceof Data_List_Types.Nil && v.as.value1 instanceof Data_List_Types.Nil)) {
          return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Console.log("done")))(function () {
              return Control_Applicative.pure(Effect_Aff.applicativeAff)(new Control_Monad_Rec_Class.Done(Data_Unit.unit));
          });
      };
      if (v.as instanceof Data_List_Types.Cons && v.as.value0 instanceof Data_List_Types.Nil) {
          var pop$primeenv = BotScriptEnv.popEnv(v.e);
          return Control_Applicative.pure(Effect_Aff.applicativeAff)(new Control_Monad_Rec_Class.Loop({
              as: v.as.value1,
              e: pop$primeenv,
              sn: v.sn,
              s: v.s
          }));
      };
      if (v.as instanceof Data_List_Types.Cons && v.as.value0 instanceof Data_List_Types.Cons) {
          if (v.as.value0.value0 instanceof BotScript.Going) {
              var v1 = Data_Foldable.find(Data_Foldable.foldableArray)(function (v2) {
                  return v2.value0 === v.as.value0.value0.value0;
              })(v.s);
              if (v1 instanceof Data_Maybe.Just) {
                  var top$primeenv = BotScriptEnv.topEnv(v.e);
                  return Control_Applicative.pure(Effect_Aff.applicativeAff)(new Control_Monad_Rec_Class.Loop({
                      as: new Data_List_Types.Cons(new Data_List_Types.Cons(v1.value0.value1, Data_List_Types.Nil.value), Data_List_Types.Nil.value),
                      e: top$primeenv,
                      sn: v.as.value0.value0.value0,
                      s: v.s
                  }));
              };
              if (v1 instanceof Data_Maybe.Nothing) {
                  return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Console.log("state <" + (v.as.value0.value0.value0 + "> not found"))))(function () {
                      return Control_Applicative.pure(Effect_Aff.applicativeAff)(new Control_Monad_Rec_Class.Done(Data_Unit.unit));
                  });
              };
              throw new Error("Failed pattern match at BotScriptVM (line 61, column 13 - line 67, column 35): " + [ v1.constructor.name ]);
          };
          if (v.as.value0.value0 instanceof BotScript.Group) {
              var v1 = Effect_Console.logShow(BotScript.showAction)(v.as.value0.value0);
              var new$primeenv = BotScriptEnv.pushEnv(v.e);
              return Control_Applicative.pure(Effect_Aff.applicativeAff)(new Control_Monad_Rec_Class.Loop({
                  as: new Data_List_Types.Cons(v.as.value0.value0.value0, new Data_List_Types.Cons(v.as.value0.value1, v.as.value1)),
                  e: new$primeenv,
                  sn: v.sn,
                  s: v.s
              }));
          };
          if (v.as.value0.value0 instanceof BotScript.Invok) {
              var ev$primeargs = Data_Functor.map(Data_Functor.functorArray)(evalExpr(v.e))(v.as.value0.value0.value1);
              return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(DrrrBot.invok(v.as.value0.value0.value0)(ev$primeargs)))(function () {
                  return Control_Applicative.pure(Effect_Aff.applicativeAff)(new Control_Monad_Rec_Class.Loop({
                      as: new Data_List_Types.Cons(v.as.value0.value1, v.as.value1),
                      e: v.e,
                      sn: v.sn,
                      s: v.s
                  }));
              });
          };
          if (v.as.value0.value0 instanceof BotScript.Event) {
              return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Console.logShow(BotScript.showAction)(v.as.value0.value0)))(function () {
                  return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(DrrrBot.listen(v.sn)(v.as.value0.value0.value0)(Data_Functor.map(Data_Functor.functorArray)(Data_Tuple.snd)(v.as.value0.value0.value1))(make$primeevent$primeaction(v.as.value0.value0.value1)(v.as.value0.value0.value2)(v.sn)(v.s)(v.e))))(function () {
                      return Control_Applicative.pure(Effect_Aff.applicativeAff)(new Control_Monad_Rec_Class.Loop({
                          as: new Data_List_Types.Cons(v.as.value0.value1, v.as.value1),
                          e: v.e,
                          sn: v.sn,
                          s: v.s
                      }));
                  });
              });
          };
          if (v.as.value0.value0 instanceof BotScript.Renew && v.as.value0.value0.value0.value1.length === 0) {
              var ev$primeexpr = evalExpr(v.e)(v.as.value0.value0.value1);
              var nenv = BotScriptEnv.insert(v.e)(v.as.value0.value0.value0.value0)(ev$primeexpr);
              return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Console.logShow(BotScript.showAction)(v.as.value0.value0)))(function () {
                  return Control_Applicative.pure(Effect_Aff.applicativeAff)(new Control_Monad_Rec_Class.Loop({
                      as: new Data_List_Types.Cons(v.as.value0.value1, v.as.value1),
                      e: v.e,
                      sn: v.sn,
                      s: v.s
                  }));
              });
          };
          if (v.as.value0.value0 instanceof BotScript.Renew) {
              var ev$primeidxs = Data_Functor.map(Data_Functor.functorArray)(evalExpr(v.e))(v.as.value0.value0.value0.value1);
              var ev$primeexpr = evalExpr(v.e)(v.as.value0.value0.value1);
              return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)((function () {
                  var v1 = BotScriptEnv.assocEnv(v.as.value0.value0.value0.value0)(v.e);
                  if (v1 instanceof Data_Maybe.Nothing) {
                      return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Console.log(Data_Show.show(BotScript.showAction)(v.as.value0.value0) + " var not found"));
                  };
                  if (v1 instanceof Data_Maybe.Just) {
                      return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(BotScriptEnv.updateTabRef(v1.value0)(v.as.value0.value0.value0.value0)(ev$primeidxs)(ev$primeexpr));
                  };
                  throw new Error("Failed pattern match at BotScriptVM (line 93, column 13 - line 97, column 63): " + [ v1.constructor.name ]);
              })())(function () {
                  return Control_Applicative.pure(Effect_Aff.applicativeAff)(new Control_Monad_Rec_Class.Loop({
                      as: new Data_List_Types.Cons(v.as.value0.value1, v.as.value1),
                      e: v.e,
                      sn: v.sn,
                      s: v.s
                  }));
              });
          };
          return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)((function () {
              if (v.as.value0.value0 instanceof BotScript.Delay) {
                  return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Console.logShow(BotScript.showAction)(v.as.value0.value0)))(function () {
                      return Effect_Aff.delay(1000.0);
                  });
              };
              if (v.as.value0.value0 instanceof BotScript.While) {
                  return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Console.logShow(BotScript.showAction)(v.as.value0.value0));
              };
              if (v.as.value0.value0 instanceof BotScript.Visit) {
                  return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Console.logShow(BotScript.showAction)(v.as.value0.value0));
              };
              if (v.as.value0.value0 instanceof BotScript.Match) {
                  return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Console.logShow(BotScript.showAction)(v.as.value0.value0));
              };
              return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Console.log("unhandled action: " + Data_Show.show(BotScript.showAction)(v.as.value0.value0)));
          })())(function () {
              return Control_Applicative.pure(Effect_Aff.applicativeAff)(new Control_Monad_Rec_Class.Loop({
                  as: new Data_List_Types.Cons(v.as.value0.value1, v.as.value1),
                  e: v.e,
                  sn: v.sn,
                  s: v.s
              }));
          });
      };
      throw new Error("Failed pattern match at BotScriptVM (line 33, column 1 - line 44, column 25): " + [ v.constructor.name ]);
  };
  var make$primeevent$primeaction = function (rules) {
      return function (action) {
          return function (sname) {
              return function (states) {
                  return function (env) {
                      return function (args) {
                          return Data_Functor["void"](Effect.functorEffect)(Effect_Aff.launchAff(Control_Monad_Rec_Class.tailRecM(Effect_Aff.monadRecAff)(runActions)({
                              as: new Data_List_Types.Cons(new Data_List_Types.Cons(action, Data_List_Types.Nil.value), Data_List_Types.Nil.value),
                              e: bind$primeevent$primevars(args)(rules)(env),
                              sn: sname,
                              s: states
                          })));
                      };
                  };
              };
          };
      };
  };
  var runVM = function (v) {
      var env = BotScriptEnv.pushEnv(BotScriptEnv.Top.value);
      return Data_Functor["void"](Effect.functorEffect)(Effect_Aff.launchAff(Control_Monad_Rec_Class.tailRecM(Effect_Aff.monadRecAff)(runActions)({
          as: new Data_List_Types.Cons(v.value0, Data_List_Types.Nil.value),
          e: env,
          sn: "",
          s: v.value1
      })));
  };
  exports["runVM"] = runVM;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.8
  "use strict";
  $PS["Main"] = $PS["Main"] || {};
  var exports = $PS["Main"];
  var BotScript = $PS["BotScript"];
  var BotScriptParser = $PS["BotScriptParser"];
  var BotScriptVM = $PS["BotScriptVM"];
  var Data_Either = $PS["Data.Either"];
  var Data_Show = $PS["Data.Show"];
  var Effect_Console = $PS["Effect.Console"];
  var Text_Parsing_Parser = $PS["Text.Parsing.Parser"];                
  var execute = function (ctx1) {
      var v = BotScriptParser.parse(BotScriptParser.parseScript)(ctx1);
      if (v instanceof Data_Either.Right) {
          return BotScriptVM.runVM(v.value0);
      };
      if (v instanceof Data_Either.Left) {
          return Effect_Console.log("error: " + Data_Show.show(Text_Parsing_Parser.showParseError)(v.value0));
      };
      throw new Error("Failed pattern match at Main (line 42, column 15 - line 44, column 44): " + [ v.constructor.name ]);
  };
  var ctx = "\x0atitle \"hello\"\x0ax = \"hello\"\x0ay = true\x0astate world {\x0a    title \"hello\"\x0a    title true\x0a}\x0ax[2] = 3\x0astate fuck {\x0a    title true\x0a    title \"hello\" + \" world\"\x0a    descr \"hello world!\"\x0a    delay \"20m\"\x0a    print \"hello again\"\x0a    delay \"20m\"\x0a    order \"a song name\"\x0a    delay \"20m\"\x0a    x[2] = \"asdf\"\x0a    x = 3\x0a    x = -3.5\x0a    x = [1,2,3,4]\x0a    event left (user : \"\", msg : \"^/play\") {}\x0a    going world\x0a}\x0agoing world\x0a";
  var compile = function (ctx1) {
      var v = BotScriptParser.parse(BotScriptParser.parseScript)(ctx1);
      if (v instanceof Data_Either.Right) {
          return Effect_Console.logShow(BotScript.showBotScript)(v.value0);
      };
      if (v instanceof Data_Either.Left) {
          return Effect_Console.log("error: " + Data_Show.show(Text_Parsing_Parser.showParseError)(v.value0));
      };
      throw new Error("Failed pattern match at Main (line 46, column 15 - line 48, column 44): " + [ v.constructor.name ]);
  };
  var main = compile(ctx);
  exports["ctx"] = ctx;
  exports["execute"] = execute;
  exports["compile"] = compile;
  exports["main"] = main;
})(PS);
PS["Main"].main();